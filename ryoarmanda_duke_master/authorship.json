[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "run {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "test {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    toolVersion \u003d \"8.23\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    archiveVersion \u003d \"0.2.0\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "ryoarmanda": 42
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "T | M | 1 | Water plant"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "E | H | 0 | Tech talk | 07/09/2019 1000 | 07/09/2019 1200"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 2
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Duke is a conversational bot designed to keep track of users\u0027 tasks. Users can \"converse\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "with Duke with certain keyword commands, followed by parameters if needed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "![](Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "### Task type support"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "In the heart of Duke, there are three types of tasks supported: **Todo** for general tasks,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "**Deadline** for tasks that have a certain due date, and **Event** for tasks that have"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "a range of time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "### Task priority support"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Prioritize your tasks with a priority modifier: **Low**, **Medium**, or **High**."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "### Local save on hard disk"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Every time an operation that prompts changes in data (e.g. `todo`, `done`, `delete`)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "is executed, Duke will automatically save it to `data/duke.txt` under Duke\u0027s root directory."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Furthermore, when users reopen the app at a later point in time, Duke will read and load the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "tasks\u0027 data from the file above."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "### `list` - List tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Lists tasks that Duke already stored."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Example usage: "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Duke will respond:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "![](list-example.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "### `todo` - Creates a Todo task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "**Syntax**: `todo NAME`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Creates a Todo task with given name and task priority. The created task will be set"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "to Medium priority initially, you can change it with the `priority` command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "`todo Water plant`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Duke will respond:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "![](todo-example.png)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "### `deadline` - Creates a Deadline task "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "**Syntax**: `deadline NAME /by TIME`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "- `TIME` must be in the format `DD/MM/YYYY HHMM` (e.g. `01/01/2000 0159`)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Creates a Deadline task with the given name, priority, and time. The created task will be set"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "to Medium priority initially, you can change it with the `priority` command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Example usage: "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "`deadline Paper assignment /by 20/05/2019 2359`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Duke will respond:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "![](deadline-example.png)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "### `event` - Creates a Event task"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "**Syntax**: `event NAME /at TIME_START - TIME_END`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "- `TIME_START` and `TIME_END` must be in the format `DD/MM/YYYY HHMM` (e.g. `01/01/2000 0159`)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Creates an Event task with the given name, priority, and time range. The created task will be set"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "to Medium priority initially, you can change it with the `priority` command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "`event Tech talk /at 07/09/2019 1000 - 07/09/2019 1200`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Duke will respond:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "![](event-example.png)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "### `done` - Marks task as done"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "**Syntax**: `done TASK_NUMBER`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Marks task with the given task number as done."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Duke will respond:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "![](done-example.png)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "### `delete` - Deletes a task"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "**Syntax**: `delete TASK_NUMBER`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Deletes a task with the given task number."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "`delete 2`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Duke will respond:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "![](delete-example.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "### `find` - Finds tasks"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "**Syntax**: `find KEYWORD`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Finds tasks that match given keyword, case-insensitive."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "`find assignments`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Duke will respond:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "![](find-example.png)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "### `priority` - Set task priority"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "**Syntax**: `priority TASK_INDEX PRIORITY`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "- `PRIORITY` must be either `high`, `medium`, or `low` (case-insensitive)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Assigns the priority of the given task number to a certain level."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "`priority 2 high`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Duke will respond:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "![](priority-example.png)"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "ryoarmanda": 131
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.DukeResponse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private boolean isLoaded;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a Duke object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param filePath The file path of the local save data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            this.tasks \u003d new TaskList(storage.read());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            this.isLoaded \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            this.isLoaded \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Gets the welcome message."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return Welcome message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String getWelcomeResponse() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return this.ui.displayWelcome();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Gets the load response, depends on whether file load is successful."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return Load response."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String getLoadResponse() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (this.isLoaded) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return this.ui.displayLoadSuccess();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return this.ui.displayLoadError();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Gets the execution response from a command-line input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param input The raw input from the command-line."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The response after executing the input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public DukeResponse getResponse(String input) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        DukeResponse response;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            c.validate(this.tasks);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            response \u003d c.execute(this.tasks, this.ui, this.storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            response \u003d new DukeResponse(e.getMessage(), false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "ryoarmanda": 72
    }
  },
  {
    "path": "src/main/java/duke/DukeApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.gui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class DukeApp extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static Stage stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private Duke duke \u003d new Duke(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            DukeApp.stage \u003d stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(DukeApp.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            stage.setTitle(\"Duke, the All Knowing\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().handleDukeStartup();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 32
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Application.launch(DukeApp.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 9
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.exception.DukeValidationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.DateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.DukeResponse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private TaskType type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private DateTime time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private DateTime timeEnd;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates an AddCommand object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param type The type of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param dates The dates of the task, if any."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public AddCommand(TaskType type, String description, DateTime... dates) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.time \u003d dates.length \u003e 0 ? dates[0] : null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.timeEnd \u003d dates.length \u003e 1 ? dates[1] : null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Validates the command parameters."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param taskList The task list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @throws DukeValidationException if there are any invalid parameters."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void validate(TaskList taskList) throws DukeValidationException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (this.type \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new DukeValidationException(\"Task type is not set\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (this.description.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new DukeValidationException(\"Task description is empty.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (this.type \u003d\u003d TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            if (this.time \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                throw new DukeValidationException(\"No date is set\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (this.type \u003d\u003d TaskType.EVENT) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            if (this.time \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                throw new DukeValidationException(\"No start date is set\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            } else if (this.timeEnd \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                throw new DukeValidationException(\"No end date is set\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            } else if (this.timeEnd.compareTo(this.time) \u003c 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                throw new DukeValidationException(\"Time range invalid.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Executes the add command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param tasks The task list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param ui The Ui object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param storage The Storage object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public DukeResponse execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        switch (this.type) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            task \u003d new Todo(this.description);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            task \u003d new Deadline(this.description, this.time);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            task \u003d new Event(this.description, this.time, this.timeEnd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new DukeException(\"Task type not yet supported.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        storage.write(tasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return new DukeResponse(ui.displayAddTask(task, tasks.totalTasks()), this.isExit());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 100
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.DukeResponse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a ByeCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        super(true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Executes the bye command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param tasks The task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param ui The Ui object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param storage The Storage object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public DukeResponse execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return new DukeResponse(ui.displayBye(), this.isExit());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 27
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.exception.DukeValidationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.DukeResponse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a Command object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param isExit The boolean that indicates whether the command should trigger"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *               the exit procedure."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public Command(boolean isExit) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Validates the command parameters."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param taskList The task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @throws DukeValidationException if there are any invalid parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void validate(TaskList taskList) throws DukeValidationException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // No validation by default."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public abstract DukeResponse execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 37
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.exception.UnknownCommandTypeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    LIST(\"list\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    TODO(\"todo\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    EVENT(\"event\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    DONE(\"done\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    DELETE(\"delete\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    FIND(\"find\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    PRIORITY(\"priority\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    BYE(\"bye\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private final String cmd;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    CommandType(String cmd) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.cmd \u003d cmd;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Parses given command code to its corresponding command type."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param cmd The command code."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The command type, if found."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @throws UnknownCommandTypeException if no matching command type found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static CommandType parse(String cmd) throws UnknownCommandTypeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        for (CommandType c : values()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            if (c.cmd.equals(cmd)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                return c;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        throw new UnknownCommandTypeException(\"Invalid command type.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 38
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.exception.DukeValidationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.DukeResponse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a DeleteCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param taskIndex The index of the task to be deleted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public DeleteCommand(int taskIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Validates the command parameters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param taskList The task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @throws DukeValidationException if there are any invalid parameters."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void validate(TaskList taskList) throws DukeValidationException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (this.taskIndex \u003e\u003d taskList.totalTasks()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new DukeValidationException(\"There is no task number \" + (this.taskIndex + 1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Executes the delete command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param tasks The task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param ui The Ui object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param storage The Storage object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public DukeResponse execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Task task \u003d tasks.getTask(this.taskIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        tasks.deleteTask(this.taskIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        storage.write(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return new DukeResponse(ui.displayDeleteTask(task, tasks.totalTasks()), this.isExit());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 49
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.exception.DukeValidationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.DukeResponse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a DoneCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param taskIndex The index of the task to be deleted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public DoneCommand(int taskIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Validates the command parameters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param taskList The task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @throws DukeValidationException if there are any invalid parameters."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void validate(TaskList taskList) throws DukeValidationException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (this.taskIndex \u003e\u003d taskList.totalTasks()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new DukeValidationException(\"There is no task number \" + (this.taskIndex + 1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Executes the done command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param tasks The task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param ui The Ui object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param storage The Storage object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public DukeResponse execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Task task \u003d tasks.getTask(this.taskIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        storage.write(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return new DukeResponse(ui.displayMarkedDone(task), this.isExit());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 49
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.exception.DukeValidationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.DukeResponse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a FindCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param keyword The keyword to find through all the tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Validates the command parameters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param taskList The task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @throws DukeValidationException if there are any invalid parameters."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void validate(TaskList taskList) throws DukeValidationException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (this.keyword.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new DukeValidationException(\"Keyword is empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Executes the find command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param tasks The task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param ui The Ui object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param storage The Storage object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public DukeResponse execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        TaskList matchedTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.totalTasks(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            Task t \u003d tasks.getTask(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            String taskDesc \u003d t.getDescription().toLowerCase();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            if (taskDesc.contains(this.keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                matchedTasks.addTask(t);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return new DukeResponse(ui.displayFindTask(matchedTasks), this.isExit());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 56
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.DukeResponse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a ListCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Executes the list command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param tasks The task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param ui The Ui object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param storage The Storage object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public DukeResponse execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return new DukeResponse(ui.displayTasks(tasks), this.isExit());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 27
    }
  },
  {
    "path": "src/main/java/duke/command/PriorityCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.exception.DukeValidationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.TaskPriority;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.DukeResponse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class PriorityCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private TaskPriority priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a PriorityCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param taskIndex The index of the task to be deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param priority The task priority."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public PriorityCommand(int taskIndex, TaskPriority priority) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Validates the command parameters."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param taskList The task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @throws DukeValidationException if there are any invalid parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void validate(TaskList taskList) throws DukeValidationException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (this.taskIndex \u003e\u003d taskList.totalTasks()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new DukeValidationException(\"There is no task number \" + (this.taskIndex + 1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Executes the priority command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param tasks The task list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param ui The Ui object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param storage The Storage object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public DukeResponse execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Task task \u003d tasks.getTask(this.taskIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        task.setPriority(this.priority);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        storage.write(tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return new DukeResponse(ui.displayPrioritySet(task), this.isExit());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 54
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class DukeParseException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public DukeParseException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeValidationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class DukeValidationException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public DukeValidationException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class UnknownCommandTypeException extends DukeParseException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public UnknownCommandTypeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownTaskPriorityException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class UnknownTaskPriorityException extends DukeParseException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public UnknownTaskPriorityException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownTaskStatusException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class UnknownTaskStatusException extends DukeParseException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public UnknownTaskStatusException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownTaskTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class UnknownTaskTypeException extends DukeParseException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public UnknownTaskTypeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 7
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a user dialog box."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param text The user text."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param img The user image."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return A DialogBox object representing the dialog box."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        db.dialog.setStyle("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            \"-fx-border-width: 0 1 0 0;\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            + \"-fx-border-color: black;\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            + \"-fx-label-padding: 5 10 5 10\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        db.dialog.setAlignment(Pos.CENTER_RIGHT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a dialog from Duke."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param text The dialog text."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param img The image for Duke."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The DialogBox object for Duke."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        db.dialog.setStyle("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            \"-fx-border-width: 0 0 0 1;\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            + \"-fx-border-color: black;\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            + \"-fx-label-padding: 5 10 5 10\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        db.dialog.setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 79
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.DukeApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.DukeResponse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Handles the display of startup responses from Duke."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void handleDukeStartup() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        String welcomeResponse \u003d duke.getWelcomeResponse();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        String loadResponse \u003d duke.getLoadResponse();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                DialogBox.getDukeDialog(welcomeResponse, dukeImage),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                DialogBox.getDukeDialog(loadResponse, dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        DukeResponse response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                DialogBox.getDukeDialog(response.getMessage(), dukeImage)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (response.isExit()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            PauseTransition pause \u003d new PauseTransition(Duration.seconds(3));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            pause.setOnFinished(event -\u003e DukeApp.stage.hide());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            pause.play();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 69
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private DateTime time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a Deadline object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param time The date and time of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public Deadline(String description, DateTime time) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.time \u003d Objects.requireNonNull(time);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a formatted string of the Deadline data for storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return A string of the formatted data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String storageFormat() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return String.format(\"D | %s | %s\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                super.storageFormat(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                this.time.format()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a formatted string of the Deadline data for display."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return A string of the formatted data."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String displayFormat() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return \"[D]\" + String.format(\"%s (by: %s)\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                super.displayFormat(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                this.time.format()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 44
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private DateTime startTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private DateTime endTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates an Event object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param startTime The starting date and time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param endTime The ending date and time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public Event(String description, DateTime startTime, DateTime endTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.startTime \u003d Objects.requireNonNull(startTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.endTime \u003d Objects.requireNonNull(endTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a formatted string of the Event data for storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return A string of the formatted data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String storageFormat() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return String.format(\"E | %s | %s | %s\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                super.storageFormat(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                this.startTime.format(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                this.endTime.format()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a formatted string of the Event data for display."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return A string of the formatted data."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String displayFormat() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return \"[E]\" + String.format(\"%s (at: %s - %s)\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                super.displayFormat(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                this.startTime.format(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                this.endTime.format()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 49
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private TaskStatus status;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private TaskPriority priority;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a Task object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.status \u003d TaskStatus.ONGOING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.priority \u003d TaskPriority.MEDIUM;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.status \u003d TaskStatus.DONE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void setPriority(TaskPriority priority) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a formatted string of the Task data for storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return A string of the formatted data."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String storageFormat() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return String.format(\"%s | %s | %s\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                this.priority.storageFormat(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                this.status.storageFormat(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                this.description"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a formatted string of the Task data for display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return A string of the formatted data."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String displayFormat() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return String.format(\"[%s][%s] %s\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                this.priority.displayFormat(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                this.status.displayFormat(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                this.description"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 56
    }
  },
  {
    "path": "src/main/java/duke/task/TaskPriority.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.exception.UnknownTaskPriorityException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public enum TaskPriority {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    HIGH(\"H\", \"High\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    MEDIUM(\"M\", \"Medium\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    LOW(\"L\", \"Low\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private final String code;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    TaskPriority(String code, String name) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String displayFormat() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String storageFormat() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return this.code;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Parses given code to its corresponding task priority."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param code The task priority code."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The task priority, if found."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @throws UnknownTaskPriorityException if no matching task priority found."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static TaskPriority parseByCode(String code) throws UnknownTaskPriorityException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        for (TaskPriority p : values()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            if (p.code.equals(code)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        throw new UnknownTaskPriorityException(\"Invalid task priority code.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Parses given name to its corresponding task priority."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param name The task priority name."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The task priority, if found."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @throws UnknownTaskPriorityException if no matching task priority found."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static TaskPriority parseByName(String name) throws UnknownTaskPriorityException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        for (TaskPriority p : values()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            if (p.name.equalsIgnoreCase(name)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        throw new UnknownTaskPriorityException(\"Invalid task priority name.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 59
    }
  },
  {
    "path": "src/main/java/duke/task/TaskStatus.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.exception.UnknownTaskStatusException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public enum TaskStatus {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    DONE(\"1\", \"+\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    ONGOING(\"0\", \"x\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private final String code;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private final String indicator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    TaskStatus(String code, String indicator) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.indicator \u003d indicator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String displayFormat() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return this.indicator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String storageFormat() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return this.code;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Parses given code to its corresponding task status."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param code The task status code."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The task status, if found."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @throws UnknownTaskStatusException if no matching task status found."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static TaskStatus parse(String code) throws UnknownTaskStatusException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        for (TaskStatus s : values()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            if (s.code.equals(code)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                return s;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        throw new UnknownTaskStatusException(\"Invalid task status.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 41
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.exception.UnknownTaskTypeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    TODO(\"T\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    EVENT(\"E\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    DEADLINE(\"D\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private final String code;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    TaskType(String code) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Parses given code to its corresponding task type."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param code The task type code."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The task type, if found."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @throws UnknownTaskTypeException if no matching task type found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static TaskType parse(String code) throws UnknownTaskTypeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        for (TaskType t : values()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            if (t.code.equals(code)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                return t;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        throw new UnknownTaskTypeException(\"Invalid task type.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 32
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a Todo object."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a formatted string of the Todo data for storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return A string of the formatted data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String storageFormat() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return String.format(\"T | %s\", super.storageFormat());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a formatted string of the Todo data for display."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return A string of the formatted data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String displayFormat() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return \"[T]\" + super.displayFormat();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 30
    }
  },
  {
    "path": "src/main/java/duke/utility/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private static final DateTimeFormatter DATETIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private DateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Parses the given date and time to a DateTime object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param dateTime The date to be parsed, as a string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return A DateTime object containing the parsed date and time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @throws DukeParseException if parsing failed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static DateTime parse(String dateTime) throws DukeParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return new DateTime(LocalDateTime.parse(dateTime, DATETIME_FORMAT));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new DukeParseException(\"Invalid date.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return this.dateTime.format(DATETIME_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public int compareTo(DateTime dt) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return this.dateTime.compareTo(dt.getDateTime());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 44
    }
  },
  {
    "path": "src/main/java/duke/utility/DukeResponse.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class DukeResponse {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public DukeResponse(String message, boolean isExit) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 19
    }
  },
  {
    "path": "src/main/java/duke/utility/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.command.PriorityCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.TaskPriority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.TaskStatus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Parses the input string coming from command-line."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * If there are any incomplete or invalid inputs, an exception is thrown."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param input The input string from the command-line."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return Command The command describing the action."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @throws DukeParseException if the input syntax is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static Command parseCommand(String input) throws DukeParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        String[] tokens \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        CommandType cmd \u003d CommandType.parse(tokens[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // Handling commands with no parameters first"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        switch (cmd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // Handling commands with parameters"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        checkExistence(tokens, 1, \"Please supply data for this command.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        switch (cmd) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return parseTodo(tokens[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return parseDeadline(tokens[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return parseEvent(tokens[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return parseDone(tokens[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return parseDelete(tokens[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return parseFind(tokens[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        case PRIORITY:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return parsePriority(tokens[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new DukeParseException(\"Command type not yet supported.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Parses the task data from the storage format."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * If there are any incomplete or invalid inputs, an exception is thrown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param input A line from the local save file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return Task The task parsed from input."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @throws DukeParseException if the input is not valid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static Task parseTask(String input) throws DukeParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        String[] args \u003d input.split(\" \\\\| \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        TaskType type \u003d TaskType.parse(args[0]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        TaskPriority priority \u003d TaskPriority.parseByCode(args[1]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        TaskStatus status \u003d TaskStatus.parse(args[2]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            task \u003d new Todo(args[3]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            task \u003d new Deadline(args[3], DateTime.parse(args[4]));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            task \u003d new Event(args[3], DateTime.parse(args[4]), DateTime.parse(args[5]));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new DukeParseException(\"Task type not yet supported.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        task.setPriority(priority);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (status \u003d\u003d TaskStatus.DONE) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private static Command parseTodo(String input) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return new AddCommand(TaskType.TODO, input);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private static Command parseDeadline(String input) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        String[] descAndDate \u003d input.split(\" /by \", 2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        String desc \u003d descAndDate[0];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        checkExistence(descAndDate, 1, \"Please supply the task date.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        DateTime date \u003d DateTime.parse(descAndDate[1]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return new AddCommand(TaskType.DEADLINE, desc, date);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private static Command parseEvent(String input) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        String[] descAndDates \u003d input.split(\" /at \", 2);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        String desc \u003d descAndDates[0];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        checkExistence(descAndDates, 1, \"Please supply the task dates.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        String[] startAndEndDate \u003d descAndDates[1].split(\" - \", 2);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        DateTime startDate \u003d DateTime.parse(startAndEndDate[0]);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        checkExistence(startAndEndDate, 1, \"Please supply the task end date.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        DateTime endDate \u003d DateTime.parse(startAndEndDate[1]);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return new AddCommand(TaskType.EVENT, desc, startDate, endDate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private static Command parseDone(String input) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        int idx \u003d parseTaskNumber(input) - 1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return new DoneCommand(idx);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private static Command parseDelete(String input) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        int idx \u003d parseTaskNumber(input) - 1;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return new DeleteCommand(idx);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private static Command parseFind(String input) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return new FindCommand(input);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private static Command parsePriority(String input) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        String[] indexAndPriority \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        int idx \u003d parseTaskNumber(indexAndPriority[0]) - 1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        checkExistence(indexAndPriority, 1, \"Please supply the priority for the task\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        TaskPriority priority \u003d TaskPriority.parseByName(indexAndPriority[1]);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return new PriorityCommand(idx, priority);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private static void checkExistence(String[] args, int index, String message) throws DukeParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assert args !\u003d null;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (args.length \u003c\u003d index) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new DukeParseException(message);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private static int parseTaskNumber(String s) throws DukeParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return Integer.parseInt(s);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new DukeException(\"Invalid task number\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 176
    }
  },
  {
    "path": "src/main/java/duke/utility/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a Storage object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param filePath The relative file path."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Reads the task data from the local save file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * If the file is not found, the file will be created."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return tasks The list of tasks parsed from the file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @throws DukeException if there is any error during the file creation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public ArrayList\u003cTask\u003e read() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        File f \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            this.createAsNewFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                tasks.add(Parser.parseTask(sc.nextLine()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new DukeException(\"Unexpected error in creating data file.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Writes the tasks and their data to the local save file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * If there are any errors in writing the file, an exception is thrown."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param taskList A TaskList object which contains tasks to be written."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @throws DukeException if there is an error in writing the file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void write(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.totalTasks(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                Task t \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                fw.write(t.storageFormat() + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new DukeException(\"Cannot save tasks to file.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private void createAsNewFile() throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        File f \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            f.getParentFile().mkdir();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new DukeException(\"Error in creating data file.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 81
    }
  },
  {
    "path": "src/main/java/duke/utility/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates an empty TaskList object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a TaskList object filled with task data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param tasks The tasks list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param t The Task object to be added."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.tasks.add(t);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Gets a task from the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param idx The index of the task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The Task object at the specified index."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public Task getTask(int idx) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return this.tasks.get(idx);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Gets the total count of tasks in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return Task count."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public int totalTasks() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Deletes a task from the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param idx The index of the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void deleteTask(int idx) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.tasks.remove(idx);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 62
    }
  },
  {
    "path": "src/main/java/duke/utility/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Displays file load success message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String displayLoadSuccess() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return \"I have your data ready.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Displays file load error message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String displayLoadError() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return \"There was an error in preparing your data.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Displays welcome message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String displayWelcome() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return \"Greetings. It is I, Duke, the All Knowing.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                + \"What can I do for you, mortal?\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Displays error response."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String displayError(String message) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return \":( OOPS!!! \" + message;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Displays the list of tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param taskList The task list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String displayTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        StringBuilder response \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.totalTasks(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            Task t \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            response.append(String.format(\"%d.%s\\n\", i + 1, t.displayFormat()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return response.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Displays the response after adding a task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param t The task that is just added."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param taskCount The taskCount after the addition."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String displayAddTask(Task t, int taskCount) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                + \"  \" + t.displayFormat() + \"\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                + \"Now you have \" + taskCount + \" tasks in the list.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Displays the response after a task is marked done."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param t The task that has just been marked done."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String displayMarkedDone(Task t) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return \"Good job, mortal. I have marked this task as done:\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                + \"  \" + t.displayFormat() + \"\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Displays the response after a task has been deleted."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param t The task that was just deleted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param taskCount The task count after the deletion."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String displayDeleteTask(Task t, int taskCount) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                + \"  \" + t.displayFormat() + \"\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                + \"Now you have \" + taskCount + \" tasks in the list\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Displays the found tasks after the find command."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @param matched The list of matched tasks."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String displayFindTask(TaskList matched) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        StringBuilder response \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        for (int i \u003d 0; i \u003c matched.totalTasks(); i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            Task t \u003d matched.getTask(i);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            response.append(String.format(\"%d.%s\\n\", i + 1, t.displayFormat()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return response.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String displayPrioritySet(Task t) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return \"Noted. I have updated the priority of this task:\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                + \"  \" + t.displayFormat() + \"\\n\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Displays goodbye message."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @return The response string."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String displayBye() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return \"Farewell, mortal. Come see me again anytime.\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                + \"I will A S C E N D in 3 seconds...\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 127
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" prefWidth\u003d\"279.0\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI Light\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "      \u003cRegion prefWidth\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 23
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003c?import javafx.scene.Cursor?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Command here...\" style\u003d\"-fx-background-radius: 0; -fx-background-color: white;\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"557.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-radius: 0; -fx-background-color: white; -fx-border-color: #323232; -fx-border-width: 0 0 0 1;\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI Light\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "         \u003ccursor\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            \u003cCursor fx:constant\u003d\"HAND\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "         \u003c/cursor\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-border-color: #d6d9dc; -fx-border-width: 0 0 1 0; -fx-background-radius: 0;\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-radius: 0; border-color: black;\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 30
    }
  },
  {
    "path": "src/test/java/duke/DateTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.DateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void parse_notADate_exceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertThrows(DukeParseException.class, () -\u003e DateTime.parse(\"not_a_date\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void parse_notInFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertThrows(DukeParseException.class, () -\u003e DateTime.parse(\"10-09-2017 01:23:45\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 19
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import duke.utility.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void parseCommand_noDescriptionInTodo_exceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        String input \u003d \"todo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertThrows(DukeParseException.class, () -\u003e Parser.parseCommand(input));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void parseCommand_noDateInDeadline_exceptionThrown() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        String input \u003d \"deadline test /p low\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertThrows(DukeParseException.class, () -\u003e Parser.parseCommand(input));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void parseCommand_noDatesInEvent_exceptionThrown() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        String input \u003d \"event test /p low\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertThrows(DukeParseException.class, () -\u003e Parser.parseCommand(input));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void parseCommand_noEndDateInEvent_exceptionThrown() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        String input \u003d \"event test /p low /at 01/01/2019 0100\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertThrows(DukeParseException.class, () -\u003e Parser.parseCommand(input));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void parseCommand_noIndexInDone_exceptionThrown() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        String input \u003d \"done\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertThrows(DukeParseException.class, () -\u003e Parser.parseCommand(input));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void parseCommand_noIndexInDelete_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        String input \u003d \"delete\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertThrows(DukeParseException.class, () -\u003e Parser.parseCommand(input));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void priorityCommand_noIndexInPriority_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void parseCommand_unknownCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        String input \u003d \"not_a_command\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertThrows(DukeParseException.class, () -\u003e Parser.parseCommand(input));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 63
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " What can I do for you?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " Here are the tasks in your list:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "   [T][?] Test Todo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "   [D][?] Test Deadline (by: Test Deadline)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "   [E][?] Test Event (at: Test Event)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " Here are the tasks in your list:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " 1.[T][?] Test Todo"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " 2.[D][?] Test Deadline (by: Test Deadline)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " 3.[E][?] Test Event (at: Test Event)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "   [T][?] Test Todo"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " Here are the tasks in your list:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " 1.[T][?] Test Todo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " 2.[D][?] Test Deadline (by: Test Deadline)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " 3.[E][?] Test Event (at: Test Event)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 50
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "todo Test Todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "deadline Test Deadline /by Test Deadline"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "event Test Event /at Test Event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "bye"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 21
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "then"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\tmkdir ../bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "fi"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "then"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\trm ACTUAL.TXT"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "fi"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "then"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\techo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\texit 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "fi"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "then"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\techo \"Test result: PASSED\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\texit 0"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "else"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\techo \"Test result: FAILED\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\texit 1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 29
    }
  }
]
