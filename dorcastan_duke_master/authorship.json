[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Deadline with the given description and due date."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description       Task to be completed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param by                Due date for the Deadline."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a string containing the type of Task, done status, description,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * and deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String describing the Deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 23
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * If the input is \"list\", prints the full list of tasks. If the input is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * \"done\" or \"undo\" followed by an integer, marks the task corresponding to"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * the index integer as done or undone respectively. Otherwise, adds the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * given input to the list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param input     User text to be processed. Input can take one of the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                  following forms:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                  1. \"list\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                  2. \"done [taskIndex]\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                  3. \"undo [taskIndex]\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                  4. \"todo [description]\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                  5. \"deadline [description] /by [time]\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                  6. \"event [description] /at [time]\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                  7. \"[taskDescription]\" (default: treat as Todo)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static void process(String input) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (input.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeFormatter.prettyPrint(taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (input.substring(0, 4).equalsIgnoreCase(\"done\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            // Note: \"done\" must be followed by an integer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(input.substring(5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    // TODO: handle parseInt error"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (!isValid(taskIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                DukeFormatter.prettyPrint("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                        \"Sorry, I couldn\u0027t find the task you requested!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            Task completedTask \u003d taskList.get(taskIndex - 1); // zero-indexed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            completedTask.markAsDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeFormatter.prettyPrint(\"Nice! I\u0027ve marked this task as done:\\n  \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    + completedTask.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (input.substring(0, 4).equalsIgnoreCase(\"undo\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            // TODO: get rid of duplicated code for \"done\" and \"undo\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(input.substring(5));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (!isValid(taskIndex)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                DukeFormatter.prettyPrint("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                        \"Sorry, I couldn\u0027t find the task you requested!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            Task completedTask \u003d taskList.get(taskIndex - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            completedTask.markAsUndone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeFormatter.prettyPrint(\"Oh dear. I\u0027ve marked this task as undone:\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    + \"\\n  \" + completedTask.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            addNewTask(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            int numberOfTasks \u003d taskList.size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeFormatter.prettyPrint(\"Got it. I\u0027ve added this task:\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    + \"\\n  \" + taskList.get(numberOfTasks - 1)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    + \"\\nNow you have \" + numberOfTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Add a new task to the list according to the given task type."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param task      Description of task and other relevant information."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static void addNewTask(String task) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // TODO: reorganise and reduce code duplication"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (task.substring(0, 4).equalsIgnoreCase(\"todo\")) { // Todo"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            taskList.add(new Todo(task.substring(5)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (task.length() \u003c 5) { // FIXME: treat as Todo for now"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            taskList.add(new Todo(task));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (task.substring(0, 5).equalsIgnoreCase(\"event\")) { // Event"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            String[] taskDetails \u003d task.substring(6).split(\" /at \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            taskList.add(new Event(taskDetails[0], taskDetails[1]));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (task.length() \u003c 8) { // FIXME: treat as Todo for now"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            taskList.add(new Todo(task));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (task.substring(0, 8).equalsIgnoreCase( \"deadline\")) { // Deadline"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            String[] taskDetails \u003d task.substring(9).split(\" /by \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            taskList.add(new Deadline(taskDetails[0], taskDetails[1]));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            taskList.add(new Todo(task));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns true if a task corresponding to the given index exists and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * false otherwise."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param taskIndex     Task index to be validated"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return              True if the index is valid and false otherwise"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static boolean isValid(int taskIndex) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return taskIndex \u003e\u003d 1 \u0026\u0026 taskIndex \u003c\u003d taskList.size();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Takes in user input and processes it accordingly."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param args  Standard args"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        DukeFormatter.prettyPrint("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                \"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            String userInput \u003d scanner.nextLine().strip();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (userInput.equalsIgnoreCase(\"bye\")) { break; }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            process(userInput);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        DukeFormatter.prettyPrint(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 107,
      "-": 8
    }
  },
  {
    "path": "src/main/java/DukeFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class DukeFormatter {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String horizontalLine \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            \"____________________________________________________________\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String indent \u003d \"    \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints a horizontal line of width 60 characters."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static void printBorder() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        System.out.println(indent + horizontalLine);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints the given text with indentation of five spaces."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param text"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static void print(String text) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        System.out.println(indent + \" \" + text);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints the given text with a horizontal line above and below the text"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * and appropriate indentation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param text      Formatted text with appropriate line breaks. Maximum"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                  width for each line is 58 characters."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    static void prettyPrint(String text) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String[] lines \u003d text.split(\"\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        printBorder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            print(line);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        printBorder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints the items in the given list with their corresponding index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * numbers. A horizontal line is printed above and below the list, and"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * output is indented throughout."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param list      A List of Tasks to be printed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     // TODO: Wrap text for longer user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     static void prettyPrint(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        printBorder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            print(i + \".\" + list.get(i - 1).toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        printBorder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 53
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Event with the given description and timing."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description       Description of Event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param time              Timing of the Event."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Event(String description, String time) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a string containing the type of Task, done status, description,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * and time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String describing the Event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + time + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 23
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new undone Task with the given description."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description   Description of the Task. Description length should"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                      be at most 50 characters (for now)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a tick or X symbol according to the isDone status of the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * current task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  A tick symbol if the Task is done, and an X symbol otherwise."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return isDone ? \"+\" : \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // return isDone ? \"\\u2713\" : \"\\u2718\"; // return tick or X symbols"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Indicates that the current Task has been completed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Indicates that the current Task has not been completed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void markAsUndone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the description of the Task along with an indication of its"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * isDone status."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String containing the status and description of the current"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *          Task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 49
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Todo task with the given description."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description       Task to be completed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a string containing the type of Task, done status, and"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * description."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String describing the Todo."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 19
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "undo 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 9
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "then"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "else"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dorcastan": 36
    }
  }
]
