[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private String deadLine;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Deadline(String name, String deadLine) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(name, false);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.deadLine \u003d deadLine;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Deadline(String name, String deadLine, boolean done) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(name, done);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.deadLine \u003d deadLine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Deadline isDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new Deadline(super.name, this.deadLine, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if(done) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"[D][✓]\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"[D][✗]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return s + \" \" + name + \" (by: \" + deadLine + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 30
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "        String logo \u003d \"____        _        \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\t |  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\t | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\t | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\t |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        printMessage(\" \" + logo + \"\\n\\t Hello! I\u0027m Duke\" + \"\\n\" + \"\\t What can I do for you?\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        while(sc.hasNext()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                String[] inputs \u003d sc.nextLine().split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                String name \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                String time \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                if(inputs[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    printMessage(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                } else if(inputs[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    printTaskList(taskList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                } else if(inputs[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    if(inputs.length \u003c 2) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        throw new DukeException(\"The task Number cannot be empty.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    int index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    if(index \u003e\u003d taskList.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        throw new DukeException(\"Invalid task number!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    taskList.set(index, taskList.get(index).isDone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    printMessage(\"Nice! I\u0027ve marked this task as done:\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                            + \"\\n\\t   \" + taskList.get(index).toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                } else if(inputs[0].equals(\"todo\")){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    if(inputs.length \u003c 2) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    for(int i \u003d 1; i \u003c inputs.length; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        name \u003d name + inputs[i] + \" \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    name \u003d name.substring(0, name.length() - 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    Todo newTask \u003d new Todo(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    taskList.add(newTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    printMessage(\"Got it. I\u0027ve added this task: \" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                            \"\\n\\t   \" + newTask.toString()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                            + \"\\n\\t Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                } else if(inputs[0].equals(\"deadline\") || inputs[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    String inputType \u003d inputs[0];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    if(inputs.length \u003c 2) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        if(inputType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                            throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                            throw new DukeException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    inputs \u003d fetchString(inputs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    if (inputs[1].equals(\"\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        if(inputType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                            throw new DukeException(\"The end time of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                            throw new DukeException(\"The time of an event cannot be empty.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    name \u003d inputs[0].substring(0, inputs[0].length() - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    time \u003d inputs[1].substring(0, inputs[1].length() - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    Task newTask;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    if (inputType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        newTask \u003d new Deadline(name, time);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        newTask \u003d new Event(name, time);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    taskList.add(newTask);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    printMessage(\"Got it. I\u0027ve added this task: \" +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                            \"\\n\\t   \" + newTask.toString()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                            + \"\\n\\t Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                } else if(inputs[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    if(inputs.length \u003c 2) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        throw new DukeException(\"The task Number cannot be empty.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    int index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    if(index \u003e\u003d taskList.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        throw new DukeException(\"Invalid task number!\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    Task deletedTask \u003d taskList.remove(index);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    printMessage(\"Noted. I\u0027ve removed this task:\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                                            + \"\\n\\t   \" + deletedTask.toString()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                                                + \"\\n\\t Now you have \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                                                    + taskList.size()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                                                        + \" tasks in the list.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            } catch(DukeException de) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                System.err.println(de.toString() + \"\\n\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void printMessage(String output) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(\"\\t \" + output);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void printTaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(\"\\t Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        for(int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            System.out.println(\"\\t\" + \" \" + (i + 1) + \". \" + taskList.get(i));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static String[] fetchString(String[] arr) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String[] result \u003d {\"\", \"\"};"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        while(index \u003c arr.length \u0026\u0026 !(arr[index].charAt(0) \u003d\u003d \u0027/\u0027)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            result[0] \u003d result[0] + arr[index] + \" \";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        //Skip the /at or /by"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        index++;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        while(index \u003c arr.length) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            result[1] \u003d result[1] + arr[index] + \" \";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 158,
      "Jeffry Lum": 3,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String result \u003d \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        result \u003d result"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\n\\t ☹ OOPS!!! \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + getMessage()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\n\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 15
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Event(String name, String time) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(name, false);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Event(String name, String deadLine, boolean done) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(name, done);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.time \u003d deadLine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Event isDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new Event(super.name, this.time, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if(done) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"[E][✓]\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"[E][✗]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return s + \" \" + name + \" (at: \" + time + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 30
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    protected boolean done;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    protected Task(String name, boolean done) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Task isDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new Task(this.name, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 26
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Todo(String name) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(name, false);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Todo(String name, boolean done) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(name, done);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Todo isDone() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new Todo(super.name, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if(done) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"[T][✓]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"[T][✗]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return s + \" \" + name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 27
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 21
    }
  }
]
