[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "**Credits to:**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Robot and chatbot icon made by [Flat Icons][1] from www.flaticon.com"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Jigglypuff icon made by [Darius Dan][2]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[1]:https://www.flaticon.com/authors/flat-icons "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[2]:https://www.flaticon.com/authors/darius-dan"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Duke Increment | Tutorial"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "huiminlim": 7,
      "-": 39
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    archiveVersion \u003d \"0.2.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 45,
      "-": 15
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Duke is a personal chat bot that uses the CLI to manage daily tasks. It is a case insensitve CLI application. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "### Computing Environment"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Duke GUI has been tested and possible to run on Windows and Linux given the following computing environment"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* openjdk 11.0.4"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* OpenJDK Runtime Environment Build 11.0.4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "For Linux, please enter `java --version` to check if the minimum Java requirement is met before running the GUI application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "For Windows, please enter `java --version` to check if the minimum Java requirement is met before running the GUI application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "#### Start Duke Helpbot"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Download the Duke Helpbot from [release page](https://github.com/huiminlim/duke/releases/tag/A-Release)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "#### For Linux, "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Go to the download location folder. You will see the `duke-0.2.0.jar` file. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Right click the `duke-0.2.0.jar` file and click on `properties`. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "![Linux Properties](linux_rightclickpermission.png)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Check the `Allow executing file as program` box."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "![Linux Check](linux_checkpermission.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Double click the `duke-0.2.0.jar` file to execute the Duke Helpbot GUI. "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Alternatively, a command can be issued in the command terminal: `java -jar duke-0.2.0.jar`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "#### For Windows,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Go to the download location folder. You will see the `duke-0.2.0.jar` file. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Double click the `duke-0.2.0.jar` file to execute the Duke Helpbot GUI. "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Alternatively, a command can be issued in the command terminal: `java -jar duke-0.2.0.jar`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Duke allows you to track three types of task - To Do, Deadline and Events. In addition, there are also various utility functions to allow you to manage your task list. These functions include `list`, `delete`, `done`, `bye`, `help`, `find`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "For all To Do, Deadline and Events, a task description is shown in chronological order in which they were added. The classification of the To Do, Deadline and Events are denoted by a task icon, as shown in table below."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Task | Task icon"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "To Do | T"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deadline | D"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Event | E"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "The completion status is also denoted by a completion icon, as shown in the table below."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Completion Status | Completion icon"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Completed | Y"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Incomplete | N"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "A sample list with the Task Icon and Completion Status is show below"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "![Sample list](samplelist.png)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "### `list` - List out all tasks "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "A list of all the To Do, Deadline and Events are shown to the you."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "For Deadlines, the date and time in which the task is due is included in the same line after the task description."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "For Events, the date and time in which the task is happening is included in the same line after the task description."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of expected outcome:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "1.[E][N] project meeting (by: 02/12/2019 1420)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "2.[D][N] return book (by: 02/12/2019 1420)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "3.[T][N] read book"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "A sample Duke Helpbot response can be seen below."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "![List command](list.png)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "### `help` - Show help page to assist user in commands available"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Help shows you the various commands that the Duke chat bot uses in the application. "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of expected outcome:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Welcome to help page!"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Here are some commands you can use:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "list, todo, event, deadline, done, delete, find, bye"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "A sample Duke Helpbot response can be seen below."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "![Help command](help.png)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "You can further check the syntax required of each command to use it, by supplying the command interested."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "`help todo`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of expected outcome:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Here is what I found!"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "todo \u003ctask description\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "A sample Duke Helpbot response can be seen below."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "![help specific command](helptodo.png)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "### `todo` - Adds a To Do task to the task list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "You can add a To Do task that has no deadline to the task list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `todo TASK_DESCRIPTION`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "where "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `TASK_DESCRIPTION` refers to the task item that you wish to add into the task list. "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "`todo Homework`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of expected outcome:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  [T] Homework"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "A sample Duke Helpbot response can be seen below."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "![Todo command](todo.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "### `event` - Adds an Event to the task list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "You can add an Event to the task list to track any event that you may have in your schedule. The event requires a date and time to be furnished with the event description."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `event EVENT_DESCRIPTION /at DD/MM/YYYY HHHH`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "where "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `EVENT_DESCRIPTION`: The description of the event you wish to add to the task list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `DD/MM/YYYY HHHH`: The date and time format of the event. The time is strictly in 24-hours format."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "`event Birthday celebration /at 12/10/2019 1503`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of expected outcome:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  [E] Birthday celebration"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "A sample Duke Helpbot response can be seen below."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "![Event command](event.png)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "### `deadline` - Adds an task with deadline to the task list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "You can add a task with a deadline to the task list to track any deadlines you have. The deadline requires a date and time to be furnished with the deadline task description."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `deadline DEADLINE_DESCRIPTION /at DD/MM/YYYY HHHH`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "where "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `DEADLINE_DESCRIPTION`: The description of the deadline you wish to add to the task list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `DD/MM/YYYY HHHH`: The date and time format of the event. The time is strictly in 24-hours format."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "`deadline CS2103 IP /by 12/10/2019 1503`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of expected outcome:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  [D] CS2103 IP"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "A sample Duke Helpbot response can be seen below."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "![Deadline command](deadline.png)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "### `done` - Sets a task as completed."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "You can update the completion status of the task to done. You need to identify the task to be set as done with the task number, by checking the task list."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `done INDEX_TASK`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "where `INDEX_TASK`: Index of the task in your task list. To check the index, you can use the `list` command to refer to the index."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "`done 4`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of expected outcome:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  [D][Y] CS2103 IP (by: 12/10/2019 1123)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "A sample Duke Helpbot response can be seen below."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "![Done command](done.png)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "### `delete` - Deletes a task in task list."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "You can delete a specific task from the task list. You need to identify the task to be deleted with the task number, by checking the task list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `delete INDEX_TASK`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "where `INDEX_TASK`: Index of the task in your task list. To check the index, you can use the `list` command to refer to the index."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of expected outcome:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  [E][N] CS2103 IP (by: 12/10/2019 1123)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "A sample Duke Helpbot response can be seen below."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "![Delete command](delete1.png)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "### `find` - Finds all the task with the matching keyword in the task description."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "You can find all the task entries in the task list, in which the task description contains the specified keyword. "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "where `KEYWORD`: Keyword to search for in tasks in task list."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "`find book`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of expected outcome:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  1.[D][N] return book (by: 12/10/2019 1123)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "  2.[Y][N] read book"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "A sample Duke Helpbot response can be seen below."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "![Find command](findbook.png)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "### `bye` - To exit and stop Duke."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "To stop the session with Duke, you can specify `bye` to end the session with Duke."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example of expected outcome:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "```"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "A sample Duke Helpbot response can be seen below."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "![Bye command](bye.png)"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 283,
      "-": 17
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.command.CommandNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.parser.IncorrectArgumentsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.parser.IncorrectFileFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.parser.IncorrectNumberOfArgumentsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a Duke - interactive bot."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Contains functions to operate the bot."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate TaskList tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to initialize Duke for startup."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Set up storage, parser and ui."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic Duke() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tParser.initialize();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tstorage \u003d new Storage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Performs Duke start up operation to generate task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic void performDukeStartup() throws IncorrectFileFormatException, FileNotFoundException,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\tIncorrectArgumentsException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttasks \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\ttasks \u003d new TaskList(storage.load(ui));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (IncorrectFileFormatException j) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow new IncorrectFileFormatException(ui.getLoadingError());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (NullPointerException n) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow new NullPointerException(ui.getIndexError());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (FileNotFoundException f1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow new FileNotFoundException(ui.getLoadingError());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t// error"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (IncorrectArgumentsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow e;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Generate a GUI dialog box with duke response and image."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return Dialog box with duke response and image."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String getDukeResponse(String input) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString output;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tCommand c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\toutput \u003d c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\toutput \u003d \"Incorrect input value.\\nPlease check again.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (CommandNotFoundException c) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\toutput \u003d \"Command not found.\\nPlease check again.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (NullPointerException n) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\toutput \u003d \"Internal error encountered. (Null Ptr)\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (IOException i) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\toutput \u003d \"Internal error encountered.\" + \" (IO exception)\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (IncorrectNumberOfArgumentsException a) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\toutput \u003d \"Incorrect command format.\\nPlease check again.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (IncorrectArgumentsException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\toutput \u003d \"Incorrect arguments supplied.\\nPlease check again.\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn output;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Generate a GUI dialog box with welcome message."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return Dialog box with duke welcome message and image."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String getDukeWelcome() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn ui.getWelcome();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 90
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tApplication.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.frontend.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Start the main application for Duke GUI."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic void start(Stage stage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tFXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tAnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tScene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tstage.setScene(scene);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tImage icon \u003d new Image(getClass().getResourceAsStream(\"/images/robot.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tstage.getIcons().add(icon);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tstage.setTitle(\"Duke Helpbot\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tfxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tstage.show();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\te.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 41
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents an add command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * To add task to task list, perform Ui task and save to hard disk."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to create an Add command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param command     String variable of the command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param pendingTask Task to add into the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic AddCommand(String command, Task pendingTask) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsuper(command, pendingTask);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Added new task to task list, perform Ui display and save to hard disk."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param list    List containing all tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param ui      Ui interface of duke."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param storage Storage interface."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String variable of message after command execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String execute(TaskList list, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tTask temp \u003d getPendingTask();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tlist.addNewTask(temp);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tlist.increaseTaskCount();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString addedTaskMessage \u003d ui.getAddedTaskMessage(temp.getFirstCharTask(), temp.getIsDone(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t temp.getTaskDescription(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t list.getTaskCount());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn addedTaskMessage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Return boolean indicating if command is exit command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return boolean flag indicating if is exit command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 54
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Performs a Bye command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * by executing the Ui to show bye screen."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to create a Bye command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param command     String variable of the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param pendingTask Task to add into the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic ByeCommand(String command, Task pendingTask) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsuper(command, pendingTask);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Shows Ui screen of bye."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param list    List containing all tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param ui      Ui interface of duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param storage Storage interface."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String variable of message after command execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String execute(TaskList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn ui.getBye();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Return boolean indicating if command is exit command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return boolean flag indicating if is exit command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 46
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * General command class,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * contains basic abstract command actions, such as execute, check if exit command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * and get command type and pending tasks of command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate CommandType commandType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate Task pendingTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor for class Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param command     String command input from user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param pendingTask Task object from information given by user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic Command(String command, Task pendingTask) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthis.commandType \u003d CommandType.valueOf(command.toUpperCase());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (IllegalArgumentException i) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow new IllegalArgumentException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (NullPointerException n) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow new NullPointerException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (pendingTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow new NullPointerException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthis.pendingTask \u003d pendingTask;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Perform command actions."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic abstract String execute(TaskList list, Ui ui, Storage storage) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Return boolean indicating if command is exit command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return boolean flag indicating if is exit command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic abstract boolean isExit();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Return task object held by command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return task held in pendingTask."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic Task getPendingTask() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn pendingTask;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huiminlim": 64
    }
  },
  {
    "path": "src/main/java/duke/command/CommandNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Exception thrown when command input by user is not found by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class CommandNotFoundException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to create an exception when command input by user is not found."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic CommandNotFoundException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsuper();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 15
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Contains the different types of commands available in duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tADD, DELETE, LIST, DONE, BYE, FIND, HELP"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 8
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a delete command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * To remove task from task list, perform Ui task and save updated list to hard disk."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate int taskNumberToDelete;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor for class Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param command            String command input from user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param pending            Task object from information given by user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param taskNumberToDelete Int task number to delete from user task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic DeleteCommand(String command, Task pending, int taskNumberToDelete) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsuper(command, pending);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tthis.taskNumberToDelete \u003d taskNumberToDelete;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Delete task from task list, perform Ui display and save to hard disk."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param list    List containing all tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param ui      Ui interface of duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param storage Storage interface."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String variable of message after command execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String execute(TaskList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tTask t \u003d list.deleteTask(taskNumberToDelete - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t/*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tstorage.save(list.printList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (IOException o) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\treturn ui.getSavingError();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn ui.getDeletedTask(t, list.getTaskCount());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Return boolean indicating if command is exit command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return boolean flag indicating if is exit command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 60
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a done command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * To set task from task list as done, perform Ui task and save updated list to hard disk."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate int taskNumberDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor for creating a done command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param command        String variable of the command input by user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param pendingTask    Task to be added into the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param taskNumberDone Integer of the index of task to execute done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic DoneCommand(String command, Task pendingTask, int taskNumberDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsuper(command, pendingTask);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tthis.taskNumberDone \u003d taskNumberDone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Set task from task list as done, perform Ui display and save to hard disk."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param list    List containing all tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param ui      Ui interface of duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param storage Storage interface."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String variable of message after command execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String execute(TaskList list, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tTask t \u003d list.setTaskDone(taskNumberDone - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t//storage.save(list.printList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn ui.getDoneTask(t);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Return boolean indicating if command is exit command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return boolean flag indicating if is exit command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 53
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to create a find command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param command     String variable of the command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param keyword     String containing word to search for in tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param pendingTask Task to add into the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic FindCommand(String command, String keyword, Task pendingTask) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsuper(command, pendingTask);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tthis.keyword \u003d keyword;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Performs the execution of the find command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param list    List of tasks in application stored."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param ui      UI interface to show messages to the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param storage Storage interface to save task list to disk."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String variable of message after command execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String execute(TaskList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tArrayList\u003cString\u003e listFound \u003d list.find(keyword);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn ui.getMatchingTaskList(listFound);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Return boolean indicating if command is exit command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return boolean flag indicating if is exit command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 48
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate boolean isCommandSpecific;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate String inputCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic HelpCommand(boolean isCommandSpecific, String inputCommand) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsuper(\"Help\", new Task());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tthis.isCommandSpecific \u003d isCommandSpecific;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tthis.inputCommand \u003d inputCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String execute(TaskList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString helpOutput \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (isCommandSpecific) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\thelpOutput \u003d executeSpecificCommand(inputCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\thelpOutput \u003d executeGeneral();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn helpOutput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate String executeSpecificCommand(String commandInterested) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString helpLineStart \u003d \"Here is what I found!\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isByeCommand \u003d commandInterested.toLowerCase().equals(\"bye\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isFindCommand \u003d commandInterested.toLowerCase().equals(\"find\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isListCommand \u003d commandInterested.toLowerCase().equals(\"list\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isDeleteCommand \u003d commandInterested.toLowerCase().equals(\"delete\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isToDoCommand \u003d commandInterested.toLowerCase().equals(\"todo\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isDeadlineCommand \u003d commandInterested.toLowerCase().equals(\"deadline\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isEventCommand \u003d commandInterested.toLowerCase().equals(\"event\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isDoneCommand \u003d commandInterested.toLowerCase().equals(\"done\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString helpLine \u003d \"Sorry! Command not found!\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (isToDoCommand) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\thelpLine \u003d commandInterested + \" \u003ctask description\u003e\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else if (isDeadlineCommand) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\thelpLine \u003d commandInterested + \" \u003ctask description\u003e /by dd/mm/yyyy\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else if (isEventCommand) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\thelpLine \u003d commandInterested + \" \u003ctask description\u003e /at dd/mm/yyyy\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else if (isDeleteCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\thelpLine \u003d commandInterested + \" \u003ctask number\u003e\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else if (isListCommand) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\thelpLine \u003d commandInterested;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else if (isFindCommand) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\thelpLine \u003d commandInterested + \" \u003ckeyword\u003e\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else if (isByeCommand) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\thelpLine \u003d commandInterested;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else if (isDoneCommand) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\thelpLine \u003d commandInterested + \" \u003ctask number\u003e\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn helpLineStart + helpLine;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t// Execute only generally, all commands guide"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate String executeGeneral() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString helpLine1 \u003d \"Welcome to help page!\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString helpLine2 \u003d \"Here are some commands you can use:\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString helpLine3 \u003d \"list, todo, event, deadline, done, delete, find, bye\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn helpLine1 + helpLine2 + helpLine3;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 75
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a list command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * To obtain list of task to print, perform Ui task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to create a list command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param command String variable of the command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic ListCommand(String command) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsuper(command, new Task());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Obtain list of tasks to print, perform Ui display and save to hard disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param list    List containing all tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param ui      Ui interface of duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param storage Storage interface."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String variable of message after command execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String execute(TaskList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tArrayList\u003cString\u003e listToPrint \u003d list.printList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn ui.getList(listToPrint);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Return boolean indicating if command is exit command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return boolean flag indicating if is exit command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 48
    }
  },
  {
    "path": "src/main/java/duke/frontend/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.frontend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to generate new dialog box for Duke chat bot."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tDialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tFXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tfxmlLoader.setController(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tfxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tfxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\te.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tdialog.setText(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tdialog.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tdisplayPicture.setImage(img);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Generate a GUI dialog box with duke response and image."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return Dialog box with duke response and image."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tstatic DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn new DialogBox(text, img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Generate a GUI dialog box with user response and image."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return Dialog box with user response and image."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tstatic DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tvar db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tdb.flip();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn db;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate void flip() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tCollections.reverse(tmp);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tgetChildren().setAll(tmp);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsetAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 75
    }
  },
  {
    "path": "src/main/java/duke/frontend/HelpBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.frontend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class HelpBox extends HBox {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate Label help;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate ImageView helpPicture;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to generate new help box for Duke chat bot."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tHelpBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tFXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/HelpBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tfxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tfxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tfxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\te.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\thelp.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\thelp.setWrapText(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\thelpPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsetAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Generate a GUI dialog box with help messages."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return Dialog box with help response and image."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tstatic HelpBox getHelpBox(String text, Image img) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn new HelpBox(text, img);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 52
    }
  },
  {
    "path": "src/main/java/duke/frontend/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.frontend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.parser.IncorrectArgumentsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.parser.IncorrectFileFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate Image userImage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate Image dukeImage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate Image jigglypuff;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Initializes the chat bot GUI components, scroll pane and images of bot."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tscrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tuserImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/chatbot.png\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tdukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/robot.png\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tjigglypuff \u003d new Image(this.getClass().getResourceAsStream(\"/images/avatar.png\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Set up Duke for main GUI, prepare the task list for first load."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic void setDuke(Duke d) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tduke \u003d d;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString loadingErrorMessage \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isErrorOccurred \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t// Perform loading of tasks from disk"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tduke.performDukeStartup();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (InvalidPathException i) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tisErrorOccurred \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tloadingErrorMessage \u003d i.getMessage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (IncorrectFileFormatException f) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tloadingErrorMessage \u003d f.getMessage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (NullPointerException n) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tloadingErrorMessage \u003d n.getMessage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (FileNotFoundException z) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tloadingErrorMessage \u003d z.getMessage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (IncorrectArgumentsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tloadingErrorMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (isErrorOccurred) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tdialogContainer.getChildren().add(new DialogBox(loadingErrorMessage, dukeImage));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t// Throw initial duke greeting"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tdialogContainer.getChildren().add(new DialogBox(duke.getDukeWelcome(), dukeImage));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate void handleUserInput() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString input \u003d userInput.getText();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isHelpCommand \u003d input.toLowerCase().startsWith(\"help\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (isHelpCommand) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\thandleHelpPage(input);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\thandleOperations(input);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Handles the logic and message to display for help command entered by user."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param commandInterested Command entered by user."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate void handleHelpPage(String commandInterested) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString helpOutput \u003d duke.getDukeResponse(commandInterested);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tdialogContainer.getChildren().addAll(new HelpBox(helpOutput, jigglypuff));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tuserInput.clear();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Handles usual operations other than help page."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate void handleOperations(String input) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString response \u003d duke.getDukeResponse(input);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tdialogContainer.getChildren().addAll(DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\t DialogBox.getDukeDialog(response, dukeImage));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tuserInput.clear();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 111
    }
  },
  {
    "path": "src/main/java/duke/parser/IncorrectArgumentsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class IncorrectArgumentsException extends Throwable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to create an exception when incorrect format in file detected."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param loadingError String message when loading error occurs when loading file."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic IncorrectArgumentsException(String loadingError) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsuper();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 15
    }
  },
  {
    "path": "src/main/java/duke/parser/IncorrectFileFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Exception thrown when file read has incorrect format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class IncorrectFileFormatException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to create an exception when incorrect format in file detected."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param loadingError String message when loading error occurs when loading file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic IncorrectFileFormatException(String loadingError) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsuper();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 16
    }
  },
  {
    "path": "src/main/java/duke/parser/IncorrectNumberOfArgumentsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class IncorrectNumberOfArgumentsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to create an exception when user gives incorrect number of arguments."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic IncorrectNumberOfArgumentsException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsuper();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 11
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a parser to parse user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Has parse functions for user input and file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate static ArrayList\u003cString\u003e commandList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Initialize the parser,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * by preparing command list to cross check if command input by user/file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * is valid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic static void initialize() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tcommandList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tcommandList.add(\"DEADLINE\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tcommandList.add(\"TODO\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tcommandList.add(\"EVENT\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tcommandList.add(\"DELETE\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tcommandList.add(\"DONE\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tcommandList.add(\"LIST\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tcommandList.add(\"BYE\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tcommandList.add(\"FIND\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tcommandList.add(\"HELP\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Checks if user input follows format of: command description time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Throws CommandNotFoundException if command is not found."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Return user command in command object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param input String input of command from user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return Command object of the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @throws CommandNotFoundException If command entered by user is not found."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic static Command parse("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tString input) throws CommandNotFoundException, IncorrectNumberOfArgumentsException, IncorrectArgumentsException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isCommandFound \u003d isCommandValid(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (!isCommandFound) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow new CommandNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString commandName \u003d getCommandName(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString commandType \u003d classifyCommand(commandName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tCommandType type \u003d CommandType.valueOf(commandType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tTask task;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tCommand command;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isCommandTypeAdd \u003d (type \u003d\u003d CommandType.ADD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isCommandTypeBye \u003d (type \u003d\u003d CommandType.BYE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isCommandTypeDelete \u003d (type \u003d\u003d CommandType.DELETE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isCommandTypeDone \u003d (type \u003d\u003d CommandType.DONE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isCommandTypeList \u003d (type \u003d\u003d CommandType.LIST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isCommandTypeFind \u003d (type \u003d\u003d CommandType.FIND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isCommandTypeHelp \u003d (type \u003d\u003d CommandType.HELP);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (isCommandTypeAdd) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tboolean isCommandToDo \u003d commandName.equals(\"TODO\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tboolean isCommandDeadline \u003d commandName.equals(\"DEADLINE\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tboolean isCommandEvent \u003d commandName.equals(\"EVENT\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tif (isCommandToDo) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tchar firstCharOfCommand \u003d commandName.toUpperCase().charAt(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tString taskDescription \u003d input.substring(\"Todo\".length()).trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t// Empty task description"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tboolean isEmptyTaskDescription \u003d taskDescription.equals(\"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tif (isEmptyTaskDescription) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t\tthrow new IncorrectNumberOfArgumentsException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\ttask \u003d new ToDo(firstCharOfCommand, taskDescription, false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t} else if (isCommandDeadline) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tArrayList\u003cString\u003e taskInfo \u003d parseTaskInformationAndDate(input, commandName, \"by \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\ttask \u003d new Deadline(commandName.toUpperCase().charAt(0), taskInfo.get(1), false, taskInfo.get(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t} else if (isCommandEvent) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tArrayList\u003cString\u003e taskInfo \u003d parseTaskInformationAndDate(input, commandName, \"at \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\ttask \u003d new Event(commandName.toUpperCase().charAt(0), taskInfo.get(1), false, taskInfo.get(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tthrow new CommandNotFoundException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tcommand \u003d new AddCommand(commandType, task);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else if (isCommandTypeBye) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\ttask \u003d new Task();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tcommand \u003d new ByeCommand(commandName, task);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else if (isCommandTypeDelete) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tString subsequent \u003d input.substring(\"Delete \".length()).trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tint numberToDelete \u003d Integer.parseInt(subsequent);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\ttask \u003d new Task();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tcommand \u003d new DeleteCommand(commandName, task, numberToDelete);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else if (isCommandTypeDone) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tString subsequent \u003d input.substring(\"Done \".length()).trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tint numberDone \u003d Integer.parseInt(subsequent);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\ttask \u003d new Task();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tcommand \u003d new DoneCommand(commandName, task, numberDone);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else if (isCommandTypeList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tcommand \u003d new ListCommand(commandName);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else if (isCommandTypeFind) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tboolean isNoKeywordToFind \u003d input.toLowerCase().equals(\"find\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tif (isNoKeywordToFind) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tthrow new IncorrectNumberOfArgumentsException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tString keyword \u003d input.substring(\"Find \".length()).trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tboolean isKeywordBlank \u003d keyword.equals(\"\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tif (isKeywordBlank) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tthrow new IncorrectNumberOfArgumentsException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tcommand \u003d new FindCommand(commandName, keyword, new Task());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else if (isCommandTypeHelp) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tString remainingInput \u003d input.toLowerCase().replace(\"help\", \"\").trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tboolean isGeneralHelpCommand \u003d (remainingInput.length() \u003d\u003d 0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tif (isGeneralHelpCommand) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tcommand \u003d new HelpCommand(false, null);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tcommand \u003d new HelpCommand(true, remainingInput);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow new CommandNotFoundException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn command;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Checks if a given user input command is valid."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param userInput String containing user input of the command."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return boolean indicating true if command is valid, else false."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate static boolean isCommandValid(String userInput) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isCommandValid \u003d false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tfor (String s : commandList) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tif (userInput.toUpperCase().startsWith(s)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tisCommandValid \u003d true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn isCommandValid;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Classifies the given command in string format to the program defined command object name."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param userInput String containing input of the command."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String variable of the name of command in program defined command objects."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate static String getCommandName(String userInput) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString commandName \u003d \"\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tfor (String s : commandList) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tif (userInput.toUpperCase().startsWith(s)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tcommandName \u003d s;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tbreak;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn commandName;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Classifies the given command in string format to the program defined command object name."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param command String containing input of the command."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String variable of the name of command in program defined command objects."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate static String classifyCommand(String command) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isAddTypeCommand \u003d (command.equals(\"TODO\") || command.equals(\"DEADLINE\") || command.equals(\"EVENT\"));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (isAddTypeCommand) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\treturn \"ADD\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn command;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Parse a string of task description and date time into separate strings."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param userInput                String containing input of the task description, command name and separator."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param commandName              String variable containing the name of command."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param separatorAfterFirstSlash String containing the separator of the time portion."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return ArrayList of Strings containing the date, then task description."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate static ArrayList\u003cString\u003e parseTaskInformationAndDate(String userInput, String commandName,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t String separatorAfterFirstSlash) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tArrayList\u003cString\u003e taskInformation \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t// Get substring after the task Description in the user input"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString stringAfterTaskDescription \u003d userInput.substring(commandName.length());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tint firstIndexSlash \u003d stringAfterTaskDescription.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tassert firstIndexSlash !\u003d -1 : \"slash should exist in the string\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tassert firstIndexSlash \u003c stringAfterTaskDescription.length() : \"index of slash should be in string\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString date \u003d stringAfterTaskDescription.substring(firstIndexSlash + separatorAfterFirstSlash.length() + 1);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString taskDescription \u003d stringAfterTaskDescription.substring(0, firstIndexSlash).trim();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttaskInformation.add(date);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttaskInformation.add(taskDescription);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn taskInformation;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Checks if file input follows format of: command description time"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Throws IncorrectFileFormatException if command is not found."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Return task in task object."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param input String input of command from user."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return task object of the file."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @throws IncorrectFileFormatException If input entered by user is not recognized."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic static Task parseFromFile(String input, Ui ui) throws IncorrectFileFormatException,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t IncorrectArgumentsException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tTask task \u003d new Task();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isTaskDone \u003d false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isStartWithChar \u003d input.startsWith(\"[D]\") || input.startsWith(\"[E]\") || input.startsWith(\"[T]\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (!isStartWithChar) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow new IncorrectFileFormatException(ui.getLoadingError());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString subsequentString \u003d input.substring(\"[X]\".length());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tisTaskDone \u003d isTaskDone(subsequentString, ui);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (IncorrectFileFormatException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow new IncorrectFileFormatException(\"Error\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t// Move to after cross/tick and space"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsubsequentString \u003d subsequentString.substring(4).trim();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isStartWithT \u003d input.startsWith(\"[T]\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isStartWithDOrE \u003d input.startsWith(\"[D]\") || input.startsWith(\"[E]\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (isStartWithT) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\ttask \u003d new ToDo(\u0027T\u0027, subsequentString, isTaskDone);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else if (isStartWithDOrE) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tint slashIndex \u003d subsequentString.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tif (slashIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tthrow new IncorrectFileFormatException(ui.getLoadingError());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tString taskDescription \u003d subsequentString.substring(0, slashIndex).trim();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tString date \u003d subsequentString.substring(slashIndex + \"xx \".length() + 1);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tboolean isStartWithD \u003d input.startsWith(\"[D]\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tboolean isStartWithE \u003d input.startsWith(\"[E]\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tif (isStartWithD) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\ttask \u003d new Deadline(\u0027D\u0027, taskDescription, isTaskDone, date);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t} else if (isStartWithE) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\ttask \u003d new Event(\u0027E\u0027, taskDescription, isTaskDone, date);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tthrow new IncorrectFileFormatException(ui.getLoadingError());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn task;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Checks if file input follows format of: command description time"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Throws IncorrectFileFormatException if command is not found."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Return task in task object."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param subsequentString String input from file to check if task is indicated as done."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param ui               UI interface to show error message if incorrect format."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return Boolean indicating true if input indicates true, else false."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @throws IncorrectFileFormatException If input entered by user is not recognized."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate static boolean isTaskDone(String subsequentString, Ui ui) throws IncorrectFileFormatException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isTaskDone \u003d false;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (subsequentString.startsWith(\"[1]\")) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tisTaskDone \u003d true;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else if (subsequentString.startsWith(\"[0]\")) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tisTaskDone \u003d false;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow new IncorrectFileFormatException(ui.getLoadingError());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn isTaskDone;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 298
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.parser.IncorrectArgumentsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.parser.IncorrectFileFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a storage function of duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Has loading from file and saving to hard disk function."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t//private String targetFilePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t//private String printFilePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to initialize storage filepaths."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * \u003cp\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * //@param filePath String containing filepath to read list of task from disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic Storage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t// Convert string filePath to actual filepath and store in FilePath class"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t//targetFilePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t//printFilePath \u003d \"C:\\\\Users\\\\user\\\\Desktop\\\\CS2103_Git\\\\duke\\\\data\\\\print.txt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Returns task list of tasks from file,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * convert input from file to task objects."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param ui UI to show load messages if failed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return task list from file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @throws IncorrectFileFormatException If file format is incorrect."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic ArrayList\u003cTask\u003e load(Ui ui) throws IncorrectFileFormatException, IOException, IncorrectArgumentsException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t//File f;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t//f \u003d new File(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t//Scanner s \u003d new Scanner(f, \"Unicode\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tInputStream stream \u003d Storage.class.getClassLoader().getResourceAsStream(\"tasks.txt\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (stream \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\treturn new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tBufferedReader reader \u003d new BufferedReader(new InputStreamReader(stream));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tArrayList\u003cString\u003e listInput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString i \u003d \" \";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\twhile ((i \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tlistInput.add(i.trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tArrayList\u003cTask\u003e listTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tfor (String value : listInput) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\ttry {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tlistTask.add(Parser.parseFromFile(value, ui));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t} catch (IncorrectFileFormatException f1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tthrow new IncorrectFileFormatException(ui.getLoadingError());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t} catch (NullPointerException n) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tthrow new NullPointerException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t} catch (IncorrectArgumentsException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tthrow e;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn listTask;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huiminlim": 81
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.parser.IncorrectArgumentsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.text.ParsePosition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a deadline task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Has functions to print the task information to a standard form,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * to set and get the given time of the deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate Date givenTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate SimpleDateFormat dateFormatting;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to create Deadline task object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param taskType        Character of first letter of task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param taskDescription String input of command from user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param isDone          Boolean indicating if task is completed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param givenTime       String of given time of deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic Deadline(char taskType, String taskDescription, boolean isDone,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t\tString givenTime) throws IncorrectArgumentsException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsuper(taskType, taskDescription, isDone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tdateFormatting \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tthis.givenTime \u003d dateFormatting.parse(givenTime, new ParsePosition(0));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (this.givenTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow new IncorrectArgumentsException(\"Time format is incorrect.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Returns string representation of task,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * in terms of initial, icon of done, task description and given deadline."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String representation of task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String printTask() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tStringBuilder taskInformation \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttaskInformation.append(\"[\").append(getFirstCharTask()).append(\"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttaskInformation.append(\"[\").append(getIcon()).append(\"] \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttaskInformation.append(getTaskDescription()).append(\" (by: \").append(getGivenTime()).append(\")\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn taskInformation.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Get time for given deadline."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String getGivenTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn dateFormatting.format(givenTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 59
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.parser.IncorrectArgumentsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.text.ParsePosition;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents an Event task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Has functions to print the task information to a standard form,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * to set and get the given time of the deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate Date givenTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate SimpleDateFormat df;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to create Event task object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param taskDescription String input of command from user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param isDone          Boolean indicating if task is completed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param givenTime       String of given time of deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic Event(String taskDescription, boolean isDone, String givenTime) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsuper(taskDescription, isDone);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthis.givenTime \u003d df.parse(givenTime, new ParsePosition(0));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tSystem.out.println(this.givenTime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (NullPointerException n) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow new NullPointerException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to create Event task object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param taskType        Character of first letter of task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param taskDescription String input of command from user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param isDone          Boolean indicating if task is completed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param givenTime       String of given time of deadline."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic Event(char taskType, String taskDescription, boolean isDone,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t String givenTime) throws IncorrectArgumentsException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsuper(taskType, taskDescription, isDone);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tthis.givenTime \u003d df.parse(givenTime, new ParsePosition(0));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (this.givenTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow new IncorrectArgumentsException(\"Time format is incorrect.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Returns string representation of task,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * in terms of initial, icon of done, task description and given deadline."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String representation of task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String printTask() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tStringBuilder taskInformation \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttaskInformation.append(\"[\").append(getFirstCharTask()).append(\"]\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttaskInformation.append(\"[\").append(getIcon()).append(\"] \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttaskInformation.append(getTaskDescription()).append(\" (at: \").append(getGivenTime()).append(\")\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn taskInformation.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Get time for given deadline."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String of formatted time."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String getGivenTime() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn df.format(givenTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 81
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents an task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Has functions to print the task information to a standard form,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * to set and get the given time of the deadline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprotected char taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprotected String taskDescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprotected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to create Task object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic Task() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tthis.taskDescription \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tthis.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to create Task object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param taskDescription String input of command from user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param isDone          Boolean indicating if task is completed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic Task(String taskDescription, boolean isDone) throws NullPointerException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tthis.isDone \u003d isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (taskDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow new NullPointerException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tthis.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to create Event task object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param taskDescription String input of command from user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param isDone          Boolean indicating if task is completed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param taskType        Character of first letter of task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic Task(char taskType, String taskDescription, boolean isDone) throws NullPointerException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tthis.isDone \u003d isDone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tthis.taskType \u003d taskType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (taskDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow new NullPointerException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tthis.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Returns string representation of task,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * in terms of initial, icon of done, task description."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String representation of task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String printTask() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn \"[\" + getFirstCharTask() + \"][\" + getIcon() + \"] \" + getTaskDescription();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Returns char of first letter in task name."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return char of first letter in task name."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic char getFirstCharTask() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn taskType;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Returns char icon."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Returns tick if isDone is true, else returns cross."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return char icon."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic char getIcon() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (isDone) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\treturn \u0027Y\u0027;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn \u0027N\u0027;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Get task description for task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String task description."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String getTaskDescription() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn taskDescription;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Indicate that task is done."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Set isDone true when function is called."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic void setIsDone() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tthis.isDone \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Get isDone,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * indicating done status of the task."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return boolean true if done, else false."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic boolean getIsDone() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn isDone;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huiminlim": 113
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to create a ToDo task object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param taskType        Character of first letter of task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param taskDescription String input of command from user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param isDone          Boolean indicating if task is completed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic ToDo(char taskType, String taskDescription, boolean isDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsuper(taskType, taskDescription, isDone);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to create a ToDo task object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param taskDescription String input of command from user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param isDone          Boolean indicating if task is completed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic ToDo(String taskDescription, boolean isDone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tsuper(taskDescription, isDone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 29
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Contains functions to interact with task list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tprivate int taskCount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to create an empty task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttaskCount \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Constructor to create a task list with some tasks loaded from disk."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tthis.taskList \u003d list;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tthis.taskCount \u003d list.size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Add new task to task list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param task To add to the task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic void addNewTask(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttaskList.add(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Increase task count of task list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic void increaseTaskCount() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttaskCount++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Get task count of task list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return int Number of tasks in task list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic int getTaskCount() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn taskCount;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Get list of print format of task list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return ArrayList [String] List of strings representing task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic ArrayList\u003cString\u003e printList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tArrayList\u003cString\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tfor (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\ttemp.add(taskList.get(i).printTask());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn temp;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Delete the task, and return deleted task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return Task Deleted task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic Task deleteTask(int indexToDelete) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tTask t;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tt \u003d taskList.remove(indexToDelete);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (IndexOutOfBoundsException o) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttaskCount--;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn t;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Set task as done given index."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return Task Done task"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic Task setTaskDone(int indexSetDone) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tTask t;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\ttaskList.get(indexSetDone).setIsDone();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tt \u003d taskList.get(indexSetDone);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t} catch (IndexOutOfBoundsException o) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tthrow new IndexOutOfBoundsException(\"Index out of Bound\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn t;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Set task as done given index."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @param keyword String of keyword to search in tasks."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return ArrayList of String to print for tasks containing keyword."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic ArrayList\u003cString\u003e find(String keyword) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tArrayList\u003cString\u003e listFound \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tfor (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tTask t \u003d taskList.get(i);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tString[] taskToken \u003d t.getTaskDescription().split(\" \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tfor (int j \u003d 0; j \u003c taskToken.length; j++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tif (taskToken[j].equals(keyword)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t\tlistFound.add(t.printTask());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t\tbreak;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn listFound;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 121
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a Ui"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Contains functions to interact with user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Generate welcome message upon start up of Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String with welcome message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String getWelcome() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tStringBuilder welcomeMessage \u003d new StringBuilder(\"Hello! I\u0027m Duke, what can I do for you?\\n\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\twelcomeMessage.append(\"\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\twelcomeMessage.append(\"For help, please enter \\\"HELP\\\" for commands.\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\twelcomeMessage.append(\"For help on commands, please enter \\\"HELP \u003cCOMMAND\u003e\\\"\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn welcomeMessage.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Generate goodbye message after Duke shuts down."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String with bye message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String getBye() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Generate message when task is added to task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String with message with information of added task and number of tasks in list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String getAddedTaskMessage(char firstAlphabet, boolean isDone, String taskDescription, int numberOfItems) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tStringBuilder addedTaskMessage \u003d new StringBuilder(\"Got it. I\u0027ve added this task: \\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\taddedTaskMessage.append(\"\\t[\").append(firstAlphabet).append(\"] \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\taddedTaskMessage.append(taskDescription).append(\"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\taddedTaskMessage.append(\"Now you have \").append(numberOfItems).append(\" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn addedTaskMessage.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Generate message to print list of tasks in task list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String with list of tasks in task list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String getList(ArrayList\u003cString\u003e listToPrint) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tString output \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tboolean isListSizePositive \u003d listToPrint.size() \u003e 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (!isListSizePositive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\toutput \u003d \"There are currently no items in the list.\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (isListSizePositive) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tStringBuilder listOfTasksToPrint \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tfor (int i \u003d 0; i \u003c listToPrint.size(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t\tlistOfTasksToPrint.append(\"\\t\").append(i + 1).append(\".\").append(listToPrint.get(i)).append(\"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\toutput \u003d listOfTasksToPrint.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn output;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Generate message when task is deleted from task list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String with message with information of deleted task and number of tasks in list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String getDeletedTask(Task t, int taskCount) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tStringBuilder deletedTaskMessage \u003d new StringBuilder(\"Noted. I\u0027ve removed this task:\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tdeletedTaskMessage.append(\"\\t\").append(t.printTask()).append(\"\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tdeletedTaskMessage.append(\"Now you have \").append(taskCount).append(\" tasks in the list.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn deletedTaskMessage.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Generate message when task is set to done in task list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String with message with information of task set to done and number of tasks in list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String getDoneTask(Task t) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tStringBuilder doneTaskMessage \u003d new StringBuilder(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tdoneTaskMessage.append(\"\\t\").append(t.printTask());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn doneTaskMessage.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Generate message when task number input by user is invalid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String with message with information of incorrect task numbers."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String getIndexError() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn \"Invalid file or tasks. Please check again.\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Generate message to give matching task with given keyword."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String with message with information of found task and number of tasks in list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String getMatchingTaskList(ArrayList\u003cString\u003e listFound) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tif (listFound.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\treturn \"No matching result from your list.\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tStringBuilder matchingTaskResult \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tfor (int i \u003d 0; i \u003c listFound.size(); i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t\tmatchingTaskResult.append(\"\\t\").append(i + 1).append(\".\").append(listFound.get(i)).append(\"\\n\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn matchingTaskResult.toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Generate message when error in loading tasks from disk."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String with message showing error in loading file."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String getLoadingError() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn \"Error in Loading files\\n\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * Generate message when error in saving file to disk."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t * @return String with message of error saving file to disk."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String getSavingError() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn \"Error in saving to disk.\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic String getNoItemsInList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\treturn \"There are no items in list.\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 142
    }
  },
  {
    "path": "src/main/resources/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[E][0] project meeting /at 02/12/2019 1800"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[D][0] return book /by 02/12/2019 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[T][0] read book"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 3
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" style\u003d\"-fx-background-color: #000000;\" type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"370.0\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "               style\u003d\"-fx-background-color: darkSlateGrey; -fx-wrap-text: normal;\" textFill\u003d\"WHITE\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "               textOverrun\u003d\"WORD_ELLIPSIS\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                \u003cInsets top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"3.0\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 30
    }
  },
  {
    "path": "src/main/resources/view/HelpBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "         maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: #000000;\" type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        \u003cImageView fx:id\u003d\"helpPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        \u003cLabel fx:id\u003d\"help\" maxWidth\u003d\"370.0\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "               style\u003d\"-fx-background-color: darkSlateGrey;\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                \u003cInsets top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                \u003cInsets bottom\u003d\"3.0\" left\u003d\"5.0\" right\u003d\"3.0\" top\u003d\"3.0\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 30
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003cAnchorPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            prefHeight\u003d\"600.0\" style\u003d\"-fx-background-color: #A9A9A9;\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/11.0.1\" fx:controller\u003d\"duke.frontend.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"357.0\" layoutY\u003d\"534.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    prefHeight\u003d\"514.0\" prefWidth\u003d\"447.0\" style\u003d\"-fx-fit-to-height: true; -fx-fit-to-width: true;\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" style\u003d\"-fx-background-color: #000000;\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"10.0\" layoutY\u003d\"534.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                   prefWidth\u003d\"341.0\" promptText\u003d\"Say something\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 25
    }
  },
  {
    "path": "src/main/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.command.CommandNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic void parserTest_incorrectCommand_throwException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tassertThrows(CommandNotFoundException.class, () -\u003e Parser.parse(\"eijfioj\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 14
    }
  },
  {
    "path": "src/main/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tTaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\tpublic void taskList_indexOutofBound_throwException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t//Duke duke \u003d new Duke(\"C:\\\\Users\\\\user\\\\Desktop\\\\CS2103_Git\\\\duke\\\\data\\\\tasks.txt\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\t//duke.run();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t\tassertThrows(IndexOutOfBoundsException.class, () -\u003e list.deleteTask(10));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 16
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "deadline do homework /by no idea :-p"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 21
    }
  }
]
