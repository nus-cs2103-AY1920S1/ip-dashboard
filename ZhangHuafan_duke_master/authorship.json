[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.1.0\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.1.0\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 33,
      "-": 14
    }
  },
  {
    "path": "data.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "T|false|sleep more"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "D|true|kdjf|2018-03-21T12:33"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "D|false|kdjf|2018-03-21T12:22"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 3
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.geometry.VPos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final static int SPACE \u003d 20;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final static Color colorBlue \u003d Color.rgb(156, 202, 224);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final static Color colorGreen\u003d Color.rgb(202, 224, 156);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(SPACE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        setBackgroundColor(dialog, colorBlue);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        dialog.setFont(new Font(14));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        displayPicture.setClip(getImageClip());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        setBackgroundColor(dialog, colorGreen);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private void setBackgroundColor(Label label, Color color) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        label.setBackground(new Background(new BackgroundFill(color, CornerRadii.EMPTY, new Insets(-5,-5,-5,-5))));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    //@@author ZhangHuafan"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    //Reused from https://gist.github.com/jewelsea/7904493 with minor modifications"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Rectangle getImageClip() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Rectangle clip \u003d new Rectangle(displayPicture.getFitWidth(), displayPicture.getFitHeight());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        clip.setArcWidth(100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        clip.setArcHeight(100);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return clip;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 89
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is the driver class that utilises existing classes to receive and respond to the user\u0027s commands. It loads and"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * shows the task list from previous storage at the beginning. Util the user enters \"bye\", it responds to users\u0027 input"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * and modifies the current task list. It also informs user about invalid commands from input during the interaction."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * When the user enters \"bye\" command, it stores the current task list and terminates the process."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * This is a sole constructor specifying the file path to load data from and write data to. It initialises a"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * \u003ccode\u003eUi\u003c/code\u003e  to help with input and output, and a \u003ccode\u003eStorage\u003c/code\u003e object to loading and storing data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param filePath a string specifying the path of the file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            taskList \u003d new TaskList(storage.loadTasks());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (IOException | DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return ui.showWelcome();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Starts the whole interaction process with the user. At first, it loads and shows the task list from previous"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * storage. Util the user enters \"bye\" commands, it executes the user\u0027s every commands. It also informs user about"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * invalid commands from input during the interaction."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        setUp();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        boolean isExist \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        while (!isExist) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                Command c \u003d Parser.parseCommand(fullCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                c.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                isExist \u003d c.isExit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        ui.showGoodbye();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return c.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 70,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Duke duke \u003d new Duke(System.getProperty(\"user.dir\") + \"/data.txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.Group;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is class that represents controller for MainWindow."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * It provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        dialogContainer.setPadding(new Insets(10, 10, 10, 10));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                DialogBox.getDukeDialog(duke.setUp(), dukeImage)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    //@@author ZhangHuafan"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    //Reused from https://github.com/jyx11011/duke/blob/master/src/main/java/duke/ui/MainWindow.java"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        userInput.setDisable(true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        PauseTransition delay \u003d new PauseTransition(Duration.seconds(2));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        delay.play();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 75
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Command is the abstract base class for all executable commands. A Command object encapsulates the information about"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * whether a command should be treated as a termination of user input. Besides, the abstract method \u003ccode\u003eexecute\u003c/code\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * needs to be specified about what actions to take according to certain commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Executes some actions to process the task list, show users information, and / or save data according to specified"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param taskList        the task list that provides information about users\u0027 current tasks and to be modified"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param ui              the \u003ccode\u003eUi\u003c/code\u003e object to handle input and output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param storage         the \u003ccode\u003eStorage\u003c/code\u003e object to load and record data"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return                a string telling the executing result"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws DukeException  If a certain execution fails"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    abstract public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Compares two commands based on their types."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param obj the object to be compared"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return    \u003ccode\u003etrue\u003c/code\u003e if two commands are of the same type;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *            \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return obj.getClass().equals(this.getClass());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 48
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class DeadlineCommand extends Command{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private LocalDateTime dueDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DeadlineCommand(String description, LocalDateTime dueDateTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.dueDateTime \u003d dueDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Adds a \u003ccode\u003eDeadline\u003c/code\u003e task to the task list and shows a successful-adding message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param taskList {@inheritDoc}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param ui       {@inheritDoc}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param storage  {@inheritDoc}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return         a string telling \u003ccode\u003eDeadline\u003c/code\u003e task is added"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Task newTask \u003d new Deadline(description, dueDateTime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (taskList.contains(newTask)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return ui.showTaskDuplicated();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            storage.recordTasks(taskList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return ui.showSavingError();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return ui.showTaskAdded(taskList.getTotalTask(), newTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Compares two \u003ccode\u003eDeadlineCommand\u003c/code\u003e objects according to their description, dateTime."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * The comparison is mainly used for JUnit tests."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param obj the object to be compared"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return    \u003ccode\u003etrue\u003c/code\u003e if two objects are both \u003ccode\u003eDeadlineCommand\u003c\u003e\u003c/code\u003e, and have"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *            the same description and dateTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *            \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author ZhangHuafan-reused"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        //Reused from https://www.javaworld.com/article/3305792/comparing-java-objects-with-equals-and-hashcode.html"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (obj \u003d\u003d null || this.getClass() !\u003d obj.getClass()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        DeadlineCommand another \u003d (DeadlineCommand) obj;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        boolean isSameDescription \u003d this.description.equals(another.description);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        boolean isSameDueDateTime \u003d this.dueDateTime.equals(another.dueDateTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return  isSameDescription \u0026\u0026 isSameDueDateTime;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 68,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a \u003ccode\u003eCommand\u003c/code\u003e to delete one task from the task list. After the \u003ccode\u003eexecute\u003c/code\u003e, The target"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * task, specified by the ordering number, will be deleted."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * This is a class constructor specifying the target number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param taskNumber the order shown in the task list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Deletes a certain \u003ccode\u003eTask\u003c/code\u003e object from the task list and shows users the successful execution of"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * deleting. If the specified task number is out of the available range, a \u003ccode\u003eDukeException\u003c/code\u003e will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * thrown."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param taskList        {@inheritDoc}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param ui              {@inheritDoc}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param storage         {@inheritDoc}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return                a string showing the specified task is deleted from the task list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws DukeException  If the specified task number does not existed in the current list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (taskNumber \u003c 0 || taskNumber \u003e\u003d taskList.getTotalTask()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new DukeException(\"The task number is invalid!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Task removedTask \u003d taskList.removeTaskAt(taskNumber);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            storage.recordTasks(taskList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return ui.showSavingError();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return ui.showTaskDeleted(taskList.getTotalTask(), removedTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Compares two \u003ccode\u003eDeleteCommand\u003c/code\u003e objects according to their targets."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param obj the object to be compared"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if two objects are both \u003ccode\u003eDeleteCommand\u003c\u003e\u003c/code\u003e and have the same task number;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (obj instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            DeleteCommand another \u003d (DeleteCommand) obj;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return this.taskNumber \u003d\u003d another.taskNumber;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 69
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a \u003ccode\u003eCommand\u003c/code\u003e to mark one task done. After the \u003ccode\u003eexecute\u003c/code\u003e, The status, \u003ccode\u003eisDone\u003c/code\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * of the target task, specified by the ordering number, will be changed to \u003ccode\u003etrue\u003c/code\u003e."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * This is a class constructor specifying the target number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param taskNumber the order shown in the task list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Marks a certain \u003ccode\u003eTask\u003c/code\u003e object as done and shows users the successful execution of marking done. If the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * specified task number is out of the available range, a \u003ccode\u003eDukeException\u003c/code\u003e will be thrown."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param taskList        {@inheritDoc}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param ui              {@inheritDoc}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param storage         {@inheritDoc}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return                a string showing the specified task is marked done"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws DukeException  If the specified task number does not existed in the current list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (taskNumber \u003c 0 || taskNumber \u003e\u003d taskList.getTotalTask()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new DukeException(\"The task number is invalid!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Task doneTask \u003d taskList.getTaskAt(taskNumber);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        doneTask.markDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            storage.recordTasks(taskList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return ui.showSavingError();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return ui.showTaskDone(doneTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Compares two \u003ccode\u003eDoneCommand\u003c/code\u003e objects according to their targets."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param obj the object to be compared"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if two objects are both \u003ccode\u003eDoneCommand\u003c\u003e\u003c/code\u003e and have the same task number;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (obj instanceof DoneCommand) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            DoneCommand another \u003d (DoneCommand) obj;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return this.taskNumber \u003d\u003d another.taskNumber;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 69
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class EventCommand extends Command{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public EventCommand(String description, LocalDateTime startDateTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Adds a \u003ccode\u003eEvent\u003c/code\u003e task to the task list and shows a successful-adding message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param taskList {@inheritDoc}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param ui       {@inheritDoc}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param storage  {@inheritDoc}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return         a string telling a \u003ccode\u003eEvent\u003c/code\u003e task is added"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Task newTask \u003d new Event(description, startDateTime, endTime);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (taskList.contains(newTask)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return ui.showTaskDuplicated();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            storage.recordTasks(taskList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return ui.showSavingError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return ui.showTaskAdded(taskList.getTotalTask(), newTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Compares two \u003ccode\u003eEventCommand\u003c/code\u003e objects according to their description, start date time,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * and end time. The comparison is mainly used for JUnit tests."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param obj the object to be compared"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return    \u003ccode\u003etrue\u003c/code\u003e if two objects are both \u003ccode\u003eDeadlineCommand\u003c\u003e\u003c/code\u003e, and have"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *            the same description, start date and time, and end time;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *            \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author ZhangHuafan-reused"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        //Reused from https://www.javaworld.com/article/3305792/comparing-java-objects-with-equals-and-hashcode.html"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (obj \u003d\u003d null || this.getClass() !\u003d obj.getClass()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        EventCommand another \u003d (EventCommand) obj;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        boolean isSameDescription \u003d this.description.equals(another.description);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        boolean isSameStartDateTime \u003d this.startDateTime.equals(another.startDateTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        boolean isSameEndTime \u003d this.endTime.equals(another.endTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return  isSameDescription \u0026\u0026 isSameStartDateTime \u0026\u0026 isSameEndTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 72,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a \u003ccode\u003eCommand\u003c/code\u003e to indicate a termination of user input. This changes the status of"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * \u003ccode\u003eisExit\u003c/code\u003e status to be \u003ccode\u003etrue\u003c/code\u003e, while for all other commands, the status is set to be"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * \u003ccode\u003efalse\u003c/code\u003e."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * This is a class constructor to set \u003ccode\u003eisExit\u003c/code\u003e to be \u003ccode\u003etrue\u003c/code\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Terminates the user input by changing \u003ccode\u003eisExist\u003c/code\u003e, the condition for loops, to be \u003ccode\u003etrue\u003c/code\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Besides, it also save the whole list to hard disk for future use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param taskList        {@inheritDoc}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param ui              {@inheritDoc}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param storage         {@inheritDoc}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return                a string saying bye to the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            storage.recordTasks(taskList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return ui.showSavingError();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return ui.showGoodbye();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 42
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a \u003ccode\u003eCommand\u003c/code\u003e to list all related tasks by a searching key word."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    String keyWord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * This is a class constructor specifying a searching keywrod."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param keyWord a string to be searched among all tasks\u0027 descriptions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FindCommand(String keyWord) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.keyWord \u003d keyWord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Lists all the tasks if their descriptions contain the searching keyword. If there is no matching task, a message"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * will tell the user there is no task to show."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param taskList        {@inheritDoc}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param ui              {@inheritDoc}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param storage         {@inheritDoc}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return                a string showing all tasks in the task list filtered by \u003ccode\u003ekeyword\u003c/code\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        TaskList resultList \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getTotalTask(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            Task task \u003d taskList.getTaskAt(i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            if (task.getDescription().contains(keyWord)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                resultList.add(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return ui.showFullList(resultList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 47
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a \u003ccode\u003eCommand\u003c/code\u003e to list all tasks in the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Lists all tasks in the task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param taskList        {@inheritDoc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param ui              {@inheritDoc}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param storage         {@inheritDoc}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return                a string showing all tasks in the task list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return ui.showFullList(taskList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 24
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class TodoCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public TodoCommand(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Adds a \u003ccode\u003eTodo\u003c/code\u003e task to the task list and shows a successful-adding message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param taskList {@inheritDoc}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param ui       {@inheritDoc}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param storage  {@inheritDoc}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return         a string telling a \u003ccode\u003eTodo\u003c/code\u003e task is added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Task newTask \u003d new Todo(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (taskList.contains(newTask)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return ui.showTaskDuplicated();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            storage.recordTasks(taskList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return ui.showSavingError();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return ui.showTaskAdded(taskList.getTotalTask(), newTask);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Compares two \u003ccode\u003eTodoCommand\u003c/code\u003e objects according to their description."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * The comparison is mainly used for JUnit tests."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param obj  the object to be compared"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return     \u003ccode\u003etrue\u003c/code\u003e if two objects are both \u003ccode\u003eTodoCommand\u003c\u003e\u003c/code\u003e and have the same description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *             \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author ZhangHuafan-reused"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        //Reused from https://www.javaworld.com/article/3305792/comparing-java-objects-with-equals-and-hashcode.html"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (obj \u003d\u003d null || this.getClass() !\u003d obj.getClass()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        TodoCommand another \u003d (TodoCommand) obj;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this.description.equals(another.description);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 63,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is one kind of \u003ccode\u003eTask\u003c/code\u003e that specifies the description and due date for the item in the task list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private LocalDateTime dueDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * {@inheritDoc} This is a class constructor specifying the description and the due dateTime. The"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * \u003ccode\u003eisDone\u003c/code\u003e status is set to be \u003ccode\u003efalse\u003c/code\u003e by default."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param dueDateTime a \u003ccode\u003eLocalDateTime\u003c/code\u003e object to specify the due date and time"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Deadline(String description, LocalDateTime dueDateTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.dueDateTime \u003d dueDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * {@inheritDoc} This is a class constructor specifying the description, the due dateTime ane the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * \u003ccode\u003eisDone\u003c/code\u003e status."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param dueDateTime a \u003ccode\u003eLocalDateTime\u003c/code\u003e object to specify the due date and time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Deadline(String description, LocalDateTime dueDateTime, boolean isDone) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.dueDateTime \u003d dueDateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public LocalDateTime getDueDateTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return dueDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return a string representing this todo in the format of a tag \"[D]\" at the start, followed by the description"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * and the due date time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + DATE_TIME_FORMATTER.format(dueDateTime) + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Compares two \u003ccode\u003eTask\u003c/code\u003e objects by their descriptions and \u003ccode\u003eisDone\u003c/code\u003e status."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * The comparison is mainly used for JUnit tests."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param obj  the object to be compared"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return     \u003ccode\u003etrue\u003c/code\u003e if the specifications for two tasks are all the same;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *             \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author ZhangHuafan-reused"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        //Reused from https://www.javaworld.com/article/3305792/comparing-java-objects-with-equals-and-hashcode.html"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (obj \u003d\u003d null || this.getClass() !\u003d obj.getClass()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Deadline another \u003d (Deadline) obj;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        boolean isSameDescription \u003d this.description.equals(another.description);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        boolean isSameStatus \u003d this.isDone \u003d\u003d another.isDone;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        boolean isSameDueDateTime \u003d this.dueDateTime.equals(another.dueDateTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return isSameDescription \u0026\u0026 isSameStatus \u0026\u0026 isSameDueDateTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 72,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is one kind of \u003ccode\u003eTask\u003c/code\u003e that specifies the description and the duration for the item in the task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * {@inheritDoc} This is a class constructor specifying the description, start time and end time for the task. The"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * \u003ccode\u003eisDone\u003c/code\u003e status is set to be \u003ccode\u003efalse\u003c/code\u003e by default."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *F"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param startDateTime a \u003ccode\u003eLocalDateTime\u003c/code\u003e object to specify the start date and time of this event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param endTime       a \u003ccode\u003eLocalTime\u003c/code\u003e object to specify the end time of this event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Event(String description, LocalDateTime startDateTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * {@inheritDoc} This is a class constructor specifying the description, start time, end time, and"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * \u003ccode\u003eisDone\u003c/code\u003e status of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param startDateTime a \u003ccode\u003eLocalDateTime\u003c/code\u003e object to specify the start date and time of this event"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param endTime       a \u003ccode\u003eLocalTime\u003c/code\u003e object to specify the end time of this event"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Event(String description, LocalDateTime startDateTime, LocalTime endTime, boolean isDone) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public LocalDateTime getStartDateTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return a string representing this todo in the format of a tag \"[E]\" at the start, followed by the description,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * the start date time, and the end time."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + DATE_TIME_FORMATTER.format(startDateTime) + \" - \" + endTime + \")\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Compares two \u003ccode\u003eTask\u003c/code\u003e objects by their descriptions and \u003ccode\u003eisDone\u003c/code\u003e status."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * The comparison is mainly used for JUnit tests."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param obj  the object to be compared"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return     \u003ccode\u003etrue\u003c/code\u003e if the specifications for two tasks are all the same;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *             \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author ZhangHuafan-reused"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        //Reused from https://www.javaworld.com/article/3305792/comparing-java-objects-with-equals-and-hashcode.html"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (obj \u003d\u003d null || this.getClass() !\u003d obj.getClass()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Event another \u003d (Event) obj;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        boolean isSameDescription \u003d this.description.equals(another.description);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        boolean isSameStatus \u003d this.isDone \u003d\u003d another.isDone;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        boolean isSameStartDateTime \u003d this.startDateTime.equals(another.startDateTime);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        boolean isSameEndTime \u003d this.endTime.equals(another.endTime);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return isSameDescription \u0026\u0026 isSameStatus \u0026\u0026 isSameStartDateTime \u0026\u0026 isSameEndTime;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 83,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Task is the base base class for all tasks. Basically, a Task object encapsulates the information about"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * the description and status (done or not)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    static final protected DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MMM-yyyy, HH:mm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * This is a class constructor specifying the description for a task. The \u003ccode\u003eisDone\u003c/code\u003e status is set to be"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * \u003ccode\u003efalse\u003c/code\u003e."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param description a string containing the detail for this task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    Task(String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * This is a class constructor specifying the description for a task and whether the task is done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param description a string containing the detail for this task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param isDone      a boolean indicating whether this task is done"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Creates a specific \u003ccode\u003eTask\u003c/code\u003e object from a string, which contains the information about a task stored in"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * the hard disk. Task types can be \u003ccode\u003eTodo\u003c/code\u003e, \u003ccode\u003eDeadline\u003c/code\u003e, and \u003ccode\u003eEvent\u003c/code\u003e, indicated by"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * the first letter of the stored string value."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param taskInfo a string in a certain format that stores information about a task in the hard disk"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return a specific \u003ccode\u003eTask\u003c/code\u003e object, namely, \u003ccode\u003eTodo\u003c/code\u003e, \u003ccode\u003eDeadline\u003c/code\u003e, or"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * \u003ccode\u003eEvent\u003c/code\u003e,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    static public Task from(String taskInfo) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String[] taskInfos \u003d taskInfo.split(\"\\\\|\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        switch (taskInfos[0]) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assert taskInfos.length \u003d\u003d 3;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return new Todo(taskInfos[2], Boolean.parseBoolean(taskInfos[1]));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assert taskInfos.length \u003d\u003d 4;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return new Deadline(taskInfos[2], LocalDateTime.parse(taskInfos[3]), Boolean.parseBoolean(taskInfos[1]));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assert taskInfos.length \u003d\u003d 4;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return new Event(taskInfos[2], LocalDateTime.parse(taskInfos[3]), LocalTime.parse(taskInfos[4]),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                    Boolean.parseBoolean(taskInfos[1]));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new DukeException(\"Oh! Storage is corrupted!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns a string representation of a task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return a string representation of a task"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 94
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a one kind of \u003ccode\u003eTask\u003c/code\u003e that specifies the description for the item in the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return a string representing this todo in the format of a tag \"[T]\" at the start, followed by the description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Compares two \u003ccode\u003eTask\u003c/code\u003e objects by their descriptions and \u003ccode\u003eisDone\u003c/code\u003e status."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * The comparison is mainly used for JUnit tests."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param obj  the object to be compared"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return     \u003ccode\u003etrue\u003c/code\u003e if the specifications for two tasks are all the same;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *             \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author ZhangHuafan-reused"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        //Reused from https://www.javaworld.com/article/3305792/comparing-java-objects-with-equals-and-hashcode.html"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (obj \u003d\u003d null || this.getClass() !\u003d obj.getClass()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Todo another \u003d (Todo) obj;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        boolean isSameDescription \u003d this.description.equals(another.description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        boolean isSameStatus \u003d this.isDone \u003d\u003d another.isDone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return isSameDescription \u0026\u0026 isSameStatus;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 54,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/util/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a customised Exception that belongs to the Duke project."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 12
    }
  },
  {
    "path": "src/main/java/duke/util/ObjectsForTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a class that holds static strings and \u003ccode\u003eTask\u003c/code\u003e objects for testing purpose."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class ObjectsForTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String todoTaskInfo \u003d \"T|false|Sleep early\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String deadlineTaskInfo \u003d \"D|false|Sleep|2020-05-31T11:00\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String eventTaskInfo \u003d \"E|false|Sleep|2020-05-31T11:00|23:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String todoCommand \u003d \"todo Sleep early\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String deadlineCommand \u003d \"deadline Sleep /by 31/5/2020 11:00\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String eventCommand \u003d \"event Sleep /at 31/5/2020 11:00-23:00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String timeDateStr \u003d \"31/5/2020 11:00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String timeSTr \u003d \"23:00\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String filePath \u003d \"/Users/xiaoyu/duke/data/dukeTest.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Todo todo \u003d new Todo(\"Sleep early\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Deadline deadline \u003d new Deadline(\"Sleep\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            Parser.parseDateTime(\"31/5/2020 11:00\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Event event \u003d new Event(\"Sleep\", Parser.parseDateTime(\"31/5/2020 11:00\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            LocalTime.parse(\"23:00\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Task[] tasks \u003d {todo, deadline, event};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 33
    }
  },
  {
    "path": "src/main/java/duke/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a class that parsers user\u0027s commands(strings) to \u003ccode\u003eLocalDateTime\u003c/code\u003e objects and executable"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * \u003ccode\u003eCommand\u003c/code\u003e objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HH:mm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses a given string in a certain format to a \u003ccode\u003eLocalDateTime\u003c/code\u003e object. The string must be in the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * format of \"day/month/year hh:mm\" to be possibly parsed, for example: \"31/05/2000 15:00\"."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param info a string to be parsed into a \u003ccode\u003eLocalDateTime\u003c/code\u003e object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return a \u003ccode\u003eLocalDateTime\u003c/code\u003e object corresponds to the  date time information"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws DateTimeParseException If the entered string is not in the format of \"day/month/year hh:mm\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static LocalDateTime parseDateTime(String info) throws DateTimeParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return LocalDateTime.parse(info, formatter);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses the user\u0027s commands, which are plain strings, to \u003ccode\u003eCommand\u003c/code\u003e objects. White spaces are allowed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * for between and around commands and following details. They are generally ignores but will be included in the"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * description for \u003ccode\u003eTask\u003c/code\u003e objects. Except \u003ccode\u003eListCommand\u003c/code\u003e and"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * \u003ccode\u003eExitCommand\u003c/code\u003e, other commands require addition details. For \u003ccode\u003eDoneCommand\u003c/code\u003e and"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * \u003ccode\u003eDeleteCommand\u003c/code\u003e, a number about the target task should be specified. For \u003ccode\u003eAddCommand\u003c/code\u003e,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * depends on the type of the task, additional information should be provided in a certain format: (1) In order to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * add \u003ccode\u003eTodo\u003c/code\u003e task, description part is needed; (2) In order to add \u003ccode\u003eDeadline\u003c/code\u003e task,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * description and due date time are needed, and these two parts are separated by \"/by\"; (3) In order to add"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * \u003ccode\u003eEvent\u003c/code\u003e task, description and duration are needed, and these two parts are separated by \"/at\"."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param info a string containing the type of \u003ccode\u003eCommand\u003c/code\u003e and additional details"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return a \u003ccode\u003eCommand\u003c/code\u003e object that obtains necessary details to execute"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws DukeException If the given string cannot fit in existing commands, or lacks necessary details, or"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *                       provides date and time in invalid format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static Command parseCommand(String info) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String[] infos \u003d info.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String primaryCommand \u003d infos[0];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        switch (primaryCommand) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            if (infos.length \u003c 2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! No enough information entered\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                int order \u003d Integer.valueOf(infos[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                return new DoneCommand(order - 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The task number is not a number!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            if (infos.length \u003c 2) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! No enough information entered\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                int order \u003d Integer.valueOf(infos[1]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                return new DeleteCommand(order - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The task number is not a number!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            if (infos.length \u003c 2) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! No enough information entered\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return new TodoCommand(infos[1]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            if (infos.length \u003c 2) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! No enough information entered\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            if (!infos[1].contains(\" /by \")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The description of a deadline is not enough.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                String[] details \u003d infos[1].split(\" /by \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                LocalDateTime due \u003d Parser.parseDateTime(details[1]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                return new DeadlineCommand(details[0], due);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                throw new DukeException(\"The deadline is in invalid format\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            if (infos.length \u003c 2) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! No enough information entered\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            if (!infos[1].contains(\" /at \")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The description of a event is not enough.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                String[] details \u003d infos[1].split(\" /at \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                String[] times \u003d details[1].split(\"-\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                LocalDateTime startDateTime \u003d Parser.parseDateTime(times[0]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                LocalTime time \u003d LocalTime.parse(times[1]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                return new EventCommand(details[0], startDateTime, time);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                throw new DukeException(\"The duration is in invalid format\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return new FindCommand(infos[1]);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 122
    }
  },
  {
    "path": "src/main/java/duke/util/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a class that loads and stores users\u0027 \u003ccode\u003eTaskList\u003c/code\u003e from and to the specified file path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * This is a sole constructor specifying the file path to load data from and write data to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param filePath a string specifying the path of the file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Loads tasks from the \u003ccode\u003efile\u003c/code\u003e. A new \u003ccode\u003eTask\u003c/code\u003e object is created from each line in the file and"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * added to the task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return a \u003ccode\u003eTaskList\u003c/code\u003e object containing all tasks loaded from the hard disk storage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws FileNotFoundException If the \u003ccode\u003eScanner\u003c/code\u003e cannot find the file to read information from"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public List\u003cTask\u003e loadTasks() throws DukeException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            taskList.add(Task.from(scanner.nextLine()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Writes every tasks in the current task list to the hard disk in the form of strings. Specific tasks,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * \u003ccode\u003eTodo\u003c/code\u003e, \u003ccode\u003eDeadline\u003c/code\u003e, or \u003ccode\u003eEvent\u003c/code\u003e will be distinguished by a starting letter: T, D,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * or E, in order to load the same-type task back from storage."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param taskList a \u003ccode\u003eTaskList\u003c/code\u003e object of which the information about tasks will be recorded to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *                 \u003ccode\u003efile\u003c/code\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws IOException If an input or output exception occurred"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void recordTasks(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getTotalTask(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            Task task \u003d taskList.getTaskAt(i);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            if (task instanceof Todo) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                content \u003d \"T|\" + task.getStatus() + \"|\" + task.getDescription();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                Deadline dl \u003d (Deadline) task;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                content \u003d \"D|\" + task.getStatus() + \"|\" + dl.getDescription() + \"|\" + dl.getDueDateTime();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                Event e \u003d (Event) task;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                content \u003d \"E|\" + e.getStatus() + \"|\" + e.getDescription() + \"|\" + e.getStartDateTime() + \"|\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                        + e.getEndTime();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            writer.append(content + \"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 78
    }
  },
  {
    "path": "src/main/java/duke/util/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a TaskList class that encapsulates all user\u0027s tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public int getTotalTask() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Task getTaskAt(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Task removeTaskAt(int index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return tasks.remove(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean contains(Task task) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            if (t.equals(task)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Compares two task list by sequentially comparing each task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param obj a \u003ccode\u003eTaskList\u003c/code\u003e object to be compared"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if this task list has same tasks in the same order as another task list;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (obj instanceof TaskList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            TaskList another \u003d (TaskList) obj;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            if (another.getTotalTask() !\u003d this.getTotalTask()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                for (int i \u003d 0; i \u003c this.getTotalTask(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                    if (!this.getTaskAt(i).equals(another.getTaskAt(i))) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 73
    }
  },
  {
    "path": "src/main/java/duke/util/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This class handles the interactions with users. Two main features are (1) reading users\u0027 inputs from the console; (2)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * showing users the results responding to their commands. Many strings are pre-defined in certain formats. Pre-defined"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * string messages are \u003ccode\u003eshowWelcome\u003c/code\u003e,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * \u003ccode\u003eshowGoodbye\u003c/code\u003e, \u003ccode\u003eshowSavingError\u003c/code\u003e, \u003ccode\u003eshowLoadingError\u003c/code\u003e, \u003ccode\u003eshowNoTask\u003c/code\u003e. The"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * rest needs to take in some parameter(s) to show according responses."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String INDENTATION \u003d \"     \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String SEPARATOR \u003d \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String WELCOME_Msg \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String ENDING_Msg \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String SAVING_ERROR_Msg \u003d \"☹ OOPS!!! We cannot save your data!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String LOADING_ERROR_Msg \u003d \"☹ OOPS!!! We cannot load your data!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String NO_TASK_Msg \u003d \"kkk ~ There is no task in your todo list now!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * This is a sole constructor initialising its \u003ccode\u003eScanner\u003c/code\u003e to read from console."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private String getFormattedStr(String str) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return SEPARATOR + INDENTATION + str.replace(\"\\n\", \"\\n\" + INDENTATION)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                + \"\\n\" + SEPARATOR;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        System.out.println(getFormattedStr(WELCOME_Msg));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return WELCOME_Msg;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String showGoodbye() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        System.out.println(getFormattedStr(ENDING_Msg));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return ENDING_Msg;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String showSavingError() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        System.out.println(getFormattedStr(SAVING_ERROR_Msg));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return SAVING_ERROR_Msg;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        System.out.println(getFormattedStr(LOADING_ERROR_Msg));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return LOADING_ERROR_Msg;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String showError(String errorMsg) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        System.out.println(getFormattedStr(errorMsg));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return errorMsg;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String showNoTask() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        System.out.println(getFormattedStr(NO_TASK_Msg));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return NO_TASK_Msg;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String showTaskAdded(int total, Task newTask) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String msg \u003d \"Got it. I\u0027ve added this task:\\n\" + \"  \" + newTask"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                + \"\\nNow you have \" + total + \" tasks in the list.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        System.out.println(getFormattedStr(msg));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String showTaskDeleted(int total, Task removedTask) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String msg \u003d \"Noted. I\u0027ve removed this task: \\n\" + \"  \" + removedTask"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                + \"\\nNow you have \" + total + \" tasks in the list.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        System.out.println(getFormattedStr(msg));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String showTaskDone(Task doneTask) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String msg \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + \"  \" + doneTask;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        System.out.println(getFormattedStr(msg));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String showTaskDuplicated() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String msg \u003d \"A same task already exists!!! Do not bother yourself to do it twice\u003d)\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        System.out.println(getFormattedStr(msg));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String showFullList(TaskList taskList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (taskList.getTotalTask() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return showNoTask();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            String formattedList \u003d \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            String header \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d taskList.getTotalTask(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                formattedList \u003d formattedList + INDENTATION + i + \". \" + taskList.getTaskAt(i - 1) + \"\\n\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            System.out.println(SEPARATOR + INDENTATION + header + formattedList + SEPARATOR);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return header + formattedList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 110
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" prefWidth\u003d\"480.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" minHeight\u003d\"0.0\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 17
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"480.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"43.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0\" AnchorPane.rightAnchor\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"383.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"43.0\" prefWidth\u003d\"98.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1\" AnchorPane.rightAnchor\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" prefHeight\u003d\"560.0\" prefWidth\u003d\"540.0\" vvalue\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0\" AnchorPane.rightAnchor\u003d\"0\" AnchorPane.bottomAnchor\u003d\"45\" AnchorPane.topAnchor\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static duke.util.ObjectsForTest.todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static duke.util.ObjectsForTest.deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static duke.util.ObjectsForTest.event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static duke.util.ObjectsForTest.filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String input \u003d \"todo Sleep early\\ndeadline Sleep /by 31/5/2020 11:00\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"event Sleep /at 31/5/2020 11:00-23:00\\n\" + \"list\\ndone 1\\ndelete 2\\nlist\\nbye\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final InputStream in \u003d new ByteArrayInputStream(input.getBytes());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final InputStream originIn \u003d System.in;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static TaskList list;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static void setUp() throws Exception{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        list \u003d new TaskList(new Storage(filePath).loadTasks());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        list.add(todo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        list.add(deadline);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        list.add(event);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        list.getTaskAt(0).markDone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        list.removeTaskAt(1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static void restoreStream() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        System.setIn(originIn);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void run_addNormalInput(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Duke duke \u003d new Duke(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertEquals(list, duke.getTaskList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 49
    }
  },
  {
    "path": "src/test/java/command/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static duke.util.ObjectsForTest.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final PrintStream originOut \u003d System.out;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static void restoreStream() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        System.setOut(originOut);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void execute_normal() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            ByteArrayOutputStream out1 \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            ByteArrayOutputStream out2 \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            TaskList fullList \u003d new TaskList(Arrays.asList(tasks));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            TaskList resultList \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            resultList.add(todo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            System.setOut(new PrintStream(out1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            new FindCommand(\"early\").execute(fullList, ui, new Storage(filePath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            String actualResult \u003d out1.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            System.setOut(new PrintStream(out2));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            ui.showFullList(resultList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            String expectedResult \u003d out2.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assertEquals(expectedResult, actualResult);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void execute_emptyList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        ByteArrayOutputStream out1 \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        ByteArrayOutputStream out2 \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        TaskList fullList \u003d new TaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        TaskList resultList \u003d new TaskList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        System.setOut(new PrintStream(out1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FindCommand(\"early\").execute(fullList, ui, new Storage(filePath));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String actualResult \u003d out1.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        System.setOut(new PrintStream(out2));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        ui.showFullList(resultList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String expectedResult \u003d out2.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertEquals(expectedResult, actualResult);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 68
    }
  },
  {
    "path": "src/test/java/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static duke.util.ObjectsForTest.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void from_todoTaskStr() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertEquals(todo, Task.from(todoTaskInfo));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void from_deadlineTaskStr() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertEquals(deadline, Task.from(deadlineTaskInfo));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void from_eventTaskStr() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertEquals(event, Task.from(eventTaskInfo));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 25
    }
  },
  {
    "path": "src/test/java/util/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import org.junit.jupiter.params.provider.ValueSource;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static duke.util.ObjectsForTest.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void parseDateTime_normal() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertEquals(LocalDateTime.parse(\"2019-05-31T12:22\"), Parser.parseDateTime(\"31/05/2019 12:22\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertEquals(LocalDateTime.parse(\"2019-05-31T12:22\"), Parser.parseDateTime(\"31/5/2019 12:22\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void parseCommand_list() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assertEquals(new ListCommand().getClass(), Parser.parseCommand(\"list\").getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assertEquals(new ListCommand().getClass(), Parser.parseCommand(\"   list   \").getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void parseCommand_bye() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assertEquals(new ExitCommand().getClass(), Parser.parseCommand(\"bye\").getClass());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assertEquals(new ExitCommand().getClass(), Parser.parseCommand(\"   bye   \").getClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void parseCommand_done() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assertEquals(new DoneCommand(0), Parser.parseCommand(\"done 1\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assertEquals(new DoneCommand(0), Parser.parseCommand(\"   done   1\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void parseCommand_delete() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assertEquals(new DeleteCommand(0), Parser.parseCommand(\"delete 1\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assertEquals(new DeleteCommand(0), Parser.parseCommand(\"   delete   1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void parseCommand_add() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assertEquals(new AddCommand(\"todo\", \"Sleep early\"), Parser.parseCommand(todoCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assertEquals(new AddCommand(\"deadline\", \"Sleep\", Parser.parseDateTime(timeDateStr)),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                    Parser.parseCommand(deadlineCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assertEquals(new AddCommand(\"event\", \"Sleep\", Parser.parseDateTime(timeDateStr),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                    LocalTime.parse(timeSTr)), Parser.parseCommand(eventCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @ValueSource(strings \u003d {\"hehe\", \"todo  \", \"deadline hehe\", \"deadline /by\", \"deadline /by 02/21/1999\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            \"event /by 02/21/1999\", \"event /at\", \"event /at 02/21/1999 18:00\"})"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void parseCommand_invalidCommand_throwDukeException(String invalidCommand) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseCommand(invalidCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 83
    }
  },
  {
    "path": "src/test/java/util/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static duke.util.ObjectsForTest.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private TaskList list1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private TaskList list2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void testEquals_sameContent_equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        list1 \u003d new TaskList(Arrays.asList(tasks));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        list2 \u003d new TaskList(Arrays.asList(tasks));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertEquals(list1, list2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void testEquals_differentLength_notEquals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        list1 \u003d new TaskList(Arrays.asList(tasks));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        list2 \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        list2.add(todo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        list2.add(deadline);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertNotEquals(list1, list2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void testEquals_differentContent_notEquals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        list1 \u003d new TaskList(Arrays.asList(tasks));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        list2 \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        list2.add(todo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        list2.add(event);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        list2.add(deadline);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 41
    }
  }
]
