[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 28,
      "-": 19
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "T | ✓ | read books"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "E | ✘ | new year | Wed, 1 Jan 2020, 12:00AM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "D | ✘ | project submission | Thu, 19 Sep 2019, 11:59PM"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 3
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "# User Guide - Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "### Add tasks to track them"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "You can let Duke keep track of your tasks by providing the _description_ and _time_ (if applicable)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Duke supports three types of tasks:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* _Normal Task_: A task to be done, without a specific time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* _Deadline_: A task that is due by a specific time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* _Event_: An event that will occur at a specific time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "### Update an existing task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "You can update the _description_ or _time_ (if applicable) of an existing task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "### Mark a task as done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "You can mark an existing task in the list as done. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "### Display all the tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "You can let Duke display all current tasks stored in the list, regardless of the status of completion,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "in the order of their creation. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "### Search by keyword (or phrase)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "You can find a task by searching a keyword (or phrase) in the current task list, and get all matching results "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "(i.e. tasks that contain the keyword or phrase) displayed in order of their appearance in the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "### Delete an existing task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "If you no longer wants a task to be tracked, you can delete it from the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "### Save current tasks in a local file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "After every single modification to your task list, your latest tasks are automatically"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "saved in a local file on your hard drive, presented in an easily understandable format. "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "### Load past tasks upon launch"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Every time Duke is launched, it automatically loads your past tasks from the local file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "If loading fails, it creates a new task list to be stored in the same location."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "### Exit the app"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "You can exit Duke by typing a single word _\"bye\"_, and the app will be automatically terminated."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "### `todo` - add a normal task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "To add a normal task, type `todo` followed by the _description_ of the task, and it will be recorded by Duke. "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "By default, every newly added task is marked as undone."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`todo read books`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   [T][✘] read books"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " Now you have 1 task(s) in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "### `deadline` - add a task with a deadline"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "To add a task with a specific deadline, type `deadline` followed by: (i) the _description_ of the task, "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "(ii) `/by`, (iii) the _due time_, in `d/MM.yyyy HHmm` format. It will be recorded by Duke. "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "By default, every newly added task is marked as undone."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`deadline project submission /by 2/10/2019 2359`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   [D][✘] project submission (by: Wed, 2 Oct 2019, 11:59PM)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " Now you have 2 task(s) in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "### `event` - add an event with a time of occurrence"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "To add an event with a specific time of occurrence, type `event` followed by: (i) the _description_ of the event, "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "(ii) `/at`, (iii) the _time of occurrence_, in `d/MM.yyyy HHmm` format. It will be recorded by Duke. "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "By default, every newly added task is marked as undone."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`event team meeting /at 18/09/2019 1600`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   [E][✘] team meeting (at: Wed, 18 Sep 2019, 4:00PM)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " Now you have 3 task(s) in the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "### `update` - update an existing task"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "To update an existing task, type `update` followed by: (i) the task index, "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "(ii) the attribute which you want to update, i.e. `description` or `time` (if applicable), "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "(iii) the new value of the attribute. The task will be updated without changing its position"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "in the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example of usage #1: "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`update 1 description read five books`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " Ok! I\u0027ve updated this task: "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   [T][✘] read five books"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " Now you have 3 task(s) in the list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example of usage #2: "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`update 2 time 19/09/2019 2359`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " Ok! I\u0027ve updated this task: "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   [D][✘] project submission (by: Thu, 19 Sep 2019, 11:59PM)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " Now you have 3 task(s) in the list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "### `done` - mark a task as done"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "To mark an existing task as completed, type `done` followed by the index of the task."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Its status in Duke will change from a cross (uncompleted) to a tick (completed).  "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " Nice! I\u0027ve marked this task as done: "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   [T][✓] read five books"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "### `list` - display all existing tasks"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "To have a look at all the tasks in the list, type `list`. "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Duke will display a complete list of existing tasks that have been recorded."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " Here are the tasks in your list:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " 1.[T][✓] read five books"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " 2.[D][✘] project submission (by: Thu, 19 Sep 2019, 11:59PM)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " 3.[E][✘] team meeting (at: Wed, 18 Sep 2019, 4:00PM)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "### `find` - search by keyword (or phrase)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "To search for all tasks that contain the specified keyword (or phrase), type `find` "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "followed by the keyword (or phrase). Duke will display a list of matching results. "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`find submission`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " 1.[D][✘] project submission (by: Thu, 19 Sep 2019, 11:59PM)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "### `delete` - delete an existing task from the list"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "To delete an existing task, type `delete` followed by the index of the task. "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "It will be removed from the task list and cease to be tracked by Duke."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " Noted. I\u0027ve removed this task: "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   [T][✓] read five books"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " Now you have 2 task(s) in the list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "### `bye` - exit Duke"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "To exit Duke, type `bye`. Duke will automatically terminate in one second."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " (Exits)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 180,
      "-": 21
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents \u003ccode\u003eDuke\u003c/code\u003e, a Personal Assistant Chatbot that helps a "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * person to keep track of various things."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * A \u003ccode\u003eStorage\u003c/code\u003e object that deals with loading tasks from a local"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * file and saving tasks in the file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * A \u003ccode\u003eTaskList\u003c/code\u003e object that deals with operations on tasks in "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /** A \u003ccode\u003eUi\u003c/code\u003e object that deals with interactions with the user. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Constructs a \u003ccode\u003eDuke\u003c/code\u003e object with a default file path."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Initializes user interaction system and loads tasks from the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assert new File(\"data/tasks.txt\").exists() : \"tasks.txt not found\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Constructs a \u003ccode\u003eDuke\u003c/code\u003e object with a specific file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Initializes user interaction system and loads tasks from the file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param filePath A string that represents the path of the local file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          used for storing tasks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Duke(String filePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assert new File(filePath).exists() : \"File not found\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            ui.showLoadingSuccess();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows the result of loading past tasks from the local file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents success or failure of loading"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *      past tasks."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String loadTasks() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return ui.showLoadingSuccessGui();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return ui.showLoadingErrorGui();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Runs the \u003ccode\u003eDuke\u003c/code\u003e program that continuously reads, parses and "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * executes user input until a \"bye\" message is received."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Kick-starts the \u003ccode\u003eDuke\u003c/code\u003e program by passing in a specific file"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * path."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param args The command line arguments."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return c.executeGui(tasks, ui, storage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return ui.showErrorGui(e.getMessage());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 127,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a command to add a task. The \u003ccode\u003eAddCommand\u003c/code\u003e class "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * inherits from the \u003ccode\u003eCommand\u003c/code\u003e class to represent user instruction "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * to add a new \u003ccode\u003eNormalTask\u003c/code\u003e, \u003ccode\u003eDeadline\u003c/code\u003e or \u003ccode\u003eEvent\u003c/code\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /** The task to be added, as specified by this command. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Constructs a \u003ccode\u003eAddCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param task Specifies the task to be added."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          otherwise. Since the \u003ccode\u003eAddCommand\u003c/code\u003e is not a \"bye\", "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          the return value is set to false."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Executes the command with respect to tasks (modifying the task list), "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * UI, and storage (saving tasks in a file in hard disk)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The task list where tasks are stored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param ui The user interface that interacts with user input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that handles task "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *      storage in local file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ui.addedTask(task, tasks.getSize());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Executes the command with respect to tasks (modifying the task list),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * UI, and storage (saving tasks in a file in hard disk). GUI version."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The task list where tasks are stored."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param ui The user interface that interacts with user input."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that handles task"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents the result of this execution."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the command."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String executeGui(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return ui.addedTaskGui(task, tasks.getSize());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 77
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a command inputted by user. \u003ccode\u003eCommand\u003c/code\u003e is an abstract"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * class that can not be instantiated, but it has many child classes to "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * represent different types of commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Executes the command with respect to tasks (modifying the task list), "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * UI, and storage (saving tasks in a file in hard disk)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The task list where tasks are stored."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param ui The user interface that interacts with user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that handles task "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *      storage in local file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Executes the command with respect to tasks (modifying the task list),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * UI, and storage (saving tasks in a file in hard disk). GUI version."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The task list where tasks are stored."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param ui The user interface that interacts with user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that handles task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents the result of this execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public abstract String executeGui(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          otherwise.      "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 46
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a command to delete a task. The \u003ccode\u003eDeleteCommand\u003c/code\u003e class "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * inherits from the \u003ccode\u003eCommand\u003c/code\u003e class to represent user instruction "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * to delete an existing task from the task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /** The index of the task to be deleted, as specified by this command. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Constructs a \u003ccode\u003eDeleteCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param taskId Specifies the index of the task to be deleted."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public DeleteCommand(int taskId) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          otherwise. Since the \u003ccode\u003eDeleteCommand\u003c/code\u003e is not a \"bye\", "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          the return value is set to false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Executes the command with respect to tasks (modifying the task list), "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * UI, and storage (saving tasks in a file in hard disk)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The task list where tasks are stored."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param ui The user interface that interacts with user input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that handles task "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *      storage in local file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Task t \u003d tasks.getTask(taskId);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        tasks.removeTask(taskId);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ui.removedTask(t, tasks.getSize());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Executes the command with respect to tasks (modifying the task list),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * UI, and storage (saving tasks in a file in hard disk). GUI version."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The task list where tasks are stored."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param ui The user interface that interacts with user input."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that handles task"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents the result of this execution."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the command."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String executeGui(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Task t \u003d tasks.getTask(taskId);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        tasks.removeTask(taskId);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return ui.removedTaskGui(t, tasks.getSize());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 79
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a command to mark a task as done. The \u003ccode\u003eDoneCommand\u003c/code\u003e "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * class inherits from the \u003ccode\u003eCommand\u003c/code\u003e class to represent user "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * instruction to mark an existing task from the task list as completed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /** The index of the task to be marked as done, as specified by this command. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Constructs a \u003ccode\u003eDoneCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param taskId Specifies the index of the task to be marked as done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public DoneCommand(int taskId) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          otherwise. Since the \u003ccode\u003eDoneCommand\u003c/code\u003e is not a \"bye\", "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          the return value is set to false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Executes the command with respect to tasks (modifying the task list), "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * UI, and storage (saving tasks in a file in hard disk)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The task list where tasks are stored."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param ui The user interface that interacts with user input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that handles task "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *      storage in local file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Task t \u003d tasks.getTask(taskId);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        t.markAsDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ui.markedAsDone(t);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Executes the command with respect to tasks (modifying the task list),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * UI, and storage (saving tasks in a file in hard disk). GUI version."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The task list where tasks are stored."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param ui The user interface that interacts with user input."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that handles task"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents the result of this execution."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the command."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String executeGui(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Task t \u003d tasks.getTask(taskId);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        t.markAsDone();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return ui.markedAsDoneGui(t);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 77
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a command to exit Duke. The \u003ccode\u003eExitCommand\u003c/code\u003e class "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * inherits from the \u003ccode\u003eCommand\u003c/code\u003e class to represent user instruction "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * to quit the running Duke program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Constructs a \u003ccode\u003eExitCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          otherwise. Since the \u003ccode\u003eExitCommand\u003c/code\u003e is a \"bye\", "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          the return value is set to true."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Executes the command with respect to tasks (modifying the task list), "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * UI, and storage (saving tasks in a file in hard disk)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The task list where tasks are stored."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param ui The user interface that interacts with user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that handles task "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *      storage in local file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Executes the command with respect to tasks (modifying the task list),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * UI, and storage (saving tasks in a file in hard disk). GUI version."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The task list where tasks are stored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param ui The user interface that interacts with user input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that handles task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents the result of this execution."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String executeGui(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return ui.showByeGui();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 60
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a command to search a keyword. The \u003ccode\u003eFindCommand\u003c/code\u003e class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * inherits from the \u003ccode\u003eCommand\u003c/code\u003e class to represent user instruction"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * to find a task by searching for a keyword."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /** A string representation of the keyword for searching. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Constructs a \u003ccode\u003eFindCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param keyword Specifies the keyword for searching."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          otherwise. Since the \u003ccode\u003eFindCommand\u003c/code\u003e is not a \"bye\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          the return value is set to false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Executes the command with respect to tasks (modifying the task list),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * UI, and storage (saving tasks in a file in hard disk)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The task list where tasks are stored."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param ui The user interface that interacts with user input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that handles task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *      storage in local file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ui.printSearchResults(tasks, keyword);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Executes the command with respect to tasks (modifying the task list),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * UI, and storage (saving tasks in a file in hard disk). GUI version."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The task list where tasks are stored."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param ui The user interface that interacts with user input."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that handles task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents the result of this execution."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String executeGui(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return ui.printSearchResultsGui(tasks, keyword);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 66
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a command to list all existing tasks in the task list. The "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * \u003ccode\u003eListCommand\u003c/code\u003e class inherits from the \u003ccode\u003eCommand\u003c/code\u003e class"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * to represent user instruction to display all existing tasks in the task list. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Constructs a \u003ccode\u003eListCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          otherwise. Since the \u003ccode\u003eListCommand\u003c/code\u003e is not a \"bye\", "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          the return value is set to false."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Executes the command with respect to tasks (modifying the task list), "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * UI, and storage (saving tasks in a file in hard disk)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The task list where tasks are stored."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param ui The user interface that interacts with user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that handles task "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *      storage in local file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ui.printTasks(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Executes the command with respect to tasks (modifying the task list),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * UI, and storage (saving tasks in a file in hard disk). GUI version."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The task list where tasks are stored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param ui The user interface that interacts with user input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that handles task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents the result of this execution."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String executeGui(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return ui.printTasksGui(tasks);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 60
    }
  },
  {
    "path": "src/main/java/duke/command/UpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a command to update an existing task in the task list. The"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * \u003ccode\u003eUpdateCommand\u003c/code\u003e class inherits from the \u003ccode\u003eCommand\u003c/code\u003e class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * to represent user instruction to edit an existing task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /** The index of the task to be deleted, as specified by this command. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /** The attribute that the user wants to update. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private String attribute;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /** The new value to replace the existing one. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private String newValue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Constructs a \u003ccode\u003eUpdateCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param taskId Specifies the index of the task to be deleted."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param attribute Specifies the attribute that the user wants to update."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param newValue The new value to replace the existing one."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public UpdateCommand(int taskId, String attribute, String newValue) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.attribute \u003d attribute;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.newValue \u003d newValue;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          otherwise. Since the \u003ccode\u003eUpdateCommand\u003c/code\u003e is not a \"bye\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          the return value is set to false."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Executes the command with respect to tasks (modifying the task list),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * UI, and storage (saving tasks in a file in hard disk)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The task list where tasks are stored."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param ui The user interface that interacts with user input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that handles task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *      storage in local file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        tasks.updateTask(taskId, attribute, newValue);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Task t \u003d tasks.getTask(taskId);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ui.updatedTask(t, tasks.getSize());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Executes the command with respect to tasks (modifying the task list),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * UI, and storage (saving tasks in a file in hard disk). GUI version."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The task list where tasks are stored."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param ui The user interface that interacts with user input."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param storage The \u003ccode\u003eStorage\u003c/code\u003e object that handles task"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents the result of this execution."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the command."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String executeGui(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        tasks.updateTask(taskId, attribute, newValue);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Task t \u003d tasks.getTask(taskId);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return ui.updatedTaskGui(t, tasks.getSize());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 87
    }
  },
  {
    "path": "src/main/java/duke/core/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents exceptions specific to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Constructs a \u003ccode\u003eDukeException\u003c/code\u003e with a specific string."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param message A string that specifies the problem associated with the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *              exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    DukeException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 17
    }
  },
  {
    "path": "src/main/java/duke/core/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.command.UpdateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.task.NormalTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a \u003ccode\u003eParser\u003c/code\u003e that parses user input into a specific "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * type of \u003ccode\u003eCommand\u003c/code\u003e. The \u003ccode\u003eParser\u003c/code\u003e also parses tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * related to the command, and checks for illegal instructions."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Creates a string from a sub array of a string array."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param words The string array to be processed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param start The starting position in the string array."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param end The ending position in the string array."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string consisting of all the words from the starting position"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          to the ending position, separated by spaces."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static String subString(String[] words, int start, int end) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        IntStream.rangeClosed(start, end - 1).forEach(i -\u003e sb.append(words[i] + \" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return sb.toString().trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Finds the index of a given string in a string array."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param words The string array to be inspected."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param s The string to be searched."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return The index of the given string in the string array. Returns -1 if"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          the given string does not occur in the array."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static int findIdx(String[] words, String s) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return Stream.of(words).collect(Collectors.toList()).indexOf(s);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Formats a given date and time string into a more readable format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param input The date and time string input by the user, in the form \"d/MM/yyyy HHmm\"."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A better formatted string that clearly shows day of the week, abbreviation of the month, and AM/PM."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DukeException If the given string cannot be parsed into \u003ccode\u003eLocalDateTime\u003c/code\u003e."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static String formatDateTime(String input) throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.parse(input, inputFormatter);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"EEE, d MMM yyyy, h:mma\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return outputFormatter.format(dateTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new DukeException(\"Input date and time is not in dd/MM/yyyy HHmm format (24-hour clock) :-(\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Parses a \u003ccode\u003eTask\u003c/code\u003e from a string array."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param words The string array to be parsed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return The \u003ccode\u003eTask\u003c/code\u003e that is parsed from the string array."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DukeException If an exception occurs during parsing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static Task parseTask(String[] words) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (words[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new NormalTask(subString(words, 1, words.length));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } else if (words[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            int i \u003d findIdx(words, \"/by\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            String description \u003d subString(words, 1, i);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            String dueTime \u003d subString(words, i + 1, words.length);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            String formattedDueTime \u003d formatDateTime(dueTime);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new Deadline(description, formattedDueTime);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            assert words[0].equals(\"event\") : \"Instruction type should be event\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            int i \u003d findIdx(words, \"/at\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            String description \u003d subString(words, 1, i);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            String occurTime \u003d subString(words, i + 1, words.length);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            String formattedOccurTime \u003d formatDateTime(occurTime);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new Event(description, formattedOccurTime);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Checks if an inputted task id is valid (i.e. an integer larger than or equal to 1)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param s The string that represents the task id inputted by user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A boolean that indicates whether this task id is valid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static boolean isValidTaskId(String s) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            int taskId \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return taskId \u003e\u003d 1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Checks for invalid user input and throws exceptions accordingly."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param words The string array to be checked."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DukeException If the inputted instruction is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static void checkInvalidInstruction(String[] words) throws DukeException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String fw \u003d words[0];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        boolean isDoneCommand \u003d fw.equals(\"done\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        boolean isDeleteCommand \u003d fw.equals(\"delete\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        boolean isUpdateCommand \u003d fw.equals(\"update\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        boolean isDeadlineCommand \u003d fw.equals(\"deadline\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        boolean isEventCommand \u003d fw.equals(\"event\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if ((isDoneCommand || isDeleteCommand || isUpdateCommand)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (words.length \u003c 2) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new DukeException(\" \\u2639  OOPS!!! The task number of the \\\"\" + fw + \"\\\" command cannot be empty.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (!isValidTaskId(words[1])) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                throw new DukeException(\" \\u2639  OOPS!!! The task does not exist :-(\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (isUpdateCommand \u0026\u0026 words.length \u003c 4) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new DukeException(\" \\u2639  OOPS!!! The \\\"update\\\" command is missing further details. \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    + \"It should have 4 components.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (isUpdateCommand \u0026\u0026 !(words[2].equals(\"description\") || words[2].equals(\"time\"))) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new DukeException(\" \\u2639  OOPS!!! The attribute of an \\\"update\\\" command can only be\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    + \" \\\"description\\\" or \\\"time\\\".\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (isDeadlineCommand \u0026\u0026 findIdx(words, \"/by\") \u003d\u003d -1) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new DukeException(\" \\u2639  OOPS!!! The time of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (isEventCommand \u0026\u0026 findIdx(words, \"/at\") \u003d\u003d -1) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new DukeException(\" \\u2639  OOPS!!! The time of an event cannot be empty.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Parses a line of user instruction into respective \u003ccode\u003eCommand\u003c/code\u003e "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * types."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param instruction The string that represents user input."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A \u003ccode\u003eCommand\u003c/code\u003e that represents the specific type of"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          command the user gives."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DukeException If the inputted instruction is invalid."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static Command parse(String instruction) throws DukeException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String[] words \u003d instruction.split(\" \");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        checkInvalidInstruction(words);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String fw \u003d words[0];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        switch (fw) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new DoneCommand(Integer.parseInt(words[1]));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new DeleteCommand(Integer.parseInt(words[1]));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (words.length \u003c 2) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                throw new DukeException(\" \\u2639  OOPS!!! The keyword of a \\\"find\\\" command cannot be empty.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new FindCommand(words[1]);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case \"update\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            String newValue \u003d subString(words, 3, words.length);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (words[2].equals(\"description\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                return new UpdateCommand(Integer.parseInt(words[1]), words[2], newValue);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                assert words[2].equals(\"time\") : \"Invalid attribute type for an update command\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                return new UpdateCommand(Integer.parseInt(words[1]), words[2], formatDateTime(newValue));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case \"deadline\": case \"event\": case \"todo\":"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (words.length \u003c 2) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                throw new DukeException(\" \\u2639  OOPS!!! The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            Task t \u003d parseTask(words);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new AddCommand(t);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new DukeException(\" \\u2639  OOPS!!! I\u0027m sorry, but I don\u0027t know what that means...\\n\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    + \"The first word of your instruction seems to be an invalid command :-(\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 202
    }
  },
  {
    "path": "src/main/java/duke/core/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.task.NormalTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a \u003ccode\u003eStorage\u003c/code\u003e class that deals with loading tasks from "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * a file and saving tasks in the file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /** A string that represents the file path in local hard disk. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Constructs a \u003ccode\u003eStorage\u003c/code\u003e object with a specific file path."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param filePath A string that represents the path of the file to be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          loaded and modified."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Loads tasks from the file into a \u003ccode\u003eArrayList\u003c/code\u003e of "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A \u003ccode\u003eArrayList\u003c/code\u003e of tasks as recorded in the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DukeException If file is not found."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        File duke \u003d new File(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            Scanner fileScanner \u003d new Scanner(duke);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                String nextLine \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                String[] words \u003d nextLine.split(\" \\\\| \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                if (words[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    Task t \u003d new NormalTask(words[2]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    if (words[1].equals(\"✓\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        t.markAsDone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    tasks.add(t);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                if (words[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    Task t \u003d new Deadline(words[2], words[3]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    if (words[1].equals(\"✓\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        t.markAsDone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    tasks.add(t);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                } "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                if (words[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    Task t \u003d new Event(words[2], words[3]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    if (words[1].equals(\"✓\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        t.markAsDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    tasks.add(t);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new DukeException(\"Load failed\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Saves tasks from a \u003ccode\u003eTaskList\u003c/code\u003e to the local file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The \u003ccode\u003eTaskList\u003c/code\u003e storing tasks."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DukeException If writing to the local file failed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void save(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            for (Task t : tasks.getList()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                fw.write(t.format() + System.lineSeparator());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new DukeException(\"Failed to save tasks :-(\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 101
    }
  },
  {
    "path": "src/main/java/duke/core/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a list of \u003ccode\u003eTask\u003c/code\u003e that can perform operations such as "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * add and delete on the tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * An internal \u003ccode\u003eArrayList\u003c/code\u003e structure to store and manipulate"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * the tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Constructs a new \u003ccode\u003eTaskList\u003c/code\u003e with a default empty list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Overloaded constructor that constructs a new \u003ccode\u003eTaskList\u003c/code\u003e from"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * a given \u003ccode\u003eArrayList\u003c/code\u003e of \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks An existing \u003ccode\u003eArrayList\u003c/code\u003e of tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns the \u003ccode\u003eArrayList\u003c/code\u003e of tasks associated with this"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return The \u003ccode\u003eArrayList\u003c/code\u003e of tasks associated with this"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns the \u003ccode\u003eTask\u003c/code\u003e in the list with the given index."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param i The index of the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return The \u003ccode\u003eTask\u003c/code\u003e in the list with this specific index."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DukeException If the task id is larger than the size of the task list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Task getTask(int i) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assert i \u003e\u003d 1 : \"Task ID starts from 1\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return tasks.get(i - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new DukeException(\" \\u2639  OOPS!!! The task does not exist :-(\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Adds a \u003ccode\u003eTask\u003c/code\u003e to the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param t The \u003ccode\u003eTask\u003c/code\u003e to be added to the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Removes the \u003ccode\u003eTask\u003c/code\u003e with the given index from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param i The index of the \u003ccode\u003eTask\u003c/code\u003e to be deleted."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void removeTask(int i) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assert i \u003e\u003d 1 : \"Task ID starts from 1\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            tasks.remove(i - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Updates the description or time of an existing task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param i The index of the task to be updated."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param attribute The attribute to be updated (description or time)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param newValue The new value to replace the existing one."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DukeException If the task does not exist, or does not have a time attribute."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void updateTask(int i, String attribute, String newValue) throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assert i \u003e\u003d 1 : \"Task ID starts from 1\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Task t \u003d this.getTask(i);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (attribute.equals(\"description\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            t.updateDescription(newValue);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } else if (attribute.equals(\"time\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                ((Deadline) t).updateDueTime(newValue);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            } else if (t instanceof Event) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                ((Event) t).updateOccurTime(newValue);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                throw new DukeException(\" \\u2639  OOPS!!! Normal tasks do not have a time attribute.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns the number of tasks stored in the list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return An integer representing the number of tasks in the list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 120
    }
  },
  {
    "path": "src/main/java/duke/core/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a system that deals with user interaction, for example, printing "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * welcome messages and prmopts."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /** A \u003ccode\u003eScanner\u003c/code\u003e used to read user input. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Constructs a \u003ccode\u003eUi\u003c/code\u003e object and initilizes the "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * \u003ccode\u003eScanner\u003c/code\u003e to read user input from the system."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows Duke logo and welcome message, and prompts user to type instructions."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows a welcome message, and prompts user to type instructions. GUI version."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents the welcome message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String showWelcomeGui() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return \"Hello from DUKE\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    + \"\\nHello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows an error in loading the file where past tasks are stored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        System.out.println(\"Failed to Load past tasks :-(\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows an error in loading the file where past tasks are stored. GUI version."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that indicates failure in loading past tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String showLoadingErrorGui() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return \"Failed to Load past tasks :-(\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows success in loading past tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void showLoadingSuccess() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        System.out.println(\"Past tasks loaded successfully :-)\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows success in loading past tasks. GUI version."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that indicates success in loading past tasks."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String showLoadingSuccessGui() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return \"Past tasks loaded successfully :-)\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Reads one line of user instruction."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents the user instruction."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows a divider line."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows that a \u003ccode\u003eTask\u003c/code\u003e has been added, and displays the number "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * of current tasks in the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param t The \u003ccode\u003eTask\u003c/code\u003e that is added to the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param size The number of tasks stored in the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void addedTask(Task t, int size) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \\n  \" + t + \"\\nNow you have \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                + size + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows that a \u003ccode\u003eTask\u003c/code\u003e has been added, and displays the number"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * of current tasks in the list. GUI version."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param t The \u003ccode\u003eTask\u003c/code\u003e that is added to the list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param size The number of tasks stored in the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents successful addition of the task, and"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *      the number of current tasks in the list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String addedTaskGui(Task t, int size) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return \"Got it. I\u0027ve added this task: \\n  \" + t + \"\\nNow you have \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                + size + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows that a \u003ccode\u003eTask\u003c/code\u003e has been marked as done."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param t The \u003ccode\u003eTask\u003c/code\u003e that is marked as done."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void markedAsDone(Task t) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \\n  \" + t);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows that a \u003ccode\u003eTask\u003c/code\u003e has been marked as done. GUI version."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param t The \u003ccode\u003eTask\u003c/code\u003e that is marked as done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that indicates the task has been successfully marked as done."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String markedAsDoneGui(Task t) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done: \\n  \" + t;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows that a \u003ccode\u003eTask\u003c/code\u003e has been removed, and displays the number "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * of current tasks in the list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param t The \u003ccode\u003eTask\u003c/code\u003e that is deleted from the list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void removedTask(Task t, int size) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \\n  \" + t + \"\\nNow you have \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                + size + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows that a \u003ccode\u003eTask\u003c/code\u003e has been removed, and displays the number"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * of current tasks in the list. GUI version."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param t The \u003ccode\u003eTask\u003c/code\u003e that is deleted from the list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents the successful removal of the task, and"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          the number of current tasks in the list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String removedTaskGui(Task t, int size) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return \"Noted. I\u0027ve removed this task: \\n  \" + t + \"\\nNow you have \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                + size + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows that a \u003ccode\u003eTask\u003c/code\u003e has been updated, and display the number of"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * current tasks in the list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param t The \u003ccode\u003eTask\u003c/code\u003e that is updated."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param size The number of tasks stored in the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void updatedTask(Task t, int size) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        System.out.println(\"Ok! I\u0027ve updated this task: \\n  \" + t + \"\\nNow you have \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                + size + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows that a \u003ccode\u003eTask\u003c/code\u003e has been updated, and display the number of"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * current tasks in the list. GUI version."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param t The \u003ccode\u003eTask\u003c/code\u003e that is updated."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param size The number of tasks stored in the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents the task has been successfully updated, and"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          the number of current tasks in the list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String updatedTaskGui(Task t, int size) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return \"Ok! I\u0027ve updated this task: \\n  \" + t + \"\\nNow you have \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                + size + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Displays all tasks currently stored in the list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The \u003ccode\u003eTaskList\u003c/code\u003e used to store tasks."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void printTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d tasks.getList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        list.forEach(t -\u003e System.out.println(list.indexOf(t) + 1 + \".\" + t));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Displays all tasks currently stored in the list. GUI version."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The \u003ccode\u003eTaskList\u003c/code\u003e used to store tasks."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents all existing tasks."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String printTasksGui(TaskList tasks) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d tasks.getList();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        list.forEach(t -\u003e sb.append(list.indexOf(t) + 1 + \".\" + t + \"\\n\"));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return \"Here are the tasks in your list:\\n\" + sb.toString();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows content of an error."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param errorMessage A string that represents the content of the error."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows content of an error. GUI version."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param errorMessage A string that represents the content of the error."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents the error message."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String showErrorGui(String errorMessage) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows search results for finding a keyword in the task list. Displays"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * all tasks that contain the keyword."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The \u003ccode\u003eTaskList\u003c/code\u003e where keyword is searched."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param keyword A string representation of the keyword."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void printSearchResults(TaskList tasks, String keyword) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        List\u003cTask\u003e results \u003d tasks.getList().stream()"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    .filter(t -\u003e t.toString().contains(keyword))"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        results.forEach(t -\u003e System.out.println(results.indexOf(t) + 1 + \".\" + t));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows search results for finding a keyword in the task list. Displays"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * all tasks that contain the keyword."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param tasks The \u003ccode\u003eTaskList\u003c/code\u003e where keyword is searched."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param keyword A string representation of the keyword."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents all the matching results."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String printSearchResultsGui(TaskList tasks, String keyword) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        List\u003cTask\u003e results \u003d tasks.getList().stream()"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .filter(t -\u003e t.toString().contains(keyword))"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        results.forEach(t -\u003e sb.append(results.indexOf(t) + 1 + \".\" + t + \"\\n\"));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return \"Here are the matching tasks in your list:\\n\" + sb.toString();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows bye message to user."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows bye message to user. GUI version."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents the bye message."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String showByeGui() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 287
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            assert new File(\"src/main/resources/view/DialogBox.fxml\").exists() : \"DialogBox.fxml not found\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Creates a dialog box that contains the user\u0027s instruction."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param text A string that represents the user\u0027s instruction."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param img An image that represents the user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A dialog box that contains the user\u0027s instruction."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        DialogBox userDialog \u003d  new DialogBox(text, img);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        userDialog.setBackground(new Background(new BackgroundFill("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                Color.rgb(187,210, 240),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new CornerRadii(10),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new Insets(5,60,5,2))));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return userDialog;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Creates a dialog box that contains Duke\u0027s reply to an instruction."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param text A string that represents Duke\u0027s reply."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param img An image that represents Duke."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A dialog box that contains Duke\u0027s reply."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        DialogBox dukeDialog \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        dukeDialog.setBackground(new Background(new BackgroundFill("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                Color.rgb(240,187, 231),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new CornerRadii(10),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new Insets(5,2,5,60))));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        dukeDialog.flip();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return dukeDialog;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 95
    }
  },
  {
    "path": "src/main/java/duke/gui/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Launches the main class for Duke GUI."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param args The command line arguments."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 18
    }
  },
  {
    "path": "src/main/java/duke/gui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Starts a stage to display the GUI."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param stage A stage where Duke GUI is executed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            assert new File(\"src/main/resources/view/MainWindow.fxml\").exists() : \"MainWindow.fxml not found\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().showWelcome();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().isExit.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                if (oldValue !\u003d newValue) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    PauseTransition delay \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    delay.setOnFinished(event -\u003e stage.close());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    delay.play();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 53
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public SimpleBooleanProperty isExit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Initializes the main window of Duke GUI."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        isExit \u003d new SimpleBooleanProperty();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Set the main window\u0027s Duke object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param d The Duke object to be associated with the main window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows the welcome message in the GUI."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void showWelcome(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String welcomeMessage \u003d new Ui().showWelcomeGui();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                DialogBox.getDukeDialog("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        welcomeMessage,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        dukeImage));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Shows the result of loading past tasks from the local file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void load() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String message \u003d duke.loadTasks();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                DialogBox.getDukeDialog("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        message,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        dukeImage));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            isExit.set(true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        );"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 88
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a task with a deadline. The \u003ccode\u003eDeadline\u003c/code\u003e class "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * inherits from the \u003ccode\u003eTask\u003c/code\u003e class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /** A string that represents the deadline of the task, as inputted by user. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private String dueTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Constructs a \u003ccode\u003eDeadline\u003c/code\u003e object. Date and time are parsed and "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * stored in \u003ccode\u003edateTime\u003c/code\u003e field if input is of \"dd/MM/yyyy HHmm\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param description A string that describes the specific"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          content of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param dueTime A string that specifies the deadline of the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Deadline(String description, String dueTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.dueTime \u003d dueTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Updates the due time of the deadline."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param newDueTime The new due time to replace the existing one."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void updateDueTime(String newDueTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.dueTime \u003d newDueTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns a string representation of the task to be stored in a local file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string in a specific format for clear display in a local file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return \"D | \" + this.getStatusIcon() + \" | \" + this.getDescription() + \" | \" + this.dueTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns a string representation of the task to be printed upon user "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * inquiry."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string representation of the task that displays the type,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          description and deadline of the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dueTime + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 57
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents an event that occurs at a specific time. The \u003ccode\u003eEvente\u003c/code\u003e "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * class inherits from the \u003ccode\u003eTask\u003c/code\u003e class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /** A string that represents the time of the event, as inputted by user. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private String occurTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Constructs a \u003ccode\u003eEvent\u003c/code\u003e object. Date and time are parsed and "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * stored in \u003ccode\u003edateTime\u003c/code\u003e field if input is of \"dd/MM/yyyy HHmm\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param description A string that describes the specific"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          content of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param occurTime A string that specifies the time of the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Event(String description, String occurTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.occurTime \u003d occurTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Updates the time of occurrence of the event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param newOccurTime The new time of occurrence to replace the existing one."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void updateOccurTime(String newOccurTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.occurTime \u003d newOccurTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns a string representation of the task to be stored in a local file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string in a specific format for clear display in a local file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return \"E | \" + this.getStatusIcon() + \" | \" + this.getDescription() + \" | \" + this.occurTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns a string representation of the task to be printed upon user "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * inquiry."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string representation of the task that displays the type,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          description and time of the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + occurTime + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 57
    }
  },
  {
    "path": "src/main/java/duke/task/NormalTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a normal task without a deadline or a specific time of occurrence."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * The \u003ccode\u003eNormalTask\u003c/code\u003e class inherits from the \u003ccode\u003eTask\u003c/code\u003e class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class NormalTask extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Constructs a \u003ccode\u003eNormalTask\u003c/code\u003e object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param description A string that describes the specific"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          content of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public NormalTask(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns a string representation of the task to be stored in a local file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string in a specific format for clear display in a local file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return \"T | \" + this.getStatusIcon() + \" | \" + this.getDescription();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns a string representation of the task to be printed upon user "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * inquiry."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string representation of the task that displays the type and"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          description of task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 40
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a task.  \u003ccode\u003eTask\u003c/code\u003e is an abstract class that can not be "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * instantiated, but it has many child classes to represent different types of "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /** A String that represents the specific content of the task. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /** A boolean that represents the status of completion of the task. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Initialises the minimum fields required to set up a \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * All new tasks are uncompleted by default."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param description A string that represents the specific activity"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *                  associated with the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns an icon that represents the status of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return Tick if completed, cross if uncompleted."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    protected String getStatusIcon() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string that represents the specific activity associated with"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    protected String getDescription() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Updates the description the task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param newDescription The new description to replace the existing one."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void updateDescription(String newDescription) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.description \u003d newDescription;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Formats the task in a specific format for clear display and storage."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string representation of the task to be stored in a local file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public abstract String format();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Overrides the \u003ccode\u003etoString()\u003c/code\u003e method in \u003ccode\u003eObject\u003c/code\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * class to output a string representation of the task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A string representation of the task that displays the status"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *          and description of the task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 82
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"69.0\" prefWidth\u003d\"534.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"128.0\" prefWidth\u003d\"458.0\" text\u003d\"Here are your tasks in the listHere are your tasks in the listHere are your tasks in the listHere are your tasks in the listHere are your tasks in the listHere are your tasks in the listHere are your tasks in the listHere are your tasks in the listHere are your tasks in the \" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            \u003cFont name\u003d\"Lao MN\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"128.0\" fitWidth\u003d\"128.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 26
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"785.0\" prefWidth\u003d\"514.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"5.0\" layoutY\u003d\"737.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"43.0\" prefWidth\u003d\"404.0\" AnchorPane.bottomAnchor\u003d\"5.0\" AnchorPane.leftAnchor\u003d\"5.0\" AnchorPane.rightAnchor\u003d\"105.0\" AnchorPane.topAnchor\u003d\"737.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"415.0\" layoutY\u003d\"737.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"43.0\" prefWidth\u003d\"92.0\" text\u003d\"Send\" textAlignment\u003d\"CENTER\" textFill\u003d\"#96a825\" AnchorPane.bottomAnchor\u003d\"5.0\" AnchorPane.leftAnchor\u003d\"415.0\" AnchorPane.rightAnchor\u003d\"7.0\" AnchorPane.topAnchor\u003d\"737.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            \u003cFont name\u003d\"Wawati SC Regular\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"5.0\" layoutY\u003d\"5.0\" prefHeight\u003d\"725.0\" prefWidth\u003d\"502.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"723.0\" prefWidth\u003d\"484.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 23
    }
  },
  {
    "path": "src/test/java/duke/core/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void parse_invalidFirstWord_exceptionThrown() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            assertEquals(new ExitCommand(), Parser.parse(\"byo\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            assertEquals(\" ☹  OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 19
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(\"[D][✘] individual project (by: 28/08/2019 2359)\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new Deadline(\"individual project\", \"28/08/2019 2359\").toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void testStringFormatter() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(\"D | ✘ | individual project | 28/08/2019 2359\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new Deadline(\"individual project\", \"28/08/2019 2359\").format());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void testStatusIconGetter() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(\"✘\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new Deadline(\"individual project\", \"28/08/2019 2359\").getStatusIcon());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 24
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  [T][✘] read book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  [D][✘] return book (by: June 6th)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  [E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Nice! I\u0027ve marked this task as done: "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  [T][✓] read book"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  [T][✘] join sports club"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  [T][✘] borrow book"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Nice! I\u0027ve marked this task as done: "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  [T][✓] join sports club"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "1.[T][✓] read book"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "2.[D][✘] return book (by: June 6th)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "3.[E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "4.[T][✓] join sports club"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "5.[T][✘] borrow book"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  [D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  [E][✘] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Now you have 7 tasks in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "1.[T][✓] read book"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "2.[D][✘] return book (by: June 6th)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "3.[E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "4.[T][✓] join sports club"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "5.[T][✘] borrow book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "6.[D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "7.[E][✘] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Bye. Hope to see you again soon!"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 49
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 12
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   then"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   if ! javac -cp ~/Desktop/CS2103T/duke/src -Xlint:none -d ~/Desktop/CS2103T/duke/bin ~/Desktop/CS2103T/duke/src/main/java/*.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   java -classpath ~/Desktop/CS2103T/duke/bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   then"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   else"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 36
    }
  }
]
