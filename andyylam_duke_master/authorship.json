[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.1.0\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.1.0\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "run {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "test {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 22,
      "-": 15
    }
  },
  {
    "path": "src/main/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "E,1,carnival,2/12/2014 1920"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "D,1,carnival23,2/12/2011 1010"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "T,1,return book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "E,1,asd,1/2/1231 1231"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "T,1,return book"
      }
    ],
    "authorContributionMap": {
      "andyylam": 5
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public Duke(String filePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    } catch (DukeException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      ui.showLoadingError();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public void run() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    ui.showWelcome();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    boolean isExit \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    while (!isExit) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public static void main(String[] args) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    new Duke(\"src/main/data/duke.txt\").run();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 40,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.task.Deadlines;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents an Add Command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private Task task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public AddCommand(String typeOfTask, String name, String datetime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    switch (typeOfTask) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    case \"todo\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      task \u003d new ToDo(name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    case \"deadline\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      task \u003d new Deadlines(name, datetime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    case \"event\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      task \u003d new Event(name, datetime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    default:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public AddCommand(String typeOfEvent, String name) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    this(typeOfEvent, name, null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Method that returns true only if this is an instance of an ExitCommand."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public boolean isExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Executes the Command: adds the current task to current TaskList and writes it in the storage file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param tasks current TaskList instance"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param ui current UI instance"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param storage current Storage instance"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @throws DukeException"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    tasks.add(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    storage.addTask(task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    Ui.printLine(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    Ui.printLine(\"  \" + task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    Ui.printLine(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Method that checks whether this instance is logically equivalent to another Object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param obj The other object in question."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return true if logically equivalent, false otherwise"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    if (this \u003d\u003d obj)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    else if (obj instanceof AddCommand) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      AddCommand other \u003d (AddCommand) obj;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return other.task.equals(this.task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 78
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a Bye Command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Method that returns true only if this is an instance of an ExitCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Executes the Command: Prints out Bye statement and exits the program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param tasks current TaskList instance"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param ui current UI instance"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param storage current Storage instance"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @throws DukeException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    Ui.printLine(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Method that checks whether this instance is logically equivalent to another Object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param obj The other object in question."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return true if logically equivalent, false otherwise"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    if (this \u003d\u003d obj)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    else if (obj instanceof ByeCommand)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 47
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public abstract boolean isExit();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 11
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a Delete Command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    this.index \u003d index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Method that returns true only if this is an instance of an ExitCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Executes the Command: removes current task from TaskList and removes line from storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param tasks current TaskList instance"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param ui current UI instance"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param storage current Storage instance"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @throws DukeException"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    Task deleted \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    storage.deleteLine(deleted.storageString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    Ui.printLine(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    Ui.printLine(\"  \" + deleted);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    Ui.printLine(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Method that checks whether this instance is logically equivalent to another Object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param obj The other object in question."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return true if logically equivalent, false otherwise"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    if (this \u003d\u003d obj)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    else if (obj instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      DeleteCommand other \u003d (DeleteCommand) obj;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return other.index \u003d\u003d this.index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 59
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a Done Command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public DoneCommand(int index) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    this.index \u003d index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Method that returns true only if this is an instance of an ExitCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Executes the Command: Sets task in taskList done, and updates the storage file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param tasks current TaskList instance"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param ui current UI instance"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param storage current Storage instance"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @throws DukeException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    String current \u003d tasks.get(index).storageString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    tasks.get(index).setDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    String res \u003d tasks.get(index).storageString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    storage.replaceLine(current, res);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Method that checks whether this instance is logically equivalent to another Object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param obj The other object in question."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return true if logically equivalent, false otherwise"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    if (this \u003d\u003d obj)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    else if (obj instanceof DoneCommand) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      DoneCommand other \u003d (DoneCommand) obj;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return other.index \u003d\u003d this.index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 57
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private String tofind;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public FindCommand(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    this.tofind \u003d s;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    TaskList containsList \u003d tasks.find(this.tofind);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    Ui.printLine(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    Ui.printLine(containsList.printAllTasks());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 26
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a List Command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Method that returns true only if this is an instance of an ExitCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return false"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Executes the Command: Prints out tasks in TaskList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param tasks current TaskList instance"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param ui current UI instance"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param storage current Storage instance"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @throws DukeException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    Ui.printLine(tasks.printAllTasks());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Method that checks whether this instance is logically equivalent to another Object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param obj The other object in question."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return true if logically equivalent, false otherwise"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    if (this \u003d\u003d obj)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    else if (obj instanceof ListCommand)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 47
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private String e;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public DukeException(String e) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    super(e);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    this.e \u003d e;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return this.e;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 15
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a parser that parses a line, returning a Command instance"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private static final String unknownCommand \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private static final String unknownTodo \u003d \"☹ OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private static final String unknownDeadline \u003d \"☹ OOPS!!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private static final String unknownEvent \u003d \"☹ OOPS!!! The description of an event cannot be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Returns a Command instance of the specified line."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param line Line to be parsed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return an instance of a Command specified by the line ."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @throws DukeException when line does not meet expected parameters."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public static Command parse(String line) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    if (line.equals(\"bye\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return new ByeCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    } else if (line.equals(\"list\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return new ListCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      String[] strArr \u003d line.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      String command \u003d strArr[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      int index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      switch (command) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      case \"todo\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new AddCommand(\"todo\", line.substring(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      case \"deadline\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String[] deadline \u003d deadlineEventString(strArr, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new AddCommand(\"deadline\", deadline[0], deadline[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      case \"event\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String[] event \u003d deadlineEventString(strArr, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new AddCommand(\"event\", event[0], event[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      case \"done\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        index \u003d Integer.parseInt(strArr[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new DoneCommand(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      case \"delete\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        index \u003d Integer.parseInt(strArr[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new DeleteCommand(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      case \"find\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new FindCommand(line.substring(5));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        throw new DukeException(unknownCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Helper method that returns a string for Event or Deadline instance creation."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param arr String Array."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param deadline true if deadline, false if event."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return String[] with 2 elements - first is name, second is datetime."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @throws DukeException if expected parameters are not met."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private static String[] deadlineEventString(String[] arr, boolean deadline) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    String[] res \u003d new String[2];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    int divide \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    for (int i \u003d 1; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      if (deadline \u0026\u0026 arr[i].equals(\"/by\") || !deadline \u0026\u0026 arr[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        divide \u003d i;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      sb.append(arr[i]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      sb.append(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    res[0] \u003d sb.toString().trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    if (res[0].isEmpty())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      throw new DukeException(deadline ? unknownDeadline: unknownEvent);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    for (int i \u003d divide + 1; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      sb.append(arr[i]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      sb.append(\" \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    res[1] \u003d sb.toString().trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return res;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 84
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.nio.file.StandardOpenOption;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a Storage class that handles all reading and writing into file storage for tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Constructor for storage class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param filePath filePath of the storage file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public Storage(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Loads the tasks in storage file into a List\u003cTask\u003e."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return List\u003cTask\u003e with tasks from storage file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @throws DukeException if file is not found."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      List\u003cString\u003e lines \u003d Files.readAllLines(Paths.get(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      for (String line : lines) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (!line.isEmpty())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "          list.add(Task.taskMaker(line.split(\",\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return list;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Method to delete a line from the file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param toDelete Line to be deleted."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @throws DukeException if file is not found."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public void deleteLine(String toDelete) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      List\u003cString\u003e lines \u003d Files.readAllLines(Paths.get(filePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      List\u003cString\u003e newlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      for (String line : lines) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (!line.equals(toDelete) \u0026\u0026 !line.contains(toDelete)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "          newlines.add(line);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      Files.write(Paths.get(filePath), newlines);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Method to replace a line in the storage file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param before line to be replaced."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param after line to replace with."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @throws DukeException if file is not found."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public void replaceLine(String before, String after) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      List\u003cString\u003e lines \u003d Files.readAllLines(Paths.get(filePath));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      List\u003cString\u003e newlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      for (String line : lines) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (line.equals(before) || line.contains(before)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andyylam"
        },
        "content": "          newlines.add(after);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andyylam"
        },
        "content": "          newlines.add(line);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      Files.write(Paths.get(filePath), newlines);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Method to store a new task into the storage file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param t Task to be written into the file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @throws DukeException if file is not found."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public void addTask(Task t) throws DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      Files.write(Paths.get(filePath), Collections.singletonList(t.storageString()), StandardOpenOption.APPEND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 102
    }
  },
  {
    "path": "src/main/java/duke/task/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a Deadline with a name and datetime"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private Calendar datetime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private String datetimeString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public Deadlines(String name, String datetime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    this(name, datetime, false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  Deadlines(String name, String datetime, boolean done) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    super(name, done);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    this.datetimeString \u003d datetime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    String[] dateandtime \u003d datetime.split(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    String[] date \u003d dateandtime[0].split(\"/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    this.datetime.set(Integer.parseInt(date[0]), Integer.parseInt(date[1]), Integer.parseInt(date[2]),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        Integer.parseInt(dateandtime[1].substring(0, 2)), Integer.parseInt(dateandtime[1].substring(2, 4)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Returns the datetime of the Deadline instance in string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return String: datetime"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public String getDatetimeString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return datetimeString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Returns a string formatted for storage in the storage file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return String"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public String storageString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return \"D,\" + (super.getDone() ? \"1,\" : \"0,\") + super.getName() + \",\" + this.datetimeString;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Returns a string for normal printing to represent state and details of the Task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return String"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return \"[D]\" + super.toString() + \" (by: \" + datetimeString + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Checks for logical equality of this instance to another object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param obj Another object in question."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return true if logically equivalent, false otherwise."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    if (this \u003d\u003d obj)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    else if (obj instanceof Deadlines) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      Deadlines other \u003d (Deadlines) obj;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return this.getDone() \u003d\u003d other.getDone() \u0026\u0026 this.getName().equals(other.getName())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "              \u0026\u0026 this.getDatetimeString().equals(other.getDatetimeString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 67
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents an Event with a name and datetime"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private Calendar datetime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private String datetimeString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public Event(String name, String datetime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    this(name, datetime, false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  Event(String name, String datetime, boolean done) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    super(name, done);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    this.datetimeString \u003d datetime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    String[] dateandtime \u003d datetime.split(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    String[] date \u003d dateandtime[0].split(\"/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    this.datetime.set(Integer.parseInt(date[0]), Integer.parseInt(date[1]), Integer.parseInt(date[2]),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        Integer.parseInt(dateandtime[1].substring(0, 2)), Integer.parseInt(dateandtime[1].substring(2, 4)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Returns the datetime of the Deadline instance in string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return String: datetime"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public String getDatetimeString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return datetimeString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public Calendar getDatetime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return datetime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Returns a string formatted for storage in the storage file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return String"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public String storageString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return \"E,\" + (super.getDone() ? \"1,\" : \"0,\") + super.getName() + \",\" + this.datetimeString;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Returns a string for normal printing to represent state and details of the Task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return String"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return \"[E]\" + super.toString() + \" (at: \" + datetimeString + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Checks for logical equality of this instance to another object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param obj Another object in question."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return true if logically equivalent, false otherwise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    if (this \u003d\u003d obj)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    else if (obj instanceof Event) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      Event other \u003d (Event) obj;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return this.getDone() \u003d\u003d other.getDone() \u0026\u0026 this.getName().equals(other.getName())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "              \u0026\u0026 this.getDatetimeString().equals(other.getDatetimeString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 71
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private String name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private boolean done;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  Task(String name, boolean done) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    this.name \u003d name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    this.done \u003d done;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  Task(String name) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    this(name, false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public String getName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return this.name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  boolean getDone() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return this.done;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public void setDone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    this.done \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    System.out.println(\"  \" + this.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public abstract String storageString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return (\"[\" + (this.done ? \"✓\" : \"✗\") + \"]\" + \" \" + this.name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public static Task taskMaker(String[] arr) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    String type \u003d arr[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    boolean done \u003d arr[1].equals(\"1\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    String name \u003d arr[2];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    Task task \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    switch (type) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    case \"T\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      task \u003d new ToDo(name, done);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    case \"D\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      task \u003d new Deadlines(name, arr[3], done);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    case \"E\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      task \u003d new Event(name, arr[3], done);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return task;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 57
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a ToDo with a name"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  ToDo(String name, boolean done) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    super(name, done);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public ToDo(String name) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    this(name, false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Returns a string formatted for storage in the storage file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return String"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public String storageString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return \"T,\" + (super.getDone() ? \"1,\" : \"0,\") + super.getName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Returns a string for normal printing to represent state and details of the Task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return String"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Checks for logical equality of this instance to another object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param obj Another object in question."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return true if logically equivalent, false otherwise."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    if (this \u003d\u003d obj)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    else if (obj instanceof ToDo) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      ToDo other \u003d (ToDo) obj;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "      return this.getDone() \u003d\u003d other.getDone() \u0026\u0026 this.getName().equals(other.getName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 48
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a TaskList of Tasks that Duke currently holds."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Constructor of TaskList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param list Initial list of tasks, loaded from storage file or otherwise."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Alternate constructor if initial list of tasks is not satisfied."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method to add a new task to the TaskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param t Task to be added."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        list.add(t);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method to check if TaskList is empty."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return true if empty, false if otherwise."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return this.list.isEmpty();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method to remove Task of given index from TaskList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param index given index to be removed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return Task that is removed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return this.list.remove(index - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns current size of TaskList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return current size"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return this.list.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns Task t at given index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param index to be queried"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return Task at index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return this.list.get(index - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns a new TaskList that contains all tasks with name that contains the"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * given string."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param string to be queried."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return TaskList that contains corresponding tasks."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public TaskList find(String tofind) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        List\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        for (Task t : this.list) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            if (t.getName().contains(tofind)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                newList.add(t);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new TaskList(newList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * For every task in the TaskList, prints its corresponding string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return String containing all tasks in the TaskList"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String printAllTasks() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (this.size() !\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            StringBuilder res \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                res.append(\"\").append(count).append(\".\").append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return res.toString().trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return \"There are no tasks on your list!\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 113
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Ui class that handles all IO for the Duke application"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  private Scanner reader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Constructor for the Ui class, initiates a new Scanner instance."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public Ui() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    reader \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Prints out welcome message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public void showWelcome() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    System.out.println(\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Reads next command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @return String - next command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public String readCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    return reader.nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Prints line"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param line line to be printed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public static void printLine(String line) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    System.out.println(line);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Prints out error"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * @param err to be printed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public void showError(String err) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    System.out.println(err);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   * Print error when storage file is empty."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "   */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  public void showLoadingError() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    System.out.println(\"You have not stored any tasks!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 55
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  void parse_normalInputs_success() throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    assertEquals(new ListCommand(), Parser.parse(\"list\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    assertEquals(new ByeCommand(), Parser.parse(\"bye\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    assertEquals(new DoneCommand(1), Parser.parse(\"done 1\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    assertEquals(new DeleteCommand(1), Parser.parse(\"delete 1\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    assertEquals(new AddCommand(\"todo\", \"read book\"), Parser.parse(\"todo read book\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    assertEquals(new AddCommand(\"deadline\", \"finish reading\", \"23/11/2019 1800\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            Parser.parse(\"deadline finish reading /by 23/11/2019 1800\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    assertEquals(new AddCommand(\"event\", \"carnival\", \"12/9/2011 0012\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            Parser.parse(\"event carnival /at 12/9/2011 0012\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 23
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  void storageString_normalInput_success() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    ToDo current \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    assertEquals(\"T,0,read book\", current.storageString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    current.setDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    assertEquals(\"T,1,read book\", current.storageString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  void testToString_normalInput_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    ToDo current \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    assertEquals(\"[T][✗] read book\", current.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    current.setDone();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    assertEquals(\"[T][✓] read book\", current.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 24
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "andyylam": 34
    }
  }
]
