[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "xiaoyu-nus": 24
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "# Task Master Nezuko: User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "By: `Xiaoyu`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "1. [Introduction](#introduction) "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "1. [Quick Start](#quick-start) "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "1. [Features](#features) "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    1. [Viewing help: `help`](#viewing-help--help) "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    1. [Adding a todo task: `todo`](#adding-a-todo-task-todo) "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    1. [Adding a deadline task: `deadline`](#adding-a-deadline-task-deadline)  "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    1. [Adding an event task: `event`](#adding-an-event-task-event) "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    1. [Listing all tasks: `list`](#listing-all-tasks--list) "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    1. [Deleting a task: `delete`](#deleting-a-task--delete) "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    1. [Marking a task as done: `done`](#marking-a-task-as-done-done) "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    1. [Finding tasks by description: `find`](#finding-tasks-by-description-find) "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    1. [Sending a greeting: `hi`](#sending-a-greeting--hi) "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    1. [Clearing all entries: `clear`](#clearing-all-entries--clear) "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    1. [Exiting the programme: `bye`](#exiting-the-program--bye) "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    1. [Saving the date](#saving-the-data) "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    1. [Notifying on close deadlines](#notifying-on-close-deadlines) "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "1. [FAQ](#faq) "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "1. [Command Summary](#command-summary) "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Task Master Nezuko(TMN) is a handy tool for you to manage you tasks on a PC. More importantly, it is *designed for Demon Slayer and Command Line App lovers* like you. Talk to Nezuko the Task Master through a few easy-to-remember commands, you can manage you tasks in anyway you want. Let us jump to the [Quic Start](#quick-start) to get started!"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "1.  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "1.  Download the latest `taskmaster.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "1.  Copy the file to the folder you want to use as the home folder for your TM Nezuko."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "1.  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "![Demo](Ui.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "1.  Type the command in the command box and press kbd:[Enter] to execute it."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "1.  Some example commands you can try:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    * **`list`** : lists all tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    * **`deadline`** `project meeting /by 20/09/2020 1800` : adds a task `project meeting` due at `6 PM` on `20th Sept, 2020` to the Task Manager."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    * **`delete`** `3` : deletes the 3rd task in the full list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    * **`done`** `2` : marks the 2nd task in the full list as done"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "1.  Refer to [Features](#features) for details of each command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "#### Command Format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* Words in `\u003c` `\u003e` are the parameters to be supplied by the user. e.g. in `delete \u003cindex\u003e`, `index` is a parameter which can be used as `delete 3`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "#### Output Format"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* A task is formatted as follow:   "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    *`index.`*`[type][status]`*`task description`*`(timing)`\\"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "The following table summarises what each field means:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Field | Description"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "------------ | ------------"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Index | Index of task in the list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Type | `[T]`: Todo task without timing information\u003cbr\u003e`[D]`: Deadline task with a deadline\u003cbr\u003e`[E]`: Event task with two timing information marking the start and end of the event"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Status | `[x]` Task is unfinished\u003cbr\u003e`[v]` Task is finished"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Task Description | User input task description"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Timing| `(by:` *`date`* `)`: Task due by *`date`*\u003cbr\u003e`(from:` *`starting_date`* `to` *`ending_date`* `)`: Task happening between *`starting_date`* and *`ending_date`*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* e.g. in `2. [D][x] assignment 1 (by: 21/09/2019 0900 PM)`, the task _assignment 1_ is the second task in the list; it is a unfinished deadline task due by 21st Sept, 2019 at 0900 PM."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "### Adding a todo task: `todo`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "`todo` allows you to add a task without any timing information.\\"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Format: `todo \u003ctask description\u003e`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* `todo repair my fridge`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "### Adding a deadline task: `deadline`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Use this command if you have any task due before certain time or date that you want to specify.\\"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Format: `deadline \u003ctask description\u003e /by \u003cdate\u003e \u003ctime\u003e`\\"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Format date: `\u003cdd/MM/yyyy\u003e` **or** `\u003cdd/MM\u003e`\\"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Format time: `\u003chhmm\u003e`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ":bulb: "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003e Either `\u003cdate\u003e` or `\u003ctime\u003e` can be omitted. If so, the default date will be the current date, and the default time will be 1200AM."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* `deadline Lecture 6 quiz /by 28/9`\\"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Adds the task `[D][x] Lecture 6 quiz (by: 28/09/2019 1200 AM)` to your task list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* `deadline essay draft /by 2359`\\"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Adds the task `[D][x] essay draft (by: _current date_ 1159 PM)` to your task list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "### Adding an event task: `event`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Use this command if you have any activity that has a duration to happen.\\"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Format: `event \u003ctask description\u003e /from \u003cdate\u003e \u003ctime\u003e to \u003cdate\u003e \u003ctime\u003e`\\"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Format date: `\u003cdd/MM/yyyy\u003e` **or** `\u003cdd/MM\u003e`\\"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Format time: `\u003chhmm\u003e`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ":bulb:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003e Either `\u003cdate\u003e` or `\u003ctime\u003e` can be omitted. If so, the default date will be the current date, and the default time will be 1200AM."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* `event CCA interview /from 28/9 1930 to 28/9 1945`\\"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Adds the task `[E][x] CCA interview (from: 28/09/2019 0730 PM to 28/09/2019 0745 PM)` to your task list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "### Listing all tasks : `list`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Shows a list of all tasks in the task list.\\"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "### Deleting a task : `delete`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Deletes a existing task from the task list.\\"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Format: `delete \u003cindex\u003e`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* `delete 1`\\"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Deletes the 1st task in the task list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "### Marking a task as done: `done`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Marks a task as done in the task list.\\"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Format: `done \u003cindex\u003e`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* `done 1`\\"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Marks the 1st task in the task list as done."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "### Finding tasks by description: `find`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Finds tasks whose description contain the given keyword/phrase.\\"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Format: `find \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "****"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* The search is case insensitive. e.g `lecture` will match `Lecture`."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* Only one exact keyword or phrase can be searched at one time. e.g. `do homework` will not match `do laundry` or `do coding homework`, but will match `do homework with Ben`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* Only the description is searched."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* Partial words will be matched. e.g. `CS` will match `CS2103` and `CS2101`."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "****"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* `find meetings`\\"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Returns `Project Meetings` and `meeting at U Town`."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* `find to buy:`\\"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Returns `to buy: shoes` and `to buy: notepad`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "### Sending a greeting : `hi`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Sends a greeting to Nezuko and see what she replies!"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "### Clearing all entries : `clear`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Clears all entries from the task list.\\"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "### Exiting the program : `bye`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Exits the programme.\\"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Task Master data are saved in the hard disk automatically after any command that changes the data.\\"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "### Notifying on close deadlines"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Nezuko will sort and find a few most urgent unfinished tasks for you and alert you on the matter at the start of the programme.\\"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Todo tasks have the lowest priority."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "**Q**: What is the default number of tasks that I will be reminded of at the start of the programme?\\"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "**A**: The default number is 5. We are sorry that the number of tasks to remind cannot be modified in this version of TM Nezuko. We welcome you to look out for future updates."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* **Todo** `todo \u003ctask description\u003e`\\"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "e.g. `todo watch a movie`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* **Deadline** `deadline \u003ctask description\u003e /by \u003cdate\u003e \u003ctime\u003e`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "e.g. `deadline Lecture 6 quiz /by 28/9 0900`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* **Event** `event \u003ctask description\u003e /from \u003cdate\u003e \u003ctime\u003e to \u003cdate\u003e \u003ctime\u003e`\\"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "e.g. `event CCA interview /from 28/9 1930 to 28/9 1945`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* **Clear** : `clear`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* **Delete** : `delete \u003cindex\u003e`\\"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* **Done** : `done \u003cindex\u003e`\\"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "e.g. `done 5`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* **Find** : `find \u003ckeyword\u003e`\\"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "e.g. `find assignment`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* **List** : `list`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* **Hi**: `hi`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "* **Help** : `help`"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "xiaoyu-nus": 201
    }
  },
  {
    "path": "runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 21
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.exception.DukeIoException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.sheet.Sheet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Sheet sheet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Sheet getSheet() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return sheet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private MainWindow mw;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Constructs a Duke object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param pathToFile Path to file storing the task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param mw         MainWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Duke(String pathToFile, MainWindow mw) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.mw \u003d mw;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.ui \u003d new Ui(mw);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        storage \u003d new Storage(pathToFile);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            sheet \u003d new Sheet(storage.load());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } catch (DukeIoException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Starts the Duke programme."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            assert mw !\u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            String fullCommand \u003d mw.getInput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            if (c.isExit()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            c.execute(sheet, ui, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "xiaoyu-nus": 62
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.MyPaths.ICON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.MyPaths.MAIN_WINDOW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String APP_TITLE \u003d \"Conversation with Nezuko the Task Master\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(MAIN_WINDOW));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            stage.setTitle(APP_TITLE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            stage.getIcons().add(new Image(Main.class.getResourceAsStream(ICON)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            MainWindow mw \u003d fxmlLoader.getController();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            Duke duke \u003d new Duke(MyPaths.TASK_LIST, mw);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            mw.setDuke(duke);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            mw.displayReminder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 41
    }
  },
  {
    "path": "src/main/java/duke/MyPaths.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Wraps paths to files."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class MyPaths {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Path to task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    static final String TASK_LIST \u003d \"src/main/data/tasks.txt\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    static final String MAIN_WINDOW \u003d \"/view/MainWindow.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    static final String ICON \u003d \"/images/icon.png\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String USER_PROFILE \u003d \"/images/Tanjiro.png\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String MANAGER_PROFILE \u003d \"/images/Nezuko.png\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 18
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.sheet.Sheet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Parent class of various allowed commands in Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Constructs a Command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param command String of user input without the command head."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Command(String command) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Instructs Sheet to execute the commend, Storage to update the file, and Ui to print message, if necessary."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param sh   Sheet object to carry out the command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param ui   Ui object to print the message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param stor Storage object to update the change to file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @throws DukeException If error occurs when accessing the file by Storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public abstract void execute(Sheet sh, Ui ui, Storage stor) throws DukeException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Checks whether the command is an exit command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return True if the command is an exit command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * ToString method that returns the String representation of the object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return String representation of the Command object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return type + command;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 53
    }
  },
  {
    "path": "src/main/java/duke/command/CommandClear.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.sheet.Sheet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulates a command from user input String \"clear\"."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class CommandClear extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public CommandClear(String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super.type \u003d \"Clear: \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void execute(Sheet sh, Ui ui, Storage stor) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ui.showClearList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        sh.clearList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        stor.save(sh.getList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 27
    }
  },
  {
    "path": "src/main/java/duke/command/CommandDeadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.command.Messages.MSG_MISSING_DEADLINE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.command.Messages.MSG_MISSING_TASK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.date.DateUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.sheet.Sheet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulates a command from user input String \"deadline\"."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class CommandDeadline extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String REGEX \u003d \"/by\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public CommandDeadline(String command) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super.type \u003d \"Deadline: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void execute(Sheet sh, Ui ui, Storage stor) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String[] commands \u003d command.split(REGEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (this.command.isBlank() || command.indexOf(\"/\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            throw new MissingDescriptionException(MSG_MISSING_TASK);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } else if (commands.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            throw new MissingDescriptionException(MSG_MISSING_DEADLINE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            String description \u003d commands[0].trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            String deadline \u003d commands[1].trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            Task dlTask \u003d new Deadline(description, DateUtil.toTime(deadline));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            sh.add(dlTask);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            ui.showAdd(dlTask.toString().trim(), sh.getNumOfTask());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            stor.save(sh.getList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 45
    }
  },
  {
    "path": "src/main/java/duke/command/CommandDelete.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.command.Messages.MSG_EMPTY_LIST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.command.Messages.MSG_ILLEGAL_ENTRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.command.Messages.MSG_MISSING_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.command.Messages.MSG_NON_POSITIVE_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.command.Messages.MSG_TASK_INDEX_EXCEEDED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.exception.IllegalTaskIndexException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.exception.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.sheet.Sheet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulates a command from user input String \"delete\"."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class CommandDelete extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public CommandDelete(String command) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super.type \u003d \"Delete: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void execute(Sheet sh, Ui ui, Storage stor) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            if (command.isBlank()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                throw new MissingDescriptionException(MSG_MISSING_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            int index \u003d Integer.parseInt(command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            if (index \u003e sh.getNumOfTask()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                if (sh.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                    throw new TaskNotFoundException(MSG_EMPTY_LIST);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                    throw new TaskNotFoundException(String.format(MSG_TASK_INDEX_EXCEEDED, sh.getNumOfTask()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            if (index \u003c 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                throw new TaskNotFoundException(MSG_NON_POSITIVE_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            Task removed \u003d sh.delete(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            ui.showRemove(removed.toString().trim(), sh.getNumOfTask());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            stor.save(sh.getList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            throw new IllegalTaskIndexException(MSG_ILLEGAL_ENTRY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 55
    }
  },
  {
    "path": "src/main/java/duke/command/CommandDone.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.command.Messages.MSG_EMPTY_LIST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.command.Messages.MSG_ILLEGAL_ENTRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.command.Messages.MSG_MISSING_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.command.Messages.MSG_NON_POSITIVE_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.command.Messages.MSG_TASK_INDEX_EXCEEDED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.exception.IllegalTaskIndexException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.exception.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.sheet.Sheet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulates a command from user input String \"done\"."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class CommandDone extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public CommandDone(String cmd) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(cmd);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super.type \u003d \"Done: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void execute(Sheet sh, Ui ui, Storage stor) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            if (command.isBlank()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                throw new MissingDescriptionException(MSG_MISSING_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            int index \u003d Integer.parseInt(command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            if (index \u003e sh.getNumOfTask()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                if (sh.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                    throw new TaskNotFoundException(MSG_EMPTY_LIST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                    throw new TaskNotFoundException(String.format(MSG_TASK_INDEX_EXCEEDED, sh.getNumOfTask()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            if (index \u003c 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                throw new TaskNotFoundException(MSG_NON_POSITIVE_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            Task doneTask \u003d sh.markAsDone(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            ui.showDone(doneTask.toString().trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            stor.save(sh.getList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            throw new IllegalTaskIndexException(MSG_ILLEGAL_ENTRY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 56
    }
  },
  {
    "path": "src/main/java/duke/command/CommandEvent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.command.Messages.MSG_MISSING_EVENT_SPAN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.command.Messages.MSG_MISSING_TASK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.date.DateUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.sheet.Sheet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulates a command from user input String \"event\"."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class CommandEvent extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String REGEX \u003d \"(/from)|(to)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public CommandEvent(String cmd) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(cmd);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super.type \u003d \"Event: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void execute(Sheet sh, Ui ui, Storage stor) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String[] commands \u003d command.split(REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (this.command.isBlank() || command.indexOf(\"/\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            throw new MissingDescriptionException(MSG_MISSING_TASK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } else if (commands.length \u003c 3) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            throw new MissingDescriptionException(MSG_MISSING_EVENT_SPAN);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            String description \u003d commands[0].trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            String start \u003d commands[1].trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            String end \u003d commands[2].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            Task evTask \u003d new Event(description, DateUtil.toTime(start), DateUtil.toTime(end));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            sh.add(evTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            ui.showAdd(evTask.toString().trim(), sh.getNumOfTask());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            stor.save(sh.getList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 47
    }
  },
  {
    "path": "src/main/java/duke/command/CommandExit.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.sheet.Sheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulates a command from user input String \"bye\"."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class CommandExit extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public CommandExit(String cmd) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(cmd);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super.type \u003d \"Exit: \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void execute(Sheet sh, Ui ui, Storage stor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ui.showGoodbye();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 29
    }
  },
  {
    "path": "src/main/java/duke/command/CommandFind.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.command.Messages.MSG_MISSING_KEYWORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.sheet.Sheet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulates a command from user input String \"find\"."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class CommandFind extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public CommandFind(String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super.type \u003d \"Find: \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void execute(Sheet sh, Ui ui, Storage stor) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (this.command.isBlank()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            throw new MissingDescriptionException(MSG_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String found \u003d sh.find(this.command.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ui.showSearch(found);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 32
    }
  },
  {
    "path": "src/main/java/duke/command/CommandHi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.sheet.Sheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulates a command from user input String \"hi\"."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class CommandHi extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"hi\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public CommandHi(String command) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super.type \u003d \"Hi: \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void execute(Sheet sh, Ui ui, Storage stor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ui.sayHi();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 24
    }
  },
  {
    "path": "src/main/java/duke/command/CommandList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.sheet.Sheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulates a command from user input String \"list\"."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class CommandList extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public CommandList(String command) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super.type \u003d \"List: \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void execute(Sheet sh, Ui ui, Storage stor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String list \u003d sh.showList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ui.showList(list);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 25
    }
  },
  {
    "path": "src/main/java/duke/command/CommandTodo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.command.Messages.MSG_MISSING_TASK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.sheet.Sheet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulates a command from user input String \"todo\"."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class CommandTodo extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public CommandTodo(String command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super.type \u003d \"Todo: \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void execute(Sheet sh, Ui ui, Storage stor) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (this.command.isBlank()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            throw new MissingDescriptionException(MSG_MISSING_TASK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Task todoTask \u003d new Todo(command.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        sh.add(todoTask);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ui.showAdd(todoTask.toString().trim(), sh.getNumOfTask());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        stor.save(sh.getList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 36
    }
  },
  {
    "path": "src/main/java/duke/command/IllegalCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.command.Messages.MSG_ILLEGAL_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.exception.IllegalCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.sheet.Sheet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulates a command from user input String is not recognized as a valid command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class IllegalCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public IllegalCommand(String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super.type \u003d \"Illegal: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void execute(Sheet sh, Ui ui, Storage stor) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        throw new IllegalCommandException(MSG_ILLEGAL_COMMAND);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 26
    }
  },
  {
    "path": "src/main/java/duke/command/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    static final String MSG_MISSING_TASK \u003d \"\u003e \u003c Oh! Did you forget to add the task?\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    static final String MSG_MISSING_DEADLINE \u003d \"\u003e \u003c OOPS!! Did you forget to add the deadline?\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    static final String MSG_MISSING_EVENT_SPAN \u003d \"\u003e \u003c OOPS!! The span of event seems incomplete.\\nPlease enter\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            + \"in the format of /from dd/MM/yyyy hhmm /to dd/MM/yyyy hhmm.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    static final String MSG_MISSING_KEYWORD \u003d \"\u003e \u003c Sorry, I did not catch your search keyword.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    static final String MSG_MISSING_INDEX \u003d \"Oh! Did you forget to add the task index?\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    static final String MSG_EMPTY_LIST \u003d \"\u003e \u003c Oops! The list is empty.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    static final String MSG_TASK_INDEX_EXCEEDED \u003d \"\u003e \u003c Oops! The list contains only %d task(s).\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    static final String MSG_NON_POSITIVE_INDEX \u003d \"\u003e \u003c Oops! We don\u0027t seem to have non-positive task index.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    static final String MSG_ILLEGAL_ENTRY \u003d \"\u003e \u003c Oops! Nezuko cannot recognise that task index.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    static final String MSG_ILLEGAL_COMMAND \u003d \"\u003e \u003c Sorry, Nezuko doesn\u0027t know what that means.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 21
    }
  },
  {
    "path": "src/main/java/duke/command/exception/IllegalCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.command.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulate the exception thrown when user input is not recognised as a valid command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class IllegalCommandException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public IllegalCommandException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 13
    }
  },
  {
    "path": "src/main/java/duke/command/exception/IllegalTaskIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.command.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulate the exception thrown when task index entered is not an integer."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class IllegalTaskIndexException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public IllegalTaskIndexException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 13
    }
  },
  {
    "path": "src/main/java/duke/command/exception/MissingDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.command.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulate the exception thrown when task description is not found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class MissingDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Constructs the TaskNotFoundException object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param msg Message of the exception."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public MissingDescriptionException(String msg) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 19
    }
  },
  {
    "path": "src/main/java/duke/command/exception/TaskNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.command.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulate the exception thrown when user\u0027s query index for task exceeds the number of tasks on the list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class TaskNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Constructs the TaskNotFoundException object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param msg Message of the exception."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public TaskNotFoundException(String msg) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 19
    }
  },
  {
    "path": "src/main/java/duke/date/DateUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.date.exception.IllegalTimeFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Contains utility functions for handling input and output time String."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final int DATE_TEMPLATE_SIZE \u003d 5;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String DEFAULT_TIME \u003d \"00\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String MSG_ILLEGAL_TIME \u003d \"\u003e \u003c Sorry, I couldn\u0027t recognise the time.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            + \"Enter time in the format of \u0027dd/MM/yyyy hhmm\u0027\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String DATE_FORMAT_PATTERN \u003d \"dd/MM/yyyy, hh:mm a\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Creates a LocalDateTime object form its String representation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param s String representation of the LocalDateTime object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return LocalDateTime object represented by the input String."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @throws IllegalTimeFormatException If the input String is not convertible to a LocalDateTime object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static LocalDateTime toTime(String s) throws IllegalTimeFormatException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String[] formattedTime \u003d formatTimeString(s);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return toLocalDateTime(formattedTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static String[] formatTimeString(String s) throws IllegalTimeFormatException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        // split date and time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String[] dateTime \u003d s.trim().split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (!s.contains(\"/\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            // user only inputs time \"hhmm\", without date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return formatTimeOnly(dateTime[0]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            // user enters both date and time."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return formatAll(dateTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static String[] makeDateTemplate(String[] strings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String[] temp \u003d new String[DATE_TEMPLATE_SIZE];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        for (int i \u003d 0; i \u003c DATE_TEMPLATE_SIZE; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            if (i \u003e\u003d strings.length) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                temp[i] \u003d DEFAULT_TIME;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            temp[i] \u003d strings[i];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static String[] formatTimeOnly(String string) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String[] template \u003d new String[DATE_TEMPLATE_SIZE];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        for (int i \u003d 0; i \u003c DATE_TEMPLATE_SIZE; i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            template[i] \u003d DEFAULT_TIME;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        template[DATE_TEMPLATE_SIZE - 2] \u003d string.substring(0, 2); // set hh"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        template[DATE_TEMPLATE_SIZE - 1] \u003d string.substring(2); // set mm"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return template;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static String[] formatAll(String[] strings) throws IllegalTimeFormatException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String[] date \u003d strings[0].split(\"/\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String[] template \u003d makeDateTemplate(date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (strings.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            // no time input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            template[DATE_TEMPLATE_SIZE - 2] \u003d DEFAULT_TIME; // set hh"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            template[DATE_TEMPLATE_SIZE - 1] \u003d DEFAULT_TIME; // set mm"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            String time \u003d strings[1];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            if (time.length() \u003c 3) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                // time is not entered in the format of hhmm."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                throw new IllegalTimeFormatException(MSG_ILLEGAL_TIME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            template[DATE_TEMPLATE_SIZE - 2] \u003d time.substring(0, 2); // set hh"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            template[DATE_TEMPLATE_SIZE - 1] \u003d time.substring(2); // set mm"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return template;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static LocalDateTime toLocalDateTime(String[] times) throws IllegalTimeFormatException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            LocalDateTime current \u003d LocalDateTime.now(); // default date is the current date"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            int year \u003d times[2].equals(DEFAULT_TIME) ? current.getYear() : Integer.parseInt(times[2]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            int month \u003d times[1].equals(DEFAULT_TIME) ? current.getMonth().getValue() : Integer.parseInt(times[1]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            int day \u003d times[0].equals(DEFAULT_TIME) ? current.getDayOfMonth() : Integer.parseInt(times[0]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            int hour \u003d Integer.parseInt(times[3]); // default time is 1200 AM"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            int minute \u003d Integer.parseInt(times[4]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return LocalDateTime.of(year, month, day, hour, minute);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } catch (DateTimeException | NumberFormatException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            throw new IllegalTimeFormatException(MSG_ILLEGAL_TIME);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Output the String representation of the date and time stored in the LocalDateTime object in desired format."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param dt LocalDateTime object to be printed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return Formatted String representation of the date and time stored in the LocalDateTime object."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static String printTime(LocalDateTime dt) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        DateTimeFormatter customFormatter \u003d DateTimeFormatter.ofPattern(DATE_FORMAT_PATTERN);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return dt.format(customFormatter);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 111
    }
  },
  {
    "path": "src/main/java/duke/date/exception/IllegalTimeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.date.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulate the exception thrown when user time input is not recognised."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class IllegalTimeFormatException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Constructs the IllegalTimeFormatException object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param msg Message of the exception."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public IllegalTimeFormatException(String msg) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Customised exceptions in the app."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Constructs a DukeException object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param msg Message of the exception."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.message \u003d msg;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public String getMessege() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 23
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeIoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulate the exception thrown when errors occurs when accessing the list file."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class DukeIoException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public DukeIoException(String msg) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 11
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.CommandDelete;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.CommandExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.CommandList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.CommandDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.CommandClear;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.CommandHi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.CommandTodo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.CommandDeadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.CommandEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.CommandFind;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.IllegalCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Deals with making sense of the user command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Parses the user input String into executable commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param cmd User input String."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return new Command object encapsulating the user\u0027s command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public static Command parse(String cmd) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String[] cmds \u003d cmd.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String command \u003d cmds[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String detail \u003d concatCommand(cmds);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        case CommandExit.COMMAND_WORD:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return new CommandExit(detail);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        case CommandList.COMMAND_WORD:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return new CommandList(detail);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        case CommandDelete.COMMAND_WORD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return new CommandDelete(detail);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        case CommandDone.COMMAND_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return new CommandDone(detail);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        case CommandTodo.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return new CommandTodo(detail);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        case CommandDeadline.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return new CommandDeadline(detail);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        case CommandEvent.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return new CommandEvent(detail);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        case CommandFind.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return new CommandFind(detail);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        case CommandHi.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return new CommandHi(detail);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        case CommandClear.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return new CommandClear(detail);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return new IllegalCommand(detail);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static String concatCommand(String[] strs) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assert strs !\u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        for (int i \u003d 1; i \u003c strs.length; i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            output.append(strs[i]).append(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return output.toString().trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 65
    }
  },
  {
    "path": "src/main/java/duke/reminder/Reminder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.sheet.Sheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Calls a reminder at the start of the programme listing specified number of tasks based on their proximity"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * to deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Sheet sh;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Reminder(Sheet sh, Ui ui) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.sh \u003d sh;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Calls a reminder at the start of the programme listing specified number of tasks based on their proximity"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * to deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param numOfTask Specified number of tasks to remind;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void remind(int numOfTask) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String sortedTask \u003d sh.sortList(numOfTask);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ui.showReminder(sortedTask);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 30
    }
  },
  {
    "path": "src/main/java/duke/sheet/Sheet.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.sheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulates a sheet for the list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Includes operations to add/delete tasks in the list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class Sheet {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private int numOfTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Construct a task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param tasks List of tasks contained the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Sheet(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        numOfTask \u003d tasks.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param task Task to be added to the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        numOfTask++;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Deletes a task from the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param index Serial index of the task in list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Task delete(int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Task removed \u003d tasks.remove(index - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        numOfTask--;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return removed;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Checks whether the task list is empty."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return True if the task list is empty."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return this.tasks.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param index Serial index of the task in list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Task markAsDone(int index) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Task doneTask \u003d tasks.get(index - 1).finish();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        tasks.set(index - 1, doneTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return doneTask;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Outputs the number of tasks in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return int Number of tasks in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public int getNumOfTask() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return numOfTask;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Outputs the task list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return String representation of the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public String showList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfTask; i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            sb.append(\" \").append(i + 1).append(\". \").append(tasks.get(i).toString().trim()).append(\"\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Sorts the tasks in the list and outputs the required number of tasks."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param requiredNum Required number of tasks."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return String representation of the sorted first few tasks."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public String sortList(int requiredNum) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        int numOfReminder \u003d Math.min(requiredNum, numOfTask);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        List\u003cTask\u003e sortedList \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Collections.sort(sortedList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        int j \u003d 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        while (i \u003c numOfReminder \u0026\u0026 j \u003c numOfTask) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            if (sortedList.get(j).isDone()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                j++;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            sb.append(\" \").append(i + 1).append(\". \").append(sortedList.get(j).toString().trim()).append(\"\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            j++;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (sb.toString().isBlank()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            sb.append(\"There are currently no urgent tasks~\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            sb.append(\"Don\u0027t miss them! \u003e \u003c\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Remove all tasks from the task list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        numOfTask \u003d 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Searches for tasks containing the keyword."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param keyword Keyword for searching."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public String find(String keyword) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            if (task.getDescription().toLowerCase().contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                sb.append(\" \").append(count).append(\". \").append(task.toString().trim()).append(\"\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            sb.append(\"\u003e \u003c Sorry, nothing has been found.\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * ToString method of the sheet object."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return String representation of the sheet of task list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfTask; i++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            output.append(i + 1).append(\". \").append(tasks.get(i).toString());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return output.toString().trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 170
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.exception.DukeIoException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.io.EOFException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private String pathToFile;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String MSG_IOE_EXCEPTION \u003d \"Sorry, something went wrong reading the file. \u003e \u003c\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Constructs a Storage object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param pathToFile Path to the file accessed by the Storage object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Storage(String pathToFile) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.pathToFile \u003d pathToFile;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Loads the task list as a List of Task from the local file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return List of Task objects."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @throws DukeIoException If errors occurs when accessing the file that contains the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeIoException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            //Solution below adapted from https://github.com/podocarp/duke.git"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            File f \u003d new File(pathToFile);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            FileInputStream fileInputStream \u003d new FileInputStream(pathToFile);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            ObjectInputStream objectInputStream \u003d new ObjectInputStream(fileInputStream);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            taskList \u003d (ArrayList\u003cTask\u003e) objectInputStream.readObject();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            objectInputStream.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } catch (EOFException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            throw new DukeIoException(MSG_IOE_EXCEPTION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Outputs a List of Task as a local copy of txt file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param lst Task list to be saved."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @throws DukeIoException If errors occurs when accessing the file that contains the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void save(List\u003cTask\u003e lst) throws DukeIoException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            FileOutputStream fileOutputStream \u003d new FileOutputStream(pathToFile);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            ObjectOutputStream objectOutputStream \u003d new ObjectOutputStream(fileOutputStream);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            objectOutputStream.writeObject(lst);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            objectOutputStream.close();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            throw new DukeIoException(MSG_IOE_EXCEPTION);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 79
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.date.DateUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * A task that takes in one LocalDateTime as the deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Constructs an unfinished Deadline object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param deadline    Date and time by which the task is due."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Deadline(String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Constructs a Deadline object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param description Descriptio of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param deadline    Date and time by which the task is due."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param isDone      True if the task is finished."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Deadline(String description, LocalDateTime deadline, boolean isDone) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Returns the deadline of this Deadline object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return Deadline of this task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    protected LocalDateTime getTime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return New finished task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Deadline finish() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return new Deadline(this.getDescription(), this.deadline, true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * ToString method for printing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return String representation of the deadline object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return \"[D]\" + \"[\" + this.getStatusIcon() + \"] \" + this.getDescription()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                + \" (by: \" + DateUtil.printTime(deadline) + \")\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 66
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.date.DateUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * A Task object that has two LocalDateTime inputs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * The first LocalDateTime represents the date and time when the event starts."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * The second LocalDateTime represents the date and time when the event ends."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private LocalDateTime startTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private LocalDateTime endTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Constructs an unfinished Event object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param start       Date and time when the event starts."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param end         Date and time when the event ends."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Event(String description, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.startTime \u003d start;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.endTime \u003d end;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Constructs an Event object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param start       Date and time when the event starts."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param end         Date and time when the event ends."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param isDone      True if the taks is finished."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Event(String description, LocalDateTime start, LocalDateTime end, boolean isDone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.startTime \u003d start;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.endTime \u003d end;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Returns the starting time of this Event object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return Starting time of this event object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    protected LocalDateTime getTime() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return New finished task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Event finish() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return new Event(this.getDescription(), startTime, endTime, true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * ToString method for printing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return String representation of the event object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return \"[E]\" + \"[\" + this.getStatusIcon() + \"] \" + this.getDescription()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                + \" (from: \" + DateUtil.printTime(startTime)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                + \", to \" + DateUtil.printTime(endTime) + \")\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 74
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Encapsulates a task object containing task description and task status."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class Task implements Comparable\u003cTask\u003e, Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String TICK \u003d \"v\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String CROSS \u003d \"x\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Constructs a unspecified and unfinished Task object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Constructs a unspecified Task object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param isDone      True if the task is finished."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Task(String description, Boolean isDone) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return New finished task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Task finish() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return new Task(this.description, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Returns the a LocalDateTime object associated with this task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Starting Time for an Event object. Deadline for a Class Deadline} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Max value for a Class Todo object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return LocalDateTime object associated with this task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    protected LocalDateTime getTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return LocalDateTime.MAX;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Compares this task to another task. Comparison is based on the ordering of the time at which the task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * is due to take place."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Todo task has the lowest priority."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param other The other task to compare to, not null"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return Difference in the time of the two tasks, if applicable."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public int compareTo(Task other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return this.getTime().compareTo(other.getTime());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Outputs the description of the task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return Description of the task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Returns whether the task is finished."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return true if the task is finished."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Outputs as a String the status of task."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Tick for done; Cross for not done."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return String symbol of the status of task."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    String getStatusIcon() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return (isDone ? TICK : CROSS); //return tick or X symbols"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * ToString method for printing."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return String representation of the Task object."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description + \"\\n\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 111
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * A Task object that contains no date and time information."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Constructs an unfinished Todo task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Constructs a Todo task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param isDone      True if the task is finished."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return New finished task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Todo finish() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return new Todo(getDescription(), true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * ToString method for printing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return String representation of the deadline object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 46
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Node box \u003d this.getChildren().get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        ObservableList\u003cNode\u003e tmp;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (box instanceof HBox) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            tmp \u003d FXCollections.observableArrayList(((HBox) box).getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            ((HBox) box).getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            ((HBox) box).setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Flips the dialogBox."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param text Text in the box."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param img  Image in the box."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @return Flipped DialogBox."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 73
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.MyPaths.MANAGER_PROFILE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static duke.MyPaths.USER_PROFILE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.reminder.Reminder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.ui.DialogBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(USER_PROFILE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(MANAGER_PROFILE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String MSG_WELCOME \u003d \"Hello! I\u0027m Nezuko \u003e\u003c\\n\" + \"What can I do for you?\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static int numberOfReminder \u003d 5;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Initializes a MainWindow object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                DialogBox.getDukeDialog(MSG_WELCOME, dukeImage));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Displays the reminder in a dialogue box."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void displayReminder() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assert duke !\u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Reminder reminder \u003d new Reminder(duke.getSheet(), duke.getUi());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        reminder.remind(numberOfReminder);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Sets the maximum number of tasks to remind at the start of the programme."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param num maximum number of tasks to remind"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void setNumberOfReminder(int num) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        numberOfReminder \u003d num;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        return this.userInput.getText();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                DialogBox.getUserDialog(input, userImage)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        );"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        duke.start();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    void displayMsg(String response) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(response, dukeImage));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 92
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " * Contains responses and interactions with the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String MSG_REMINDER \u003d \"Nezuko has found a few urgent tasks:\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String MSG_BYE \u003d \"Bye-bye~ Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String MSG_HI \u003d \"Hi! Say Something to me!\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String MSG_DONE \u003d \"Nice! I\u0027ve marked this task as done: \\n \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String MSG_SHOW_ADD \u003d \"Got it. I\u0027ve added this task: \\n \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String MSG_LIST \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String MSG_SEARCH \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String MSG_REMOVE \u003d \"Noted. I\u0027ve removed this task:\\n \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String MSG_LOADING_ERROR \u003d \"Oops, something went wrong with Nezuko \u003e\u003c\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String MSG_TASK_NUM_SINGULAR \u003d \"Now you have %d task in the list.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String MSG_TASK_NUM_PLURAL \u003d \"Now you have %d tasks in the list.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private static final String MSG_CLEAR \u003d \"Great! I\u0027ve removed all your tasks!\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private MainWindow mw;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public Ui(MainWindow mw) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        this.mw \u003d mw;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void showGoodbye() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        mw.displayMsg(MSG_BYE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void sayHi() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        mw.displayMsg(MSG_HI);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Displays a finished task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param doneTask Task done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void showDone(String doneTask) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        mw.displayMsg(MSG_DONE + doneTask + \"\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Displays a newly added task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param task Task added."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void showAdd(String task, int num) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        mw.displayMsg(MSG_SHOW_ADD + task + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                + showCount(num));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Displays a header for the task list contends."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void showList(String str) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        mw.displayMsg(MSG_LIST + str);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Displays a header for the task search."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void showSearch(String str) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        mw.displayMsg(MSG_SEARCH + str);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Displays a task removed from the task list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param removed Task removed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void showRemove(String removed, int num) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        mw.displayMsg(MSG_REMOVE + removed + \"\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                + showCount(num));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        mw.displayMsg(message + \"\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Displays and error message when the file is unable to be loaded."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        mw.displayMsg(MSG_LOADING_ERROR);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    private String showCount(int numOfTask) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (numOfTask \u003c 2) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return String.format(MSG_TASK_NUM_SINGULAR, numOfTask);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            return String.format(MSG_TASK_NUM_PLURAL, numOfTask);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Displays a header for the clear command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void showClearList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        mw.displayMsg(MSG_CLEAR);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * Displays the sorted tasks as a reminder."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     * @param sortedTask String representation of the sorted tasks."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void showReminder(String sortedTask) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        mw.displayMsg(MSG_REMINDER + sortedTask);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 113
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.Cursor?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" fillHeight\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"338.0\" type\u003d\"HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003cjavafx.scene.layout.HBox alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: rgba(255,255,255,0.85); -fx-background-radius: 20,20,20,20;\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cInsets left\u003d\"13.0\" right\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003cImageView fx:id\u003d\"displayPicture\" fitWidth\u003d\"70.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003ccursor\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "                  \u003cCursor fx:constant\u003d\"HAND\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "               \u003c/cursor\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003c/javafx.scene.layout.HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 41
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.Cursor?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"529.0\" prefWidth\u003d\"403.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"0.6666666666666643\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-radius: 5,4,3,5; -fx-background-color: #91C7E1,linear-gradient(#e1f8ff 0%, #c3e5f3 20%, #91C7E1 100%),        linear-gradient(#e1f8ff, #b2c9eb),        radial-gradient(center 50% 0%, radius 100%, rgba(233,233,233,0.9), rgba(255,255,255,0)); -fx-background-insets: 0,1,2,0; -fx-effect: dropshadow( three-pass-box , rgba(0,0,0,0.6) , 5, 0.0 , 0 , 1 );\" text\u003d\"Send\" textAlignment\u003d\"CENTER\" textOverrun\u003d\"CLIP\" AnchorPane.bottomAnchor\u003d\"0.6666666666666643\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003ccursor\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003cCursor fx:constant\u003d\"HAND\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003c/cursor\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" prefHeight\u003d\"392.0\" prefWidth\u003d\"435.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"42.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"-0.3333333333333144\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"441.0\" prefWidth\u003d\"507.0\" style\u003d\"-fx-background-image: url(\u0027file:C:/Users/User/Desktop/folders/schoolwork/Y2S1/CS2103/IP/duke/src/main/resources/images/background.png\u0027); -fx-background-size: 100%;\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 27
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.CommandDelete;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.CommandHi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.CommandTodo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.CommandFind;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.command.IllegalCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void parseTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Command cmd1 \u003d new CommandHi(\"\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Command cmd2 \u003d Parser.parse(\"hi\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertEquals(cmd1.toString(), cmd2.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Command cmd3 \u003d new CommandDelete(\"4\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Command cmd4 \u003d Parser.parse(\"delete 4\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertEquals(cmd3.toString(), cmd4.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Command cmd5 \u003d new CommandFind(\"fish\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Command cmd6 \u003d Parser.parse(\"find fish\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertEquals(cmd5.toString(), cmd6.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Command cmd7 \u003d new CommandTodo(\"learn CS2103\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Command cmd8 \u003d Parser.parse(\"todo learn CS2103\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertEquals(cmd7.toString(), cmd8.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Command cmd9 \u003d new IllegalCommand(\"to learn CS2103\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Command cmd10 \u003d Parser.parse(\"how to learn CS2103\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertEquals(cmd9.toString(), cmd10.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 36
    }
  },
  {
    "path": "src/test/java/SheetTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.sheet.Sheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class SheetTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void addTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        List\u003cTask\u003e lst1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        List\u003cTask\u003e lst2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Task t1 \u003d new Todo(\"task1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Task t2 \u003d new Todo(\"task2\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        lst1.add(t1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        lst2.add(t1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        lst2.add(t2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Sheet sh1 \u003d new Sheet(lst1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Sheet sh2 \u003d new Sheet(lst2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        sh1.add(t2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertEquals(sh2.toString(), sh1.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void deleteTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        List\u003cTask\u003e lst1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        List\u003cTask\u003e lst2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Task t1 \u003d new Todo(\"task1\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Task t2 \u003d new Todo(\"task2\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        lst1.add(t1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Sheet sh1 \u003d new Sheet(lst1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Sheet sh2 \u003d new Sheet(lst2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        sh1.delete(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertEquals(sh2.toString(), sh1.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void markAsDoneTest() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        List\u003cTask\u003e lst1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        List\u003cTask\u003e lst2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Task t1 \u003d new Todo(\"task1\").finish();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Task t2 \u003d new Todo(\"task2\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        lst1.add(t1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        lst2.add(t1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Sheet sh1 \u003d new Sheet(lst1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Sheet sh2 \u003d new Sheet(lst2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        sh2.markAsDone(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertEquals(sh2.toString(), sh1.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    public void isEmptyTest() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        List\u003cTask\u003e lst1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Sheet sh1 \u003d new Sheet(lst1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        String isEmpty \u003d \"false\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        if (sh1.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            isEmpty \u003d \"true\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertEquals(\"true\", isEmpty);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 70
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    void compareToTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        LocalDateTime early \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        LocalDateTime later \u003d LocalDateTime.now().plusDays(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Task deadline1 \u003d new Deadline(\"homework\", early);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        Task deadline2 \u003d new Deadline(\"assignment\", later);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "        assertEquals(early.compareTo(later), deadline1.compareTo(deadline2));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xiaoyu-nus": 20
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `Duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Next, we create another Java class, `duke.Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "The `duke.Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class duke.Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Run `duke.Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 106,
      "xiaoyu-nus": 4
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `duke.Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `duke.Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Now, we can go back to the `duke.Main` class and change the event handler to use our new `DialogBox`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 240,
      "xiaoyu-nus": 3
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "   Why does `duke.Main` need to know that `DialogBox` needs a `Label`?"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "   The `duke.Main` class attempts to do it all."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Let\u0027s create a new `duke.Main` class as the bridge between the existing logic in `Duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "**duke.Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "public class duke.Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(duke.Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "The last change that we have to make is to point our `duke.Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "In `duke.Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "xiaoyu-nus"
        },
        "content": "Application.launch(duke.Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 285,
      "xiaoyu-nus": 9
    }
  }
]
