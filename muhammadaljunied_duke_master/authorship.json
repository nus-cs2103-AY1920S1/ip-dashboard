[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Duke was built using JDK 11, thus the JRE that comes together with JDK 11 needs to be set as the default JVM when running the JAR. You will need to install the JDK 11 for your Respective operating system from here :"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[Download JDK 11](https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Duke runs on Windows, MacOS and Linux."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "#Duke UI"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003cimg src\u003d\"/docs/Ui.png\" width\u003d\"800px\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "# User Guide "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Please refer to the [User Guide](docs/README.md) on how to get started!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* If you have feedback or bug reports, please post in [muhammadaljunied/duke issue tracker](https://github.com/muhammadaljunied/duke/issues)"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 13,
      "-": 7
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    archiveVersion \u003d \"0.2.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    // XPlatform Suggestion from https://github.com/Oscar-B-Liang/duke/pull/6/files"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "version \u00270.2.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Launcher\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 41,
      "-": 16
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Duke is a CLI personal assistant that keeps track of the tasks that you need to complete."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "## 2. Features "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003e Notation"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003e * Words in UPPER_CASE need to be supplied by the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003e * Date Format used in the app is in \u0027yyyyMMd HHmm\u0027."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "#### 2.1 Add a task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "---"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "There are 3 types of tasks that Duke can keep track of:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * ToDo - A plain old ToDo."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Deadline - A Todo with a deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Event - An event with a date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "To add a task, simply call one of the following commands matching the task that you wish to keep track of."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Command: `[TYPE OF TASK] [DESCRIPTION]`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "#### 2.1.1 Add ToDo"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Command: `todo [DESCRIPTION]`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Example: `todo return book`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "#### 2.1.2 Add Deadline"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Command: `deadline [DESCRIPTION] /by [DATE_TIME]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Example: `deadline CS Tutorial /by 20191021`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "#### 2.1.3 Add Event"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Command: `event [DESCRIPTION] /at [DATE_TIME]`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Example: `event workout /at 20/09/2019 1700`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "### 2.2 List all tasks "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "---"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "List all the tasks that Duke has."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Command: `list`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "### 2.3 Mark task as Completed"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "---"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Mark a task with the `[INDEX]`as completed. The index can be retrieved by calling the `list` command first."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Command: `done [INDEX]`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Example: `done 1`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Condition: "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "`[INDEX]` should point to one of the tasks in the list. The hard restriction is  0 \u003c `[INDEX]` \u003c n where n is the size of the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "### 2.4 Delete a task "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "---"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Delete a task at the index `[INDEX]`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Command: `delete [INDEX]`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Example: `delete 3`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Condition: "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "`[INDEX]` should point to one of the tasks in the list. The hard restriction is  0 \u003c `[INDEX]` \u003c n where n is the size of the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "### 2.5 Find tasks "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Find all tasks that contain the supplied `[PATTERN]` in their description."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Command: `find [PATTERN]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Consider the following tasks in your list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "1.[T][✓] read book"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "2.[D][✗] return book (by: 20190801 2345)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "3.[E][✗] project meeting (at: 20190901 1800)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "4.[T][✓] join sports club"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "5.[T][✗] borrow book"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "`find ook` will return the following list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "1.[T][✓] read book"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "2.[D][✗] return book (by: 20190801 2345)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "3.[E][✗] project meeting (at: 20190901 1800)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "4.[T][✓] join sports club"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "5.[T][✗] borrow book"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "### 2.6 Exit "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "---"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Exit the program. The updated task list will be saved to disk upon exit."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Command: `bye`"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 88,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.helpers.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * The Duke Assistant keeps track of \u0027trackables\u0027 such as ToDos, Events and Deadlines."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * The CLI makes it ideal for a focused environment."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m Duke Assistant.\\nHow can I help?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Constructs a new Duke Object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * TaskList is instantiated by loading from Storage if data exists."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * If existing data does not exist or ends in an exception, an empty TaskList is returned."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public TaskList getTasks() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Enables the deferred initialization of taskList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return The Welcome Message and an error message if the tasklist could not be restored from file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String message \u003d WELCOME_MESSAGE + \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // Load from disk"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            tasks \u003d Storage.getInstance().loadFromDisk();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (Storage.StorageOperationException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return message +  e.getMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assert (tasks !\u003d null);     // Duke\u0027s taskList should never be null after the constructor is complete."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * seedu.duke.Main Method. Duke is instantiated and run here."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param args string arguments for console."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Executes the Duke Assistant."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Ui.greet();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        //noinspection InfiniteLoopStatement"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            String input \u003d Ui.readNextLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                Parser.parseCommand(input).execute(tasks);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                Ui.printError(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Handles the user input and returns the response from Duke."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param input The user input"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return Returns the response from Duke."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String handleCommand(String input) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Command commandToExecute \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            String response \u003d commandToExecute.execute(tasks);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            if (commandToExecute.getClass() \u003d\u003d ByeCommand.class) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                Storage.getInstance().saveToDisk(tasks);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 98,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * The Launcher for the Duke UI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.controllers.MainWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke); // To attach duke to the MainWindow"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().startDuke();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Storage.getInstance().saveToDisk(duke.getTasks());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (Storage.StorageOperationException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.StringStore;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Abstraction of the Add Command containing the required data to add a plain-old task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Contains the {@code description} required to create a plain-old Task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public AddCommand(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Adds a plain-old task with description {@code description} to the TaskList {@code tasks}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param tasks The TaskList object to add the task to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Task task \u003d new Task(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return StringStore.ADD_SUCCESSFUL + task.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.StringStore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Abstraction of the Bye Command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * eg: add [some task]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Executes the exit procedure."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * {@code tasks} are saved to disk before exiting."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param tasks The TaskList to save to storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return StringStore.GOODBYE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Represents an abstraction of the Command object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * A command object only contains a single abstract {@code execute{TaskList tasks}} method."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Contains the Command specific logic to perform the required operation in Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param tasks The current TaskList instance."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws DukeException Thrown when an issue arises during execution. Refer to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *         the specific Command abstractions for the exact exception thrown."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public abstract String execute(TaskList tasks) throws DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.StringStore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Abstraction of the Deadline Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Contains the {@code description} and {@code dateString} required to create a Deadline Object to add to the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * eg: deadline someDeadline /by 20191212 2359"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private String dateString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public DeadlineCommand(String description, String dateString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.dateString \u003d dateString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Adds a Deadline with the description {@code description} and by {@code dateString} in its date form"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * to the TaskList {@code tasks}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param tasks The current TaskList instance."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws InvalidArgumentException thrown when there was an issue parsing the {@code dateString}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *         Likely causes are incorrect date formats."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String execute(TaskList tasks) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(StringStore.DEFAULT_DATE_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Date date \u003d dateFormat.parse(dateString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Deadline deadline \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            tasks.add(deadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return StringStore.ADD_SUCCESSFUL"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                + \"\\n  \" + deadline.toString()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                + StringStore.REMAINING_TASK_1 + tasks.size() + StringStore.REMAINING_TASK_2;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new InvalidArgumentException(StringStore.DATE_FORMAT_ERROR, pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.StringStore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Abstraction of the Delete Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Contains the {@code taskId} required to identify the task to delete."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * eg: delete 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public DeleteCommand(int taskId) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.taskId \u003d taskId - 1;   // Minus 1 as 1-Index is shown to user while list is 0-Index."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Deletes a task from the {@code TaskList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param tasks The current TaskList instance."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws InvalidArgumentException Thrown when the {@code taskId} provided was out of bounds."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String execute(TaskList tasks) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Task taskToRemove \u003d tasks.remove(taskId);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return StringStore.DELETE_SUCCESSFUL"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            + \"\\n  \" + taskToRemove.toString()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            + StringStore.REMAINING_TASK_1 + tasks.size() + StringStore.REMAINING_TASK_2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 33
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.StringStore;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Abstraction of the Done Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Contains the {@code taskID} required to identify the task to mark as \u0027Done\u0027."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * eg: done 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public DoneCommand(int taskId) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.taskId \u003d taskId - 1;       // Minus 1 as 1-Index is shown to user while list is 0-Index."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Marks the task in {@code tasks} with index {@code taskId} as \u0027Done\u0027."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param tasks The current TaskList instance."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws InvalidArgumentException Thrown when the {@code taskId} provided was out of bounds."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String execute(TaskList tasks) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tasks.get(taskId).markAsDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return StringStore.DONE_SUCCESSFUL + \"\\n  \" + tasks.get(taskId).toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ErrorCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Abstraction of the Error Command to marshal errors thrown during identification of the command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * in {@link seedu.duke.helpers.Parser} to the executing thread to report the error."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * NOTE: This Command is system-generated and cannot be used like a regular CLI command i.e error args..."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class ErrorCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private DukeException exception;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public ErrorCommand(DukeException dukeException) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.exception \u003d dukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Re-throws the error up the chain to be handled by the executing thread."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param tasks The current TaskList instance."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws DukeException Re-throws the {@code exception}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        throw exception;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 27
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.StringStore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Abstraction of the Event Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Contains the {@code description} and {@code dateString} required to create a Deadline Object to add to the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * eg: event someDeadline /at 20191212 2359"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private String dateString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public EventCommand(String description, String date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.dateString \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Adds an Event with the description {@code description} and date {@code dateString} in its date form."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * to the TaskList {@code tasks};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param tasks The current TaskList instance."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws InvalidArgumentException thrown when there was an issue parsing the {@code dateString}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *         Likely causes are incorrect date formats."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String execute(TaskList tasks) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(StringStore.DEFAULT_DATE_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Date date \u003d dateFormat.parse(dateString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Event event \u003d new Event(description, date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            tasks.add(event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return StringStore.ADD_SUCCESSFUL"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                + \"\\n \" + event.toString()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                + StringStore.REMAINING_TASK_1 + tasks.size() + StringStore.REMAINING_TASK_2;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new InvalidArgumentException(StringStore.DATE_FORMAT_ERROR, pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.StringStore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Abstraction of the FindCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private String pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public FindCommand(String pattern) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.pattern \u003d pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Looks for any tasks that contain the string in {@code pattern} and builds a list of all matches"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * then returns the results."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param tasks The current TaskList instance."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        TaskList results \u003d tasks.findByDescription(pattern);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        StringBuilder response \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        response.append(StringStore.FIND_SUCCESSFUL);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // Inform if no results found, then return to caller."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (results.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return StringStore.FIND_UNSUCCESSFUL + \"\\\"\" + pattern + \"\\\"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        response.append(results.getListAsString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return response.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 38
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.StringStore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Abstraction of the List Command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * eg: list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Lists all the tasks in {@code tasks} in a 1-Index based format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param tasks The current TaskList instance."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return StringStore.LIST_SUCCESSFUL + tasks.getListAsString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Abstraction of the \\btodo Command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Contains the {@code description} required to create a To Do Object to add to the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * eg: \\btodo something"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public TodoCommand(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Adds a new \\bTodo with the description {@code description} to the TaskList {@code tasks}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param tasks The current TaskList instance."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            + \"\\n  \" + todo.toString()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            + \"\\nNow you have \" + tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/controllers/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final Background BACKGROUND \u003d new Background("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        new BackgroundFill(Paint.valueOf(\"#EEEEEE\"), CornerRadii.EMPTY, Insets.EMPTY));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Text dialog;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Instantiates a new {@code DialogBox} in the User (Right hand-side) format."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param text The text to display."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param img The image of the the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Instantiates a new {@code DialogBox} in the Duke (Left hand-side) format."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param text The text to display."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param img The image of the duke."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        db.setBackground(BACKGROUND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 83
    }
  },
  {
    "path": "src/main/java/seedu/duke/controllers/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String response \u003d duke.handleCommand(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Initializes duke and reports if there was an error processing the stored task list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void startDuke() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            DialogBox.getDukeDialog(duke.initialize(), dukeImage)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 65
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Top Level abstraction of all Duke-Specific Exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public  DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public DukeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Signals that there was an issue with the arguments specified by the user. This means that the command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * was likely to have been identified correctly however failed to execute due to arguments that were either"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * missing or invalid. {@code InvalidArgumentException.message} will contain information on the exact cause of the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * exception together with the original cause of the exception (if available)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class InvalidArgumentException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public InvalidArgumentException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public InvalidArgumentException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public InvalidArgumentException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(message,cause);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 27
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.StringStore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Signals that there was an issue with the command supplied by the user. This means that the command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * could not be identified."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * {@code InvalidCommandException.message} will contain information on the exact cause of the exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * together with the original cause of the exception (if available)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * The default constructor contains the default message for these types of exceptions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public InvalidCommandException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(StringStore.COMMAND_ERROR);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public InvalidCommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/helpers/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.helpers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.ErrorCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.EventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.TodoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.StringStore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * A Utility class that parses user input by extracting out the command and arguments from the input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * When adding new commands, a new {@code CommandName} {@code enum} must be created together with the corresponding"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Regular Expression pattern in the form COMMANDNAME_PATTERN as a {@code static final String}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Additionally, an entry should be added into {@link Parser#identifyCommandName(String)} for the correct Pattern"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * selection."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Enumerates the different Commands supported with their CLI equivalent strings as keys."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    enum CommandName {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        LIST(\"list\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        ADD(\"add\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        DONE(\"done\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        TODO(\"todo\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        EVENT(\"event\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        DELETE(\"delete\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        FIND(\"find\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        BYE(\"bye\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        ERROR(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        private final String command;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        CommandName(String command) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            this.command \u003d command;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Pattern strings used by the Regular Expression matcher to extract command arguments."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String LIST_PATTERN \u003d \"(list)\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String ADD_PATTERN \u003d \"(add)(?\u003d\\\\s)\\\\s([\\\\w\\\\D]+)\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String DONE_PATTERN \u003d \"(done)(?\u003d\\\\s)\\\\s([\\\\d]+)\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String TODO_PATTERN \u003d \"(todo)(?\u003d\\\\s)\\\\s([\\\\w\\\\D]+)\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String DEADLINE_PATTERN \u003d \"(deadline)(?\u003d\\\\s)\\\\s([\\\\w\\\\D]+(?\u003d\\\\s/by\\\\s))\\\\s/by\\\\s([\\\\w\\\\D]+)\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String EVENT_PATTERN \u003d \"(event)(?\u003d\\\\s)\\\\s([\\\\w\\\\D]+(?\u003d\\\\s/at\\\\s))\\\\s/at\\\\s([\\\\w\\\\D]+)\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String DELETE_PATTERN \u003d \"(delete)(?\u003d\\\\s)\\\\s([\\\\d]+)\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String FIND_PATTERN \u003d \"(find)(?\u003d\\\\s)\\\\s([\\\\w\\\\D]+)\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String BYE_PATTERN \u003d \"(bye)\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Parses command inputs using regular expressions to extract commands and arguments."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param input Command input from the user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return Returns the Command to be executed. An ErrorCommand will be returned should the command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *         be invalid or contain invalid arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static Command parseCommand(String input) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        CommandName command \u003d identifyCommandName(input);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // Exit if CommandName cannot be identified"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (command \u003d\u003d CommandName.ERROR) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return new ErrorCommand(new InvalidCommandException());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // Extract arguments from input."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Command commandToExecute \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String pattern \u003d getPattern(command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Matcher matcher \u003d Pattern.compile(pattern).matcher(input);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // Exit if arguments cannot be matched."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new ErrorCommand("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                new InvalidArgumentException("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                   StringStore.ARGUMENTS_ERROR + command.name() + \".\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return commandToExecute;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (command \u003d\u003d CommandName.LIST) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new ListCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else if (command \u003d\u003d CommandName.ADD) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new AddCommand(matcher.group(2));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else if (command \u003d\u003d CommandName.DONE) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            int taskId \u003d Integer.parseInt(matcher.group(2));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new DoneCommand(taskId);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else if (command \u003d\u003d CommandName.TODO) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new TodoCommand(matcher.group(2));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else if (command \u003d\u003d CommandName.EVENT) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new EventCommand(matcher.group(2), matcher.group(3));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else if (command \u003d\u003d CommandName.DEADLINE) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new DeadlineCommand(matcher.group(2), matcher.group(3));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else if (command \u003d\u003d CommandName.DELETE) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            int taskId \u003d Integer.parseInt(matcher.group(2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new DeleteCommand(taskId);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else if (command \u003d\u003d CommandName.FIND) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new FindCommand(matcher.group(2));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else if (command \u003d\u003d CommandName.BYE) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new ByeCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return commandToExecute;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Identifies the CommandName from the input."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param input The complete command input from the user."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return Returns the respective CommandName Enum if a match is found, otherwise the Error CommandName"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *         is returned."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static CommandName identifyCommandName(String input) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        CommandName commandName;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            String extractedCommand \u003d input.split(\" \")[0].toUpperCase();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandName \u003d CommandName.valueOf(extractedCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandName \u003d CommandName.ERROR;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return commandName;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Returns the pattern to use based on the CommandName Enum."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param commandName The CommandName Enum once identified."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static String getPattern(CommandName commandName) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String pattern \u003d \"\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        switch (commandName) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            pattern \u003d LIST_PATTERN;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            pattern \u003d ADD_PATTERN;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            pattern \u003d DONE_PATTERN;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            pattern \u003d TODO_PATTERN;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            pattern \u003d EVENT_PATTERN;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            pattern \u003d DEADLINE_PATTERN;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            pattern \u003d DELETE_PATTERN;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            pattern \u003d FIND_PATTERN;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            pattern \u003d BYE_PATTERN;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return pattern;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 179
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Represents a Storage system that handles saving and loading of tasks to and from the file-system."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Storage is a Singleton to prevent concurrent access to the storage file due to multiple instantiation. The Storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * {@code instance} is instantiated exactly once."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Default file path used."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String DEFAULT_STORAGE_PATH \u003d \"/data/tasksfile.txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Singleton Storage Instance."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static Storage instance;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Storage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        path \u003d Paths.get(System.getProperty(\"user.dir\") + DEFAULT_STORAGE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Gets the Singleton instance of the Storage Object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return the Storage instance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static Storage getInstance() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            instance \u003d new Storage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Saves the list of tasks to the storage file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws StorageOperationException if there were errors converting and/or storing data to file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void saveToDisk(TaskList tasks) throws StorageOperationException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                Files.createDirectories(path.getParent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                Files.createFile(path);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            assert (Files.exists(path));        // File should exist at this point."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            List\u003cString\u003e tasksAsString \u003d extractStringsFromTasks(tasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Files.write(path, tasksAsString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path, ioe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Loads the Tasks data from the storage file, and then returns it."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return The populated {@code TaskList}, otherwise an empty {@code TaskList} if the file does not exist,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *         or is an irregular file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws StorageOperationException thrown when there were errors reading and/or converting data from file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public TaskList loadFromDisk() throws StorageOperationException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return new TaskList(restoreTasksFromStrings(Files.readAllLines(path)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path, ioe);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new StorageOperationException(\"Fatal error occurred. Could not load tasks.\", e);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Converts all the {@code tasks} as their equivalent Strings."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param tasks Lists containing all the tasks to convert."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return A list of Tasks in their String equivalent form otherwise, an empty {@code List\u003cString\u003e}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *         if {@code tasks} is empty."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private List\u003cString\u003e extractStringsFromTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return tasks.getList().stream().map(Task::getAsString).collect(Collectors.toList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Converts all the {@code stringTasks} as their equivalent Task Objects."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param stringTasks List containing all tasks in their string forms."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return A list of Tasks otherwise, an empty {@code List\u003cTask} if {@code stringTasks} is empty."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private List\u003cTask\u003e restoreTasksFromStrings(List\u003cString\u003e stringTasks) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return stringTasks.stream()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .map(identifyTask -\u003e identifyTask.split(\" \\\\| \"))        // Split String"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .map(this::stringArgsToTask).collect(Collectors.toList());     // Run each String[] through stringToTask()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Converts a single set of String Arguments into their respective Task subclass."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param args Contains the task data."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return Returns the populated task subclass."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Task stringArgsToTask(String... args) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        switch (args[0]) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return new Todo(args);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return new Event(args);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return new Deadline(args);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return new Task(args);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Signals that some error has occurred while trying to convert and read/write data between the application"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * and the storage file."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static class StorageOperationException extends DukeException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        public StorageOperationException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        public StorageOperationException(String message) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        public StorageOperationException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            super(message, cause);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 154
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Abstraction of a List of Tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public TaskList(List\u003cTask\u003e newTaskList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.tasks \u003d newTaskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    // CRUD Tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Adds the task {@code newTask} to {@code tasks}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param newTask The task to add."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void add(Task newTask) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.tasks.add(newTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Retrieves the Task at the given index."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param index The index of the task to retrieve."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return The Task at the given index."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws InvalidArgumentException Thrown when the index is out of range."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Task get(int index) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!isValidIndex(index)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new InvalidArgumentException(\"No task with id \" + index + \" exists.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Substitutes the task at the given index with a new task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param index Index of task to replace."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param newTask Task to use as replacement."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws InvalidArgumentException Thrown when the index is out of range."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void update(int index, Task newTask) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!isValidIndex(index)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new InvalidArgumentException(\"No task with id \" + (index + 1) + \" exists.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.tasks.set(index, newTask);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Removes the Task from the list at the specified index."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param index The index of the task to delete."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return The task that is removed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws InvalidArgumentException Thrown when the index is out of range."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Task remove(int index) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!isValidIndex(index)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new InvalidArgumentException(\"No task with id \" + (index + 1) + \" exists.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return tasks.remove(index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Finds all Tasks that contain the pattern specified."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param pattern The pattern used for the search."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return Returns a new TaskList with the matching tasks."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public TaskList findByDescription(String pattern) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        TaskList searchResult;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        searchResult \u003d new TaskList(tasks.stream()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .filter(task -\u003e task.getDescription().contains(pattern))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return searchResult;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Converts the TaskList into a String, each line representing a task. Typically used to display"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * all Tasks in the list to the user."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return Returns the list as a single String."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String getListAsString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        StringBuilder response \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        response.append(\"\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            response.append(i + 1)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                .append(\".\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                .append(tasks.get(i).toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            if (i \u003c tasks.size()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                response.append(\"\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return response.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private boolean isValidIndex(int index) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c this.tasks.size();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 120
    }
  },
  {
    "path": "src/main/java/seedu/duke/trackables/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.trackables;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.StringStore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Represents a Deadline that needs to be met. It contains a description and a completion deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Date completeBy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Deadline(String description, Date completeBy) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.completeBy \u003d completeBy;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Constructs a new Deadline using string arguments. Typically used when restoring Deadline from Storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param args String arguments containing Deadline data from Storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Deadline(String... args) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            this.completeBy \u003d new SimpleDateFormat(StringStore.DEFAULT_DATE_FORMAT).parse(args[3]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String getCompleteByAsFormattedString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return new SimpleDateFormat(StringStore.DEFAULT_DATE_FORMAT).format(completeBy);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            + getCompleteByAsFormattedString() + \")\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String getAsString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        final StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        sb.append(\"D\").append(\" | \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(isDone ? \"1\" : \"0\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(\" | \").append(this.description)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(\" | \").append(getCompleteByAsFormattedString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 54
    }
  },
  {
    "path": "src/main/java/seedu/duke/trackables/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.trackables;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.StringStore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Represents an Event that starts at a specific time. It contains a description and a start date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Date attendDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Event(String description, Date attendDate)  {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.attendDate \u003d attendDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Constructs a new Event using string arguments. Typically used when restoring Event from Storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param args String arguments containing Event data from Storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Event(String... args) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            this.attendDate \u003d new SimpleDateFormat(StringStore.DEFAULT_DATE_FORMAT).parse(args[3]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private String getAttendDateAsFormattedDate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return new SimpleDateFormat(StringStore.DEFAULT_DATE_FORMAT).format(attendDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            + getAttendDateAsFormattedDate() + \")\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String getAsString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        final StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        sb.append(\"E\").append(\" | \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(isDone ? \"1\" : \"0\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(\" | \").append(this.description)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(\" | \").append(getAttendDateAsFormattedDate());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 54
    }
  },
  {
    "path": "src/main/java/seedu/duke/trackables/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.trackables;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Represents a plain old Task that contains a single description and its done state."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Constructs a new Task using string arguments. Typically used when restoring Task from Storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param args String arguments containing Event data from Storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Task(String... args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.isDone \u003d !args[1].equals(\"0\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.description \u003d args[2];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        //return tick or X symbols"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return (this.isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Gets the Task in its String equivalent form."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String getAsString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        final StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        sb.append(isDone ? \"1\" : \"0\").append(\" | \").append(this.description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 56
    }
  },
  {
    "path": "src/main/java/seedu/duke/trackables/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.trackables;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Represents a \\bTodo, a task that needs to be done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Constructs a new \\bTodo using string arguments. Typically used when restoring \\bTodo from Storage."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param args String arguments containing Event data from Storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Todo(String... args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String getAsString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        final StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        sb.append(\"T\").append(\" | \").append(isDone ? \"1\" : \"0\").append(\" | \").append(this.description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/StringStore.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class StringStore {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String ADD_SUCCESSFUL \u003d \"Got it. I\u0027ve added this task: \";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String DELETE_SUCCESSFUL \u003d \"Noted. I\u0027ve removed this task: \";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String DONE_SUCCESSFUL \u003d \"Nice! I\u0027ve marked this task as done: \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String FIND_SUCCESSFUL \u003d \"Here are the matching tasks in your list: \\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String FIND_UNSUCCESSFUL \u003d \"There were no tasks with the following contents \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String LIST_SUCCESSFUL \u003d \"Here are tasks in your list: \\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String REMAINING_TASK_1 \u003d \"\\nNow you have \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String REMAINING_TASK_2 \u003d \" tasks in the list.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String GOODBYE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String BYE_COMMAND_GOODBYE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    //Error Messages"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String DATE_FORMAT_ERROR \u003d \"Date input is not in the right format yyyyMMd HHmm\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String ARGUMENTS_ERROR \u003d \"Invalid or missing arguments in command \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String COMMAND_ERROR \u003d \"No such command found.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    //Constants"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String DEFAULT_DATE_FORMAT \u003d \"yyyyMMd HHmm\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Represents the User Interface that the user interacts with. It handles input and output, from and to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * The Ui Class is static as there is exactly one Ui in Duke, and more should not be instantiated."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d \"______________________________\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        + \"______________________________\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String LOGO \u003d \"\\t ____        _        \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        + \"\\t|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        + \"\\t| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        + \"\\t| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        + \"\\t|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Prints the greeting message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static void greet() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        System.out.println(LOGO);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        printMessages(\"Hello! I\u0027m Duke\", \"What can I do for you?\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Prints out the variable message arguments, each on its own line."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param messages The variable message arguments to print."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static void printMessages(String... messages) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        for (String message : messages) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            System.out.println(\"\\t\" + message);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Prints the message when there is a loading error."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static void printLoadingError() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        printMessages(\"Creating a new taskList for you...\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Prints the message contained in the DukeException {@code e}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param e the Exception whose message should be printed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static void printError(DukeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        printMessages(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static String readNextLine() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Print horizontal line."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static void printLine() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        System.out.println(\"\\t\" + HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 70
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"0.0\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        \u003cText fx:id\u003d\"dialog\" strokeType\u003d\"OUTSIDE\" text\u003d\"Text\" HBox.hgrow\u003d\"ALWAYS\" wrappingWidth\u003d\"250.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        \u003c/Text\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 23
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            fx:controller\u003d\"seedu.duke.controllers.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                   AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                    prefWidth\u003d\"400.0\" vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 24
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void runTest() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 9
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    DeleteCommandTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tasks.add(new Todo(\"Task A\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tasks.add(new Todo(\"Task B\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tasks.add(new Todo(\"Task C\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void deleteCommand_ShouldThrowInvalidArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertThrows(InvalidArgumentException.class, () -\u003e tasks.remove(5));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void deleteCommand_ShouldDeleteTask() throws InvalidArgumentException{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        int size \u003d tasks.size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tasks.remove(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertNotEquals(size, tasks.size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 33
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void markIsDone_ShouldBeDone() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Task task \u003d new Todo(\"Something\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertTrue(task.isDone());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 19
    }
  },
  {
    "path": "src/test/java/seedu/duke/helpers/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.helpers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import org.junit.jupiter.params.provider.ValueSource;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.TodoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ValueSource(strings \u003d {\"list\", \"add\", \"done\", \"todo\", \"event\", \"deadline\", \"delete\", \"bye\", \"add something\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                            \"done 1, todo something else\"})"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void identifyCommandName_ShouldReturnCommandName(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertEquals(Parser.CommandName.valueOf(input.split(\" \")[0].toUpperCase()), Parser.identifyCommandName(input));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ValueSource(strings \u003d {\"remove\", \"create\", \"something\", \"else\", \"not\", \"command\"})"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void identifyCommandName_ShouldReturnCommandNameError(String input) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertEquals(Parser.CommandName.ERROR, Parser.identifyCommandName(input));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ValueSource(strings \u003d {\"list\", \"add something\", \"todo something\", \"event sometthing123* /at 21/12/2019 2345\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        \"deadline something456% /by 23/12/2019 1234\", \"done 3\", \"delete 5\", \"bye\"})"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void parseCommand_ShouldReturnCommand(String input) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertEquals(Command.class, Parser.parseCommand(input).getClass().getSuperclass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ValueSource(strings \u003d {\"list\"})"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void parseCommand_ShouldReturnListCommand(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertEquals(ListCommand.class, Parser.parseCommand(input).getClass());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ValueSource(strings \u003d {\"add something\", \"add something123\", \"add something else 123\"})"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void parseCommand_ShouldReturnAddCommand(String input) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertEquals(AddCommand.class, Parser.parseCommand(input).getClass());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ValueSource(strings \u003d {\"todo something\", \"todo something123\", \"todo something else 123\"})"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void parseCommand_ShouldReturnTodoCommand(String input) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertEquals(TodoCommand.class, Parser.parseCommand(input).getClass());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 57
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 34
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `seedu.duke.Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `seedu.duke.Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Now, we can go back to the `seedu.duke.Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 3,
      "-": 240
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "   Why does `seedu.duke.Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "   The `seedu.duke.Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Let\u0027s create a new `seedu.duke.Main` class as the bridge between the existing logic in `Duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "**seedu.duke.Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class seedu.duke.Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(seedu.duke.Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Application.launch(seedu.duke.Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 7,
      "-": 287
    }
  }
]
