[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "test {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 20,
      "-": 19
    }
  },
  {
    "path": "data/save.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "[D][?] return book (by: 02 December 2019, 06:00 PM)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": "[D][?] return book (by: 02 December 2019, 06:00 PM)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "[T][?] eat"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "[T][?] as"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "[T][?] life"
      }
    ],
    "authorContributionMap": {
      "heze8": 5
    }
  },
  {
    "path": "data/words.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "find"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": "bye"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "done"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "delete"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "todo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "event"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "deadline"
      }
    ],
    "authorContributionMap": {
      "heze8": 8
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "heze8": 18,
      "-": 82
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.common.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.datahandling.DataStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.datahandling.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": " * The main class of duke, which manages the running of the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Handles the response from the input of the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param input the input of the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the response."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return parser.parse(input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Constructor which instantiates a ui, data storage, and attempts loading save dat from the filepath given."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Duke( ) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "        DataStorage storage \u003d new DataStorage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "        TaskList tasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "            tasks.store(storage.load());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "            parser \u003d new Parser(tasks, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Checks if the application has been flagged to exit."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the exit flag."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return parser.isExit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 50,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.common.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.ui.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": " * A GUI for duke.Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "            fxmlLoader.setClassLoader(getClass().getClassLoader());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "            fxmlLoader.setLocation(getClass().getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "            mainWindow \u003d fxmlLoader.\u003cMainWindow\u003egetController();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "            run();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (IOException | DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "            mainWindow.outputError(e);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Runs duke by checking for input and displaying errors."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void run() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "        duke \u003d new Duke();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "        mainWindow.init(duke);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "        mainWindow.showWelcome();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 45
    }
  },
  {
    "path": "src/main/java/duke/lib/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke.lib;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Contains the list of tasks with operations to add, delete, etc."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private ArrayList\u003cTask\u003e textStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Default constructor for TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "        textStorage \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Stores the given task in the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param task the task to be stored."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void store(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "        textStorage.add(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Stores the given list of task in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param tasks the list of task to be stored."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void store(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "            textStorage.add(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return int size."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return textStorage.size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Marks the task as completed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param index the index of the task in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the task back after modification."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws DukeException thrown if the task cannot be found."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Task markAsDone(int index) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": "        --index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (index \u003c 0 | index \u003e\u003d textStorage.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throw new DukeException(\"There\u0027s no Task attached to that number\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return textStorage.get(index).completed();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Deletes the given task from the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param index the index of the task in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the task that was deleted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws DukeException thrown if the task cannot be found."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Task delete(int index) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heze8"
        },
        "content": "        --index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (index \u003c 0 | index \u003e\u003d textStorage.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throw new DukeException(\"There\u0027s no Task attached to that number\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return textStorage.remove(index);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns the list attached to the Tasklist in an ArrayList."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the list to be returned."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assert textStorage !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return textStorage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 90
    }
  },
  {
    "path": "src/main/java/duke/lib/autocorrect/SpellCheck.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke.lib.autocorrect;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class SpellCheck {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static final int KEYBOARD_DISTANCE_SORT \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private WordDictionary dict;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private boolean isCaseSensitive;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private int errorSensitivity \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public SpellCheck() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "            dict \u003d new WordDictionary();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "            isCaseSensitive \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throw new DukeException(\"Something when wrong with initializing the dictionary\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void setErrorSensitivity(int errSensitivity) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (errSensitivity \u003c 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "            errorSensitivity \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "            this.errorSensitivity \u003d errorSensitivity;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void setIsCaseSensitive(boolean bool) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "        isCaseSensitive \u003d bool;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String suggest(String word) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "        dict.updateWordList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Iterator\u003cString\u003e it \u003d dict.getWordList().iterator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "        PriorityQueue\u003cPair\u003cString, Integer\u003e\u003e suggestions \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "                new PriorityQueue\u003c\u003e((p1, p2) -\u003e p1.getValue() - p2.getValue());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String s \u003d it.next();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "            int led \u003d computeLedDistance(word, s);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (led \u003c\u003d errorSensitivity) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "                Pair\u003cString, Integer\u003e pair \u003d new Pair(s, led);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "                suggestions.add(pair);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Pair\u003cString, Integer\u003e head \u003d suggestions.peek();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (head !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return head.getKey();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throw new DukeException(\"Can\u0027t find any suggestions\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns the edit distance needed to convert string s1 to s2"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * If returns 0, the strings are same"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * If returns 1, that means either one character is added, removed or replaced"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": "    //solution below adapted from https://bakedcircuits.wordpress.com/2013/08/10/simple-spell-checker-in-java/"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private int computeLedDistance(String s1, String s2) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (isCaseSensitive) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heze8"
        },
        "content": "            s1 \u003d s1.toLowerCase();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heze8"
        },
        "content": "            s2 \u003d s2.toLowerCase();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heze8"
        },
        "content": "        int[] ledCosts \u003d new int[s2.length() + 1];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heze8"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d s1.length(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heze8"
        },
        "content": "            int lastValue \u003d i;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heze8"
        },
        "content": "            for (int j \u003d 0; j \u003c\u003d s2.length(); j++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heze8"
        },
        "content": "                if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    ledCosts[j] \u003d j;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "heze8"
        },
        "content": "                } else if (j \u003e 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        int newValue \u003d ledCosts[j - 1];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        if (s1.charAt(i - 1) !\u003d s2.charAt(j - 1)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "heze8"
        },
        "content": "                            newValue \u003d Math.min(Math.min(newValue, lastValue), ledCosts[j]) + 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        ledCosts[j - 1] \u003d lastValue;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        lastValue \u003d newValue;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "heze8"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (i \u003e 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "heze8"
        },
        "content": "                ledCosts[s2.length()] \u003d lastValue;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return ledCosts[s2.length()];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 98
    }
  },
  {
    "path": "src/main/java/duke/lib/autocorrect/WordDictionary.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke.lib.autocorrect;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.datahandling.DataStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class WordDictionary {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private final static String glossaryFilePath \u003d \"data/words.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private HashSet\u003cString\u003e wordList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private DataStorage dataStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public WordDictionary() throws IOException, DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "        wordList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(glossaryFilePath));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "                wordList.add(line);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "            loadFromList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public HashSet\u003cString\u003e getWordList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return wordList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void updateWordList() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "        loadFromList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private void loadFromList() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "        dataStorage \u003d new DataStorage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "        ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "            tasks \u003d dataStorage.load();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throw new DukeException(\"Unable to load data from storage for spell check dictionary :(\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "            wordList.add(t.getName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 54
    }
  },
  {
    "path": "src/main/java/duke/lib/common/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke.lib.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": " * The Exception class used by this program inherited from Exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assert !message.isEmpty() : \"exception should not be empty\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 11
    }
  },
  {
    "path": "src/main/java/duke/lib/common/Time.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke.lib.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Time class to hold value of time with correct display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static final String DATE_PATTERN \u003d \"dd MMMM yyyy, hh:mm a\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private String format;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Constructor of time parsed from the proper string format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param dateString date format given in string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws DukeException will be thrown when string is not in correct format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Time(String dateString) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assert !dateString.isEmpty() : \"date should not be empty\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_PATTERN);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "            date \u003d LocalDateTime.parse(dateString, formatter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "            format \u003d date.format(formatter);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (DateTimeParseException d) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "                String[] stringSplit \u003d dateString.split(\" \", 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "                String[] dateSplit \u003d stringSplit[0].split(\"\\\\/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "                date \u003d LocalDateTime.of(Integer.valueOf(dateSplit[2]), Integer.valueOf(dateSplit[1]),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        Integer.valueOf(dateSplit[0]), Integer.valueOf(stringSplit[1].substring(0, 2)),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        Integer.valueOf(stringSplit[1].substring(2)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "                format \u003d date.format(formatter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "                throw new DukeException(\"Oops something when wrong with your date input, \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        + \"try following this date pattern: \" + DATE_PATTERN);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Overrides toString."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the proper string format of this time object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assert !format.isEmpty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return format;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 52
    }
  },
  {
    "path": "src/main/java/duke/lib/datahandling/DataStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke.lib.datahandling;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.common.Time;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class DataStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "    final static String filePath \u003d \"data/save.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private final String newLine \u003d System.getProperty(\"line.separator\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Public constructor for the storage of the list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public DataStorage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "        tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Writes the list of task into the save file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param taskList the list to be saved."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws DukeException thrown if file cannot be found."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void write(ArrayList\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "            boolean isFirst \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "                if (isFirst) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    isFirst \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    fw.write(parseTask(task));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    fw.write(newLine + parseTask(task));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throw new DukeException(\"Oops something when wrong with saving the data.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private String parseTask(Task t) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return t.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Task parseString(String s) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String type \u003d s.substring(1, 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String status \u003d s.substring(4, 5);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String[] spl \u003d s.split(\" \", 2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": "            Task temp;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heze8"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heze8"
        },
        "content": "            case \"T\": {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heze8"
        },
        "content": "                temp \u003d new ToDo(spl[1]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heze8"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heze8"
        },
        "content": "            case \"E\": {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heze8"
        },
        "content": "                String[] nameAndDesc \u003d spl[1].split(\" \\\\(at: \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heze8"
        },
        "content": "                String time \u003d nameAndDesc[1].substring(0, nameAndDesc[1].length() - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heze8"
        },
        "content": "                Time t \u003d new Time(time);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heze8"
        },
        "content": "                temp \u003d new Event(nameAndDesc[0], t);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heze8"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "heze8"
        },
        "content": "            case \"D\": {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "heze8"
        },
        "content": "                String[] nameAndDesc \u003d spl[1].split(\" \\\\(by: \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heze8"
        },
        "content": "                String desc \u003d nameAndDesc[1].substring(0, nameAndDesc[1].length() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "heze8"
        },
        "content": "                Time t \u003d new Time(desc);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "heze8"
        },
        "content": "                temp \u003d new Deadline(nameAndDesc[0], t);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "heze8"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "heze8"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "heze8"
        },
        "content": "                temp \u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "heze8"
        },
        "content": "                throw new DukeException(\"Something went wrong with the save file.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return temp;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throw new DukeException(\"Oops something when wrong with the save file.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Loads the list of tasks from the save file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the list of task from the save file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws DukeException if the file cannot be found or parsed correctly."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "heze8"
        },
        "content": "            readFromFile();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throw new DukeException(\"Oops something when wrong with loading your tasks. So sorry.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private void readFromFile() throws IOException, DukeException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "heze8"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "heze8"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "heze8"
        },
        "content": "                tasks.add(parseString(line));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "heze8"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 122
    }
  },
  {
    "path": "src/main/java/duke/lib/datahandling/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke.lib.datahandling;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.autocorrect.SpellCheck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.common.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.common.Time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.task.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Parser class handles all parsing of commands and execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private DataStorage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private SpellCheck spellCheck;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Public constructor of Parser to be used to parse and execute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param taskList Tasklist used by the duke program"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param storage Storage of where the save file is located"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Parser(TaskList taskList, DataStorage storage) throws DukeException{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.spellCheck \u003d new SpellCheck();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Parses the command given which will then be executed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param fullCommand the command input given by the user"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @throws DukeException multiple cases of wrong input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "            updateStorage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "            assert !fullCommand.isEmpty() : \"input cannot be empty\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String[] wordsInInput \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String command;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "            boolean moreThanOne;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (fullCommand.contains(\" \")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "                command \u003d wordsInInput[0];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": "                moreThanOne \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": "                command \u003d fullCommand;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "                moreThanOne \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return execute(command, wordsInInput, moreThanOne);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry please give a number instead.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private String execute(String command, String[] words, boolean moreThanOne) throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Task temp;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heze8"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heze8"
        },
        "content": "        case \"find\": {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (!moreThanOne) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heze8"
        },
        "content": "                throw new DukeException(\"Sorry, you need to input something to find what you\u0027re looking for.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heze8"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heze8"
        },
        "content": "                ArrayList\u003cString\u003e taskWithName \u003d findAllTaskWithName(words[1]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heze8"
        },
        "content": "                String[] tasksInArray \u003d taskWithName.toArray(new String[taskWithName.size()]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heze8"
        },
        "content": "                return ui.format(\"Here are all the matching tasks with that name\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        true, tasksInArray);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "heze8"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heze8"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    return \"I couldn\u0027t find what any tasks with that name, \" +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "heze8"
        },
        "content": "                            \"perhaps you meant \\\"\" + spellCheck.suggest(words[1]) + \"\\\" instead?\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "heze8"
        },
        "content": "                } catch (DukeException e2) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "heze8"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "heze8"
        },
        "content": "        case \"bye\": {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "heze8"
        },
        "content": "            isExit \u003d true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return ui.format(\"Bye. Hope to see you again soon!\", false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "heze8"
        },
        "content": "        case \"list\": {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "heze8"
        },
        "content": "            ArrayList\u003cTask\u003e list \u003d taskList.getList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (list.isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "heze8"
        },
        "content": "                throw new DukeException(\"Oh looks like there\u0027s nothing in your list so far.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return ui.convertTaskListToString(\"Here are the tasks in your list:\", list);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "heze8"
        },
        "content": "        case \"done\": {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (!moreThanOne) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "heze8"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, you didn\u0027t specify which index of the list you\u0027ve done.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String secondWord \u003d words[1];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "heze8"
        },
        "content": "            int index \u003d Integer.parseInt(secondWord);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return ui.format(\"Nice! I\u0027ve marked this task as done:\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    false, taskList.markAsDone(index).toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "heze8"
        },
        "content": "        case \"delete\": {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (!moreThanOne) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "heze8"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "heze8"
        },
        "content": "                        + \"you didn\u0027t specify which index of the list you want to delete.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String secondWord \u003d words[1];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "heze8"
        },
        "content": "            int index \u003d Integer.parseInt(secondWord);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return ui.format(\"Noted. I\u0027ve removed this task:\", false,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    taskList.delete(index).toString(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    \"Now you have \" + taskList.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "heze8"
        },
        "content": "        case \"todo\": {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (!moreThanOne) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "heze8"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, the description of your ToDo cannot be empty.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "heze8"
        },
        "content": "            temp \u003d new ToDo(words[1]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "heze8"
        },
        "content": "            taskList.store(temp);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return ui.format(\"Got it. I\u0027ve added this task:\", false, temp.toString(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    \"Now you have \" + taskList.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "heze8"
        },
        "content": "        case \"deadline\": {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (!moreThanOne) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "heze8"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, the description of your DeadLine cannot be empty.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String[] spl \u003d words[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (spl.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "heze8"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, you forgot to put a time for your deadline.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String time \u003d spl[1];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "heze8"
        },
        "content": "            Time t \u003d new Time(time);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "heze8"
        },
        "content": "            temp \u003d new Deadline(spl[0], t);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "heze8"
        },
        "content": "            taskList.store(temp);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return ui.format(\"Got it. I\u0027ve added this task:\", false, temp.toString(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    \"Now you have \" + taskList.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "heze8"
        },
        "content": "        case \"event\": {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (!moreThanOne) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "heze8"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, the description of your Event cannot be empty.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String[] split \u003d words[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (split.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "heze8"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, you forgot to put a time for your event.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "heze8"
        },
        "content": "            String time \u003d split[1];"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "heze8"
        },
        "content": "            Time t \u003d new Time(time);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "heze8"
        },
        "content": "            temp \u003d new Event(split[0], t);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "heze8"
        },
        "content": "            taskList.store(temp);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "heze8"
        },
        "content": "            return ui.format(\"Got it. I\u0027ve added this task:\", false, temp.toString(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "heze8"
        },
        "content": "                    \"Now you have \" + taskList.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "heze8"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "heze8"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "heze8"
        },
        "content": "                return \"Did you mean to say \\\"\" + spellCheck.suggest(command) + \"\\\" instead?\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "heze8"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "heze8"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :(\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private ArrayList\u003cString\u003e findAllTaskWithName(String name) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "heze8"
        },
        "content": "        ArrayList\u003cTask\u003e tempTaskList \u003d taskList.getList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "heze8"
        },
        "content": "        ArrayList\u003cString\u003e listWithMatchingName \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "heze8"
        },
        "content": "        for (Task t : tempTaskList) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "heze8"
        },
        "content": "            if (t.getName().contains(name)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "heze8"
        },
        "content": "                listWithMatchingName.add(t.toString());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (listWithMatchingName.isEmpty()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "heze8"
        },
        "content": "            throw new IllegalArgumentException(\"Oh looks like there\u0027s no tasks with that name in your list\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return listWithMatchingName;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private void updateStorage() throws DukeException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "heze8"
        },
        "content": "        storage.write(taskList.getList());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 199
    }
  },
  {
    "path": "src/main/java/duke/lib/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke.lib.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.common.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "    protected Time time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Constructs a deadline object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param task the name of the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param time the time by which it should be completed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Deadline(String task, Time time) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + time + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "heze8": 29
    }
  },
  {
    "path": "src/main/java/duke/lib/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke.lib.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.common.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "    protected Time time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Constructor for event object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param task the name of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param time the time at which it will be held at."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Event(String task, Time time) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + time + \")\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 27
    }
  },
  {
    "path": "src/main/java/duke/lib/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke.lib.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Abstract class for task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Constructor for task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param name name of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assert name !\u003d null : \"Task should be named\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns the name of the given task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns the status icon: tick or X symbols."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the String format of the icon."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return isDone ? \"\\u2713\" : \"\\u2718\"; //return tick or X symbols"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Marks this task as completed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return this task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public Task completed() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns the type of task it is attached to."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return a String representation of type."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns the string representation of this task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return format of string for this task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 65
    }
  },
  {
    "path": "src/main/java/duke/lib/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke.lib.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public ToDo(String task) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 16
    }
  },
  {
    "path": "src/main/java/duke/lib/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke.lib.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": " * This control of DialogBox represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": " * a label containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns the dialog box of the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param text the user\u0027s input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param img the image representation of user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the dialog box."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns the dialog box of duke."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param text the duke\u0027s response."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param img the image representation of duke."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the dialog box."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heze8"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heze8"
        },
        "content": "        db.setMinHeight(db.dialog.getMinHeight());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heze8"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 73
    }
  },
  {
    "path": "src/main/java/duke/lib/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke.lib.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void init(Duke d) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.duke \u003d d;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (duke.isExit()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void outputError(Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "        output(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private void output(String message) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heze8"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(message, dukeImage));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heze8"
        },
        "content": "        output(ui.getWelcomeMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 74
    }
  },
  {
    "path": "src/main/java/duke/lib/ui/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke.lib.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": " * Handles output and input via terminal for the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static final String INDENTATION \u003d \"     \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "            INDENTATION + \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Returns the welcome message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String getWelcomeMessage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return format(\"Hello! I\u0027m Duke\",false, \"What can I do for you?\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Formats the response of duke to the user with features of indexed format and a starting message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param startPhrase the starting phrase of the format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param useIndexing a flag to check if whether the format should be indexed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param lines the lines to be formatted."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the complete string format of the response."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String format(String startPhrase, boolean useIndexing, String... lines) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(startPhrase + \"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "        if (useIndexing) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heze8"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heze8"
        },
        "content": "            while (i \u003c lines.length) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heze8"
        },
        "content": "                sb.append(INDENTATION + i + \". \" + lines[i - 1] + \"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heze8"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heze8"
        },
        "content": "            sb.append(INDENTATION + i + \". \" + lines[i - 1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heze8"
        },
        "content": "            for (String s : lines) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heze8"
        },
        "content": "                sb.append(s + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heze8"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heze8"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * Converts a task list to string format. Meant as a helper method."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heze8"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param startPhrase the starting phrase of the format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @param tasks the task list to be converted."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heze8"
        },
        "content": "     * @return the complete string format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heze8"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public String convertTaskListToString(String startPhrase, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heze8"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(startPhrase + \"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heze8"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heze8"
        },
        "content": "        while (i \u003c tasks.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heze8"
        },
        "content": "            sb.append(INDENTATION + i + \". \" + tasks.get(i - 1) + \"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heze8"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heze8"
        },
        "content": "        sb.append(INDENTATION + i + \". \" + tasks.get(i - 1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 66
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" spacing\u003d\"2.0\" style\u003d\"-fx-background-color: black; -fx-border-color: grey;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" blendMode\u003d\"HARD_LIGHT\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" blendMode\u003d\"LIGHTEN\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "heze8": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.scene.effect.Bloom?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.lib.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"322.0\" promptText\u003d\"Enter your tasks for today...\" style\u003d\"-fx-background-color: black; -fx-border-color: grey;\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "            \u003cFont name\u003d\"System Italic\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"557.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"75.0\" style\u003d\"-fx-background-color: black; -fx-border-color: grey;\" text\u003d\"Send\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "            \u003cBloom /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "         \u003c/effect\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: grey;\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"554.0\" prefWidth\u003d\"398.0\" style\u003d\"-fx-background-color: black; -fx-border-color: grey;\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "heze8": 30
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 10
    }
  },
  {
    "path": "src/test/java/duke/lib/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke.lib;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.common.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.task.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void testGetSize() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "        TaskList taskListUnderTest \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertEquals(0, taskListUnderTest.getSize());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Task todo \u003d new ToDo(\"eat\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "        taskListUnderTest.store(todo);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertEquals(1, taskListUnderTest.getSize());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void testMarkAsDone() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "        TaskList taskListUnderTest \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heze8"
        },
        "content": "            taskListUnderTest.markAsDone(1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heze8"
        },
        "content": "        } catch (DukeException expected) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heze8"
        },
        "content": "            assertEquals(\"There\u0027s no Task attached to that number\", expected.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heze8"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Task todo \u003d new ToDo(\"eat\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heze8"
        },
        "content": "        taskListUnderTest.store(todo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertEquals(todo, taskListUnderTest.markAsDone(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 34
    }
  },
  {
    "path": "src/test/java/duke/lib/datahandling/DataStorageStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke.lib.datahandling;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class DataStorageStub extends DataStorage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public DataStorageStub () {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "        super(\"data/save.txt\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "        return new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void write(ArrayList\u003cTask\u003e taskList) {}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 19
    }
  },
  {
    "path": "src/test/java/duke/lib/datahandling/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "package duke.lib.datahandling;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.ui.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "import duke.lib.common.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": "    public void isExitTest() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "        TaskList t \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": "        DataStorage storage \u003d new DataStorageStub();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "        Parser p \u003d new Parser(t, storage, new UI());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "        p.parse(\"deadline test /by 20/12/2019 1800\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertEquals(false, p.isExit());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "        p.parse(\"todo eat\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertEquals(false, p.isExit());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heze8"
        },
        "content": "        p.parse(\"bye\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heze8"
        },
        "content": "        assertEquals(true, p.isExit());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heze8"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heze8"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heze8": 25
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "todo read a book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": "whats up"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "deadline return book /by August 6th"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "event project meeting /at 1 to 3 pm :)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "heze8": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heze8"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heze8"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heze8"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heze8"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heze8"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heze8"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heze8"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heze8"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heze8"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heze8"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heze8"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heze8"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heze8"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heze8"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heze8"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heze8"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heze8"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "heze8": 21
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `Duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heze8"
        },
        "content": "Next, we create another Java class, `duke.Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heze8"
        },
        "content": "The `duke.Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heze8"
        },
        "content": "public class duke.Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "heze8"
        },
        "content": "Run `duke.Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "heze8": 4,
      "-": 106
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `Duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "heze8"
        },
        "content": "The last change that we have to make is to point our `duke.Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "heze8"
        },
        "content": "In `duke.Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "heze8": 2,
      "-": 292
    }
  }
]
