[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 32,
      "-": 15
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "belbel98": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/data/myDukeList.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": " 1. T | X | die"
      }
    ],
    "authorContributionMap": {
      "belbel98": 1
    }
  },
  {
    "path": "src/main/data/myDukeList1.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "1. T | O |  ajbgaesr"
      }
    ],
    "authorContributionMap": {
      "belbel98": 1
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.data.DukeData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * \u003ch1\u003eDuke\u003c/h1\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The Duke program allows users to manage and organise their to-do, deadlines, and events"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * all in one application. Users can add their tasks, marking them as done, list the tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * they have, and even delete them after they are done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class Duke { // handles all input and output"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private DukeData myData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Ui myUi;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Creates a Duke program."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.myData \u003d new DukeData();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.myUi \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Creates a Duke program with filePath as the path to save Duke\u0027s data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param filePath the path to save the Duke\u0027s data from user input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.myData \u003d new DukeData(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.myUi \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * This method runs the Duke program."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.myUi.showIntro();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String userCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        while (this.myUi.hasNextInput() \u0026\u0026"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                !(userCommand \u003d this.myUi.getCommand()).equals(\"bye\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            String output;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                Command cmd \u003d Parser.parse(userCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                assert cmd !\u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                output \u003d Ui.addLines(cmd.execute(this.myData, this.myUi));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                System.out.println(output);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                System.err.println(Ui.addLines(e.getMessage()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                System.err.println(Ui.addLines(e.getMessage()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.myUi.showFarewell();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * This method retrieves the data that Duke has stored fdr the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a DukeData representation of the data that has been stored"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public DukeData getData() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return this.myData;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * This is the main method that initiates the running of the Duke program."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param args Unused"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static void main(String[] args) { // handles all input and output"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Duke theDuke \u003d new Duke();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        theDuke.run();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * This method generates a response to user input."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            Command cmd \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            assert cmd !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return cmd.execute(this.myData, this.myUi);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return Ui.addLines(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 87,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.gui.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 14
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Deals with making sense of the user command,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * and simulates the supposed interaction from the command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * The parse method handles all input and output from the Scanner,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * as well as their corresponding interactions through the Duke program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param input the string of command that is to given to Duke"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return the Command is to be executed with the parsed input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static Command parse(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String[] inputSplit \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String cmdWord \u003d inputSplit[0]; // extract first only"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String cmdLine; // variable to store the rest of input if any"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            switch (cmdWord) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            case \"data\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                return new DataCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                return new ByeCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                cmdLine \u003d inputSplit[1]; // extract the rest of the line"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                int taskNo \u003d Integer.parseInt(cmdLine);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                return new DoneCommand(taskNo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                cmdLine \u003d inputSplit[1]; // extract the rest of the line"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                int taskNum \u003d Integer.parseInt(cmdLine);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                return new DeleteCommand(taskNum);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                cmdLine \u003d inputSplit[1]; // extract the rest of the line"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                if (cmdLine.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    throw new ToDoException(cmdLine);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    ToDo td \u003d new ToDo(cmdLine);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    return new AddCommand(td);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                cmdLine \u003d inputSplit[1]; // extract the rest of the line"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                if (cmdLine.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    throw new DeadlineException(cmdLine, 3);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                } else if (!cmdLine.contains(\"/by\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    throw new DeadlineException(cmdLine, 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    String[] cmdSplit \u003d cmdLine.split(\"/by \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    if (cmdSplit.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                        throw new DeadlineException(cmdLine, 3);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    } else if (cmdSplit[0].equals(\" \")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                        throw new DeadlineException(cmdLine, 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                        Deadline dl \u003d new Deadline(cmdSplit[0], cmdSplit[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                        return new AddCommand(dl);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                cmdLine \u003d inputSplit[1]; // extract the rest of the line"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                if (cmdLine.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    throw new EventException(cmdLine, 3);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                } else if (!cmdLine.contains(\"/at\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    throw new EventException(cmdLine, 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    String[] cmdSplitt \u003d cmdLine.split(\"/at \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    if (cmdSplitt.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                        throw new EventException(cmdLine, 3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    } else if (cmdSplitt[0].equals(\" \")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                        throw new EventException(cmdLine, 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                        Event ev \u003d new Event(cmdSplitt[0], cmdSplitt[1]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                        return new AddCommand(ev);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                cmdLine \u003d inputSplit[1]; // extract the rest of the line"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                return new FindCommand(cmdLine);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            case \"quote\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                return new QuoteCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            default: // if it is not any of the above commands"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                return new WrongCommand(input);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (ToDoException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            System.err.println(Ui.addLines(e.getMessage()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (DeadlineException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            System.err.println(Ui.addLines(e.getMessage()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (EventException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            System.err.println(Ui.addLines(e.getMessage()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 100
    }
  },
  {
    "path": "src/main/java/duke/Quote.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * A Quote is a phrase or sentence that will motivate the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class Quote {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private String quote; // quote itself"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private String author; // person who writes the quote"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Creates a Quote object with a string of quote and its author."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param fullQuote a String with a quote and its author"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Quote(String fullQuote) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String[] splitQuote \u003d fullQuote.split(\" - \", 2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.quote \u003d splitQuote[0];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.author \u003d splitQuote[1];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns the quote, with its author."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a String representation of the full quote"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return String.format(\"%s%n- %s\", this.quote, this.author);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 27
    }
  },
  {
    "path": "src/main/java/duke/QuoteGenerator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Generates a random Quote to brighten up the user\u0027s day."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class QuoteGenerator {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final Random RANDOMISER \u003d new Random();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final File QUOTES_FILE \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            new File(\"/Users/StudyBuddy/Desktop/CS2103/iP/duke/src/main/resources/quotes.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Quote[] allQuotes \u003d new Quote[74];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Creates a new QuoteGenerator and loads all the quotes available."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public QuoteGenerator() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        loadQuotes();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * This methods generates a random quote from the library."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a String representation of the randomised quote"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String getRandomQuote() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Quote randomQuote \u003d allQuotes[RANDOMISER.nextInt(allQuotes.length - 1)];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return randomQuote.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private void loadQuotes() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        int countQuote \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            // load the file of quotes into allQuotes using BufferedReader"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(QUOTES_FILE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            String nextQuote \u003d br.readLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            while (nextQuote !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                allQuotes[countQuote] \u003d new Quote(nextQuote);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                countQuote++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                nextQuote \u003d br.readLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            System.err.println(Ui.addLines(e.getMessage()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 49
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.data.DukeData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The Ui class handles all user interactions and is responsible for returning the correct"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * String representations of the output for the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final String LOGO \u003d \"____        _        \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final String LINE \u003d \"________________________________________________\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private QuoteGenerator quoteGenie;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Creates a new Ui object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.quoteGenie \u003d new QuoteGenerator();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Checks if there is any new input made by the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return true is there is more input, and false otherwise"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public boolean hasNextInput() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return this.sc.hasNext();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Gets the next command from the user\u0027s input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a String representation of the user\u0027s command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return this.sc.nextLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Greets the users, and asks users what they want Duke to do."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a String of Greetings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String showIntro() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String out \u003d String.format(\"%s%n Hello! I am Duke%n \" +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                \"What can I do for you?\", LOGO);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return addLines(out);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Lists out all the tasks the user has added, be it ToDo, Deadlines or Events,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * in the order of input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param tasks an ArrayList which consists of the Task objects"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a String representation of all Tasks in the list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String showList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        s.append(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            s.append(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            s.append(\" \").append(i).append(\".\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            Task t \u003d tasks.get(i - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            s.append(t.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return addLines(s.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Bids the user GoodBye after the user is done using Duke."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string of farewell words"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String showFarewell() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String bye \u003d String.format(\"GoodBye! Hope to see you again soon!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return addLines(bye);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Informs the user of the task added."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param task the Task to be added, which can be a ToDo, Deadline, or Event"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param list the TaskList which contains all Tasks in the list"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a String of information notifying the user of the added task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String showTaskAdded(Task task, TaskList list) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String added \u003d String.format(\"Got it! I\u0027ve added this task:\" +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                        \"%n   %s%n Now you have %d task in the list.\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                task.toString(), list.getSize());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return addLines(added);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Notifies the user of the task marked as done."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param taskNo the task number, in the order of input"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param list the TaskList which contains all Tasks in the list"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string to inform user of the task marked as done"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String showDone(int taskNo, TaskList list) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Task t \u003d list.getTask(taskNo - 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String done \u003d String.format(\"Nice! I\u0027ve marked this task as done:%n %s\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                t.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return addLines(done);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Notifies the user of the Task removed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param index the task number, in the order of input"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param list the list from which the Task is to be deleted from"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string to inform user of the task removed from the list"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String showDelete(int index, TaskList list) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Task t \u003d list.getTask(index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String del \u003d String.format(\"Noted. I\u0027ve removed this task:%n   %s%n\" +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                        \" Now you have %d tasks in the list.\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                t.toString(), list.getSize() - 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return addLines(del);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Shows the user his data that is stored in the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param dukeData the DukeData object that stores the user\u0027s data from Duke program"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a String representation of the data present in the local Storage file"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws IOException if an I/O Exception occurs"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String showData(DukeData dukeData) throws IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String data \u003d String.format(\"This is the list of tasks stored in your local storage disc:%s\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                dukeData.showDataFile());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return addLines(data);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * This method searches the TaskList for the tasks that contain the relevant keyword,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * and displays the details of the tasks."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param keyword the word that users key in to find the task with the keyword"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param list the TaskList to search for the tasks with the keyword"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a String representation of the list of tasks containing the keyword"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String showFind(String keyword, TaskList list) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        StringBuilder found \u003d new StringBuilder(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d list.getList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        for (int i \u003d 0; i \u003c list.getSize(); i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            Task t \u003d taskList.get(i);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            String desc \u003d t.getDesc();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            if (desc.contains(keyword)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                found.append(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                found.append(\" \").append(count).append(\".\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                found.append(t.toString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return addLines(found.toString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * This methods generates and displays a random quote to brighten the user\u0027s day."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a String representation of the"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String showQuote() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return addLines(this.quoteGenie.getRandomQuote());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Adds a line after every command."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param cmd the command output"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a String representation of the output with the lines"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static String addLines(String cmd) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String out \u003d String.format(\"%s%n%s%n\", cmd, LINE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 181
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.data.DukeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The AddCommand handles the adding of any ToDo, Deadline, or Event Tasks into the Duke program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Task taskToBeAdded;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Creates a new Command which adds a new task into the Duke Program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param task the task object to be added"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.taskToBeAdded \u003d task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Execute method which calls the method upon initialisation of the object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param dukeData the storage object of the program"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param ui       ui object which handles output of user interaction"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string representation of the output for the add command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String execute(DukeData dukeData, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        TaskList tasks \u003d dukeData.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        int index \u003d tasks.getSize() + 1; // since index is always -1 of size of arraylist"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        dukeData.addTask(index, this.taskToBeAdded);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return ui.showTaskAdded(this.taskToBeAdded, tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 37
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.data.DukeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The ByeCommand handles the Duke\u0027s farewell to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Execute method which calls the method upon initialisation of the object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param dukeData the storage object of the program"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param ui ui object which handles output of user interaction"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a String representation of the Duke\u0027s farewell"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String execute(DukeData dukeData, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        dukeData.exit();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return ui.showFarewell();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 23
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.data.DukeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Command is an interface which contains an execute method to handle user commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Execute method which calls the method upon initialisation of the object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param dukeData the storage object of the program"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param ui ui object which handles output of user interaction"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string representation of the output for that command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    String execute(DukeData dukeData, Ui ui) throws IOException, DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 21
    }
  },
  {
    "path": "src/main/java/duke/command/DataCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.data.DukeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The DataCommand handles the command where the user requests to view the data stored"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * in the local disc."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class DataCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Execute method which calls the method upon initialisation of the object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param dukeData the storage object of the program"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param ui       ui object which handles output of user interaction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string representation of the data file in the Duke program"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String execute(DukeData dukeData, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return ui.showData(dukeData);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 24
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.data.DukeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The DeleteCommand handles any command from the user to delete any task from the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Creates a new Delete Command with the given taskIndex."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param taskIndex the index number of the task to be deleted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public DeleteCommand(int taskIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Execute method which calls the method upon initialisation of the object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param dukeData the storage object of the program"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param ui       ui object which handles output of user interaction"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string representation of the output for the delete command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String execute(DukeData dukeData, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String deleted \u003d ui.showDelete(this.taskIndex - 1, dukeData.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        dukeData.removeTask(this.taskIndex - 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return deleted;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 34
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.data.DukeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The DoneCommand handles any the marking of a task as \u0027done\u0027."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Constructs a DoneCommand object which executes when a task is marked done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param taskIndex the index of the task which will be marked done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public DoneCommand(int taskIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Execute method which calls the method upon initialisation of the object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param dukeData the storage object of the program"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param ui       ui object which handles output of user interaction"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string representation of the Duke\u0027s response when a Task is marked done"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String execute(DukeData dukeData, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        dukeData.taskDone(this.taskIndex - 1); // array that is why -1 to index"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return ui.showDone(this.taskIndex, dukeData.load());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 33
    }
  },
  {
    "path": "src/main/java/duke/command/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Handles any command that is not understandable by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final String DUMB_DUKE \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private String error;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Constructs a DukeException object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param msg the message linked to the exception"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.error \u003d msg;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Gets the error message tied to the exception found."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string of error message for an unrecognisable command for Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return DUMB_DUKE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 25
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.data.DukeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The FindCommand helps the user search for tasks in the list which matches"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * the given keyword by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private String findKeyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Creates a FindCommand with the given keyword."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param keyword the word the user wants Duke to search for in the Duke\u0027s tasks list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.findKeyword \u003d keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Execute method which calls the method upon initialisation of the object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param dukeData the storage object of the program"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param ui       ui object which handles output of user interaction"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string representation of Duke\u0027s findings in its tasklist"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String execute(DukeData dukeData, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return ui.showFind(this.findKeyword, dukeData.load());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 33
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.data.DukeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The ListCommand handles the command where the user requests to view the tasks in his/her list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Execute method which calls the method upon initialisation of the object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param dukeData the storage object of the program"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param ui       ui object which handles output of user interaction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string representation of the list of tasks added to the Duke Program"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String execute(DukeData dukeData, Ui ui) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return ui.showList(dukeData.load().getList());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 21
    }
  },
  {
    "path": "src/main/java/duke/command/QuoteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.data.DukeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The QuoteCommand handles and generates quotes for the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class QuoteCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Execute method which calls the method upon initialisation of the object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param dukeData the storage object of the program"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param ui       ui object which handles output of user interaction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string representation of the output for the quote command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String execute(DukeData dukeData, Ui ui) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return ui.showQuote();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 21
    }
  },
  {
    "path": "src/main/java/duke/command/WrongCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.data.DukeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The Wrong command handles any command which is not understandable by Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class WrongCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private String givenCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Creates a WrongCommand whenever there is a Command Duke does not understand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param command the user input, or supposed command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public WrongCommand(String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.givenCommand \u003d command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Execute method which calls the method upon initialisation of the object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param dukeData the storage object of the program"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param ui       ui object which handles output of user interaction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string representation of the output for any command that Duke does not comprehend"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String execute(DukeData dukeData, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        throw new DukeException(this.givenCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 30
    }
  },
  {
    "path": "src/main/java/duke/data/DukeData.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The DukeData class manages the data of the user\u0027s task list by"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * updating the data file in the hard disk accordingly."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class DukeData {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    // every time Duke starts up, create and load a new or existing file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private File saveFile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private FileWriter fw;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private BufferedWriter bw;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Generates a new DukeData object which handles creation of a"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * new txt file in the default data directory."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public DukeData() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        // create a new File in the data file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        File dir \u003d new File(\"/Users/StudyBuddy/Desktop/CS2103/iP/duke/src/main/data\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            if (!dir.exists()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                dir.mkdir();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                String fileName \u003d \"myDukeList\" + \".txt\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                File tagFile \u003d new File(dir, fileName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    if (!tagFile.exists()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                        tagFile.createNewFile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    this.saveFile \u003d tagFile;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    System.err.println(\"Data file is null.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            // attach the file to FileWriter and BufferedWriter"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            this.fw \u003d new FileWriter(this.saveFile);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            this.bw \u003d new BufferedWriter(this.fw);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            System.err.println(\"Cant make Directory.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Generates a new DukeData object which handles creation of a"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * new txt file in the given data directory, filePath."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param filePath the file path where the user wants to save Duke\u0027s data to"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public DukeData(String filePath) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        // create a new File in the data file"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        File dir \u003d new File(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            if (!dir.exists()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                dir.mkdir();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                String fileName \u003d \"myDukeList\" + \".txt\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                File tagFile \u003d new File(dir, fileName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    if (!tagFile.exists()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                        tagFile.createNewFile();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    this.saveFile \u003d tagFile;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    System.err.println(\"Data file is null.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            // attach the file to FileWriter and BufferedWriter"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            this.fw \u003d new FileWriter(this.saveFile);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            this.bw \u003d new BufferedWriter(this.fw);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            System.err.println(\"Cant make Directory.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Adds and updates the given task to the file saved in the hard disk."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param index the index of the task to be added"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param task Task object which can represent ToDo, Deadline, or Event"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void addTask(int index, Task task) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.taskList.addTask(task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.bw.write(String.format(\" %d. %s\", index, task.toData()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.bw.newLine();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.bw.flush();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Updates the data file in the hard disk by removing the said task."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param index the index of the task to be removed"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws IOException if an I/O Exception occurs"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void removeTask(int index) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.taskList.removeTask(index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        // now we replace the file with the new updated data"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        FileWriter updatedFW \u003d new FileWriter(this.saveFile);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        BufferedWriter updatedBW \u003d new BufferedWriter(updatedFW);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        for (Task task : this.taskList.getList()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            updatedBW.write(String.format(\" %d. %s\", count, task.toData()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            updatedBW.newLine();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        updatedBW.flush();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.fw \u003d updatedFW;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.bw \u003d updatedBW;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Updates the data file in the hard disk by changing"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * the status of the given task."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param index the index of the task from the task list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws IOException if an I/O Exception occurs"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws FileNotFoundException when the file does not exist"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void taskDone(int index)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throws IOException, FileNotFoundException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.taskList.markTaskAsDone(index);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        // now we replace the file with the new updated data"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        FileWriter updatedFW \u003d new FileWriter(this.saveFile);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        BufferedWriter updatedBW \u003d new BufferedWriter(updatedFW);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        for (Task task : this.taskList.getList()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            updatedBW.write(String.format(\" %d. %s\", count, task.toData()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            updatedBW.newLine();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        updatedBW.flush();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.bw \u003d updatedBW;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.fw \u003d updatedFW;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Closes the BufferedWriter file upon exit of the Duke program."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws IOException if an I/O Exception occurs"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void exit() throws IOException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.bw.close();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns everything in the data file saved in the hard disk."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @reutrn a String representation of the tasks present in the hard disk"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws IOException if an I/O Exception occurs"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String showDataFile() throws IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        BufferedReader out \u003d new BufferedReader("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                new FileReader(this.saveFile));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String line \u003d out.readLine();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        StringBuilder dataOut \u003d new StringBuilder();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        while (line !\u003d null)  {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            dataOut.append(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            dataOut.append(line);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            line \u003d out.readLine();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        out.close();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return dataOut.toString();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Loads the data that DukeData manages in the form of a TaskList object."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return the TaskList object of the list that DukeData manages"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public TaskList load() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 187
    }
  },
  {
    "path": "src/main/java/duke/data/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Manages the list of tasks that the user has added."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Creates a new TaskList object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Creates a new TaskList object by importing an old TaskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param taskList an existing TaskList object, which is to be imported into new TaskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public TaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Adds a Task object to the current TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param task the Task object that is to be added"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Removes the Task with the given index from the current TaskList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param index the index number of the Task to be removed from the list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void removeTask(int index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.tasks.remove(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Marks the Task with the given index from the current TaskList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param index the index number of the Task to be marked as done"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void markTaskAsDone(int index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.tasks.get(index).markAsDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Gets the Task object with the given index index number from the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param index the index number of the Task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return the Task object with the given index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Gets the size of the current TaskList."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return the number of tasks in the TaskList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Gets an ArrayList of the Task objects."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return an ArrayList of the Task objects"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 76
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 61
    }
  },
  {
    "path": "src/main/java/duke/gui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * The main entry point for all JavaFX applications."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * The start method is called after the init method has returned,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * and after the system is ready for the application to begin running."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * NOTE: This method is called on the JavaFX Application Thread."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param stage the primary stage for this application, onto which the application scene can be set."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *              The stage will be embedded in the browser if the application was launched as an applet."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *              Applications may create other stages, if needed, but they will not be primary stages"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *              and will not be embedded in the browser."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 41
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * The application initialisation method."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 56
    }
  },
  {
    "path": "src/main/java/duke/task/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The DateTime class formats the DD/MM/YY HHMM format into a more"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * readable format, e.g. 2nd of January 2019 4PM."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final SimpleDateFormat DATETIME_FORMATGIVEN \u003d new SimpleDateFormat("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final String FORMAT_TO_SHOW \u003d \" \u0027of\u0027 MMMM yyyy, ha\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final SimpleDateFormat DATETIME_FORMATTER \u003d new SimpleDateFormat("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            FORMAT_TO_SHOW);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private String dateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Constructs a new DateTime object with the given date and time."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param dateTime the date/time string representation in the old format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws ParseException when the parameter dateTime given is"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * not presented in the given format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public DateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.date \u003d DATETIME_FORMATGIVEN.parse(dateTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * This method formats the date and time into the more readable format,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * and returns a string representation of it."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string representation of the given date and time in the new format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String getDateTimeString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String[] splitDate \u003d this.dateTime.split(\"/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String suffix \u003d getSuffix(Integer.parseInt(splitDate[0]));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String dateTimeString \u003d suffix + DATETIME_FORMATTER.format(this.date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return dateTimeString;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private String getSuffix(int d) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        switch (d % 10) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return d + \"st\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return d + \"nd\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return d + \"rd\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return d + \"th\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 55
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The Deadline class represents any tasks that have a description, and a deadline in nature."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Creates a Deadline object, which is also a Task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param description a description of the Deadline Task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param date the date of the Deadline which is to be done by"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Deadline(String description, String date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            this.dateTime \u003d new DateTime(date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            this.date \u003d this.dateTime.getDateTimeString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            System.err.println(\"Cant parse Date: \" + date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns a string representation of a Deadline object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string representation of a Deadline object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return String.format(\"[D][%s] %s(by: %s)\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    this.getStatusIcon(), this.description, this.date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns a string representation of the Event object to be saved"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * into the hard disk file for the Duke program."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return the data representation of the Event Task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return String.format(\"E | %s | %s | %s\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                this.getStatusIcon(), this.description, this.date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns a string representation of the expected Deadline in the new format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string of the deadline\u0027s date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "         return this.date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 53
    }
  },
  {
    "path": "src/main/java/duke/task/DeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The DeadlineException class handles any incorrect deadline input by the user,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * and prompts them to enter in the correct format."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class DeadlineException extends Exception{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final String MISSING_DESCRIPTION \u003d \" OOPS!!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final String MISSING_DATE \u003d \" OOPS!!! The date of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final String MISSING_BOTH \u003d \" OOPS!!! The description or date of an event cannot be empty.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private String error;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private int type; // 1 \u003d empty desc, 2 \u003d no date, 3 \u003d either"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Constructs a EventException object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param message the message linked to the exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param type the type of error that is to be handled in this class"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public DeadlineException(String message, int type) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.error \u003d message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Gets the error message tied to the exception found."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string of error message for the exception found in the Deadline object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (this.type \u003d\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return MISSING_DESCRIPTION;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } else if (this.type \u003d\u003d 2){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return MISSING_DATE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return MISSING_BOTH;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 37
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The Event class represents any tasks that have a description, and an event date in nature."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Creates an Event object, which is also a Task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param description a description of the Event Task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param date the date the Event will be held on"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Event(String description, String date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            this.dateTime \u003d new DateTime(date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            this.date \u003d this.dateTime.getDateTimeString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            System.err.println(\"Cant parse Date: \" + date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns a string representation of an Event object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string representation of an Event object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return String.format(\"[E][%s] %s(at: %s)\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                this.getStatusIcon(), this.description, this.date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns a string representation of the Event object to be saved"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * into the hard disk file for the Duke program."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return the data representation of the Event Task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return String.format(\"E | %s | %s | %s\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                this.getStatusIcon(), this.description, this.date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 45
    }
  },
  {
    "path": "src/main/java/duke/task/EventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The EventException class handles any incorrect event input by the user,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * and prompts them to enter in the correct format."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class EventException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final String MISSING_DESCRIPTION \u003d \" OOPS!!! The description of an event cannot be empty.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final String MISSING_DATE \u003d \" OOPS!!! The date of an event cannot be empty.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final String MISSING_BOTH \u003d \" OOPS!!! The description or date of an event cannot be empty.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private String error;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private int type; // 1 \u003d empty desc, 2 \u003d no date, 3 \u003d either"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Constructs a EventException object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param message the message linked to the exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param type the type of error that is to be handled in this class"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public EventException(String message, int type) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.error \u003d message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Gets the error message tied to the exception found."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string of error message for the exception found in the Event object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (this.type \u003d\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return MISSING_DESCRIPTION;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } else if (this.type \u003d\u003d 2){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return MISSING_DATE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return MISSING_BOTH;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 37
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Task is an abstract class that handles its concrete subclasses,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * ToDo, Deadline, and Event."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * A Task can have a status which can be marked as done, a method to"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * get its status icon and description, as well as its String representation."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Constructs a Task object (which cannot be initialised on its own)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param description a Description of the Task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Gets the status icon of the Task, of whether it has been marked"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * as done or not."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return Returns a \"O\" representing a Task that is marked done,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * and a \"X\" if a Task is not marked as done"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public final String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return (isDone ? \"O\" : \"X\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Marks the Task as done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public final void markAsDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Gets the Description of the Task Object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a description of the current Task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public final String getDesc() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns a string representation of the Task object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a String representation of the Task object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns a string representation of the Task object to be saved"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * into the hard disk file for the Duke program."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a String Returns a the data representation of the Task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public abstract String toData();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 61
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The ToDo class handles all Todo Tasks,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * which usually includes a description of the ToDo task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Creates a ToDo object which is also a Task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param description Description of the ToDo Task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns a string representation of a ToDo object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string representation of a ToDo object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return String.format(\"[T][%s] %s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns a string representation of the ToDo object to be saved"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * into the hard disk file for the Duke program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a the data representation of the ToDo Task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return String.format(\"T | %s | %s\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 34
    }
  },
  {
    "path": "src/main/java/duke/task/ToDoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * The ToDoException class handles any incorrect todo input by the user,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * and prompts them to enter in the correct format."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class ToDoException extends Exception{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final String MISSING_DESCRIPTION \u003d \" OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private String error;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Constructs a ToDoException object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param message the message linked to the exception"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ToDoException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.error \u003d message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Gets the error message tied to the exception found."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string of error message for the exception"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * found in the ToDo object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return MISSING_DESCRIPTION;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 27
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003cFont name\u003d\"Bradley Hand Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003cInsets left\u003d\"8.0\" right\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"69.0\" fitWidth\u003d\"69.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "belbel98": 23
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" opacity\u003d\"0.8\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" text\u003d\"Command Duke\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003cFont size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "belbel98": 23
    }
  },
  {
    "path": "src/test/java/DateTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.data.DateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void testDateTime() throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String date \u003d \"2/9/2019 1200\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Deadline dl \u003d new Deadline(\"Buy Gift\", date);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        DateTime dateTime \u003d new DateTime(date);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        assertEquals(dl.getDeadline(), dateTime.getDateTimeString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 18
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void testCheckDescription() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String desc \u003d \"Checking ToDo Task\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        ToDo todo \u003d new ToDo(desc);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        assertEquals(desc, todo.getDesc());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void testCheckDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String icon \u003d \"O\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String desc \u003d \"Checking ToDo icon\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        ToDo todo \u003d new ToDo(desc);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        assertEquals(icon, todo.getStatusIcon());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 23
    }
  }
]
