[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 47
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 100
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Circle clip \u003d new Circle(50, 50, 50);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Dialog box for automated duke."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param text String to be printed for automated duke."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param img Image of duke."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @return DialogBox of duke."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 70
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * The Duke program implements an application that"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * acts as a task manager for users that allows users to write task into a file and"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * update the file accordingly when users have completed their task/wish to delete a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @author Clarence Koh"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @since 29th August 2019"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    protected boolean isExit \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static final String filePath \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This storage deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * ui deals with interactions with the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * tasks contains the task list of users and operations like adding and removing tasks in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Class constructor of \u003ccode\u003eDuke\u003c/code\u003e that processes user input and outputs the tasks into a data file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * If a data file is already created in the given file path, the data file is updated according to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * the user\u0027s input. If file does not exist in the given file path, a new date file is created."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.storage \u003d new Storage(this.filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            this.tasks \u003d new TaskList(this.storage.loadFromFile());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            ui.printError(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            ui.printString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method is used to allow the execution of \u003ccode\u003eduke\u003c/code\u003e to take place until the user exits"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * the program. It allows the program to keep reading the user\u0027s input until the user exits the program."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        while (!this.isExit) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            if (!ui.isDoneReading()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                String userInput \u003d ui.userInput();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                Command c \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                if (c !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    this.isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                ui.printError(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ui.printBye();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (this.isExit) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                this.storage.saveToFile(this.tasks.getAllTasks());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                ui.printError(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            String out \u003d \"thisisexitcommand\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return out;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ui.resetOutput();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            if (c !\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                this.isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return ui.printString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            ui.printError(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return ui.printString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This is the main method where \u003ccode\u003eDuke\u003c/code\u003e is instantiated and executed using the \u003ccode\u003erun\u003c/code\u003e method."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * A default file path to /duke.txt is provided in the main method."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param args Unused"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 122,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 28
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Initialize the window."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                DialogBox.getDukeDialog(\"Hello! I\u0027m Duke!\\nWhat can I do?\", dukeImage)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (response.equals(\"thisisexitcommand\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 62
    }
  },
  {
    "path": "src/main/java/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[D][V] baby boy (by: 13 of December 2009, 07:00 PM)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[T][X] baby boy"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[T][V] baby boyd"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents the \u003ccode\u003eCommand\u003c/code\u003e to add new tasks into the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @author Clarence Koh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @since 29th August 2019"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Represents the task to be added."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    protected Task task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Class constructor. Enables the addition of the \u003ccode\u003etask\u003c/code\u003e to the task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param task The task to be added into the task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method allows for the execution of the add command which adds the stated task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * into the \u003ccode\u003eTaskList tasks\u003c/code\u003e."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param tasks The task lists which contains all the user added tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param ui The user interface which deals with user input and interaction."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ui.printAddTaskMessage(task.toString(), tasks.size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 44
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Command is the abstract base class for all commands in \u003ccode\u003eDuke\u003c/code\u003e application"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * which allows for the user to instruct what is to be done to the current task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @author Clarence Koh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @since 29th August 2019"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Determines whether the user intends to terminate \u003ccode\u003eDuke\u003c/code\u003e application in the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Class constructor for a default command which does not terminate the \u003ccode\u003eDuke\u003c/code\u003e application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method defines what the user wants to do in the \u003ccode\u003eDuke\u003c/code\u003e application, such as"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * delete a task, mark a task as completed, or add a new task to the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param tasks The task lists which contains all the user added tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param ui The user interface which deals with user input and interaction."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method checks if the command is one that requires the closing of \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the command calls for the termination of the application."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 51
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents the \u003ccode\u003eCommand\u003c/code\u003e to delete task from the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @author Clarence Koh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @since 29th August 2019"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Represents the zero-based index of the task to be deleted from the task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    protected int deletedTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param deleted The zero-based index of the task to be deleted from the task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public DeleteCommand(int deleted) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.deletedTask \u003d deleted;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method allows for the execution of the delete command which deletes the stated task from the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * \u003ccode\u003eTaskList tasks\u003c/code\u003e."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param tasks The task lists which contains all the user added tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param ui The user interface which deals with user input and interaction."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ui.printRemoveMessage(tasks.delete(this.deletedTask), tasks.size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 45
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents the \u003ccode\u003eCommand\u003c/code\u003e to mark a task as done from the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @author Clarence Koh"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @since 29th August 2019"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Represents the zero-based index of the task to be marked as done from the task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    protected int doneTask;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param doneTask The zero-based index of the task to be marked as done from the task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public DoneCommand(int doneTask) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.doneTask \u003d doneTask;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method allows for the execution of this command which marks the stated task from the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * \u003ccode\u003eTaskList tasks\u003c/code\u003e as done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param tasks The task lists which contains all the user added tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param ui The user interface which deals with user input and interaction."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        tasks.markAsDone(this.doneTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ui.printDone(tasks.get(this.doneTask).toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 44
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents the \u003ccode\u003eCommand\u003c/code\u003e to exit from the \u003ccode\u003eDuke\u003c/code\u003e application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @author Clarence Koh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @since 29th August 2019"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method when called results in the closing of all processes in the \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * and exits the program."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param tasks The task lists which contains all the user added tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param ui The user interface which deals with user input and interaction."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ui.printBye();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        super.isExit \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 38
    }
  },
  {
    "path": "src/main/java/duke/command/FindTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents the \u003ccode\u003eCommand\u003c/code\u003e to mark a task as done from the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @author Clarence Koh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @since 29th August 2019"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class FindTaskCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Represents the keywords to search for from the tasklist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    protected String keywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Class constructor specifying the keywords to search for from the tasklist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param keywords The keywords to be searched."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public FindTaskCommand(String keywords) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method when called searches through \u003ccode\u003etasks\u003c/code\u003e for the"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * keyword specified and prints out all tasks with the keyword."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param tasks The task lists which contains all the user added tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param ui The user interface which deals with user input and interaction."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d tasks.findTaskWithWord(this.keywords);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ui.printTaskList(matchingTasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 47
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents the \u003ccode\u003eCommand\u003c/code\u003e to list from the task list in"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * the \u003ccode\u003eDuke\u003c/code\u003e application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @author Clarence Koh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @since 29th August 2019"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method when called results in the listing of all the task from the task list in the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * \u003ccode\u003eDuke\u003c/code\u003e application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param tasks The task lists which contains all the user added tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param ui The user interface which deals with user input and interaction."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ui.printTaskList(tasks.getAllTasks());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 29
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents an Exception which is thrown during the running of the \u003ccode\u003eDuke\u003c/code\u003e."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Class constructor specifying the error message to be displayed to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param message The error message to be displayed to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 16
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.command.FindTaskCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * This class allows the \u003ccode\u003eDuke\u003c/code\u003e application to understand the user\u0027s input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * and executes the necessary checks to ensure that tasks are added neatly in"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * the task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @author Clarence Koh"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @since 29th August 2019"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method checks the to-do"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * tasks to ensure that the user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * includes the task to be added into the task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param tasks The user\u0027s input string in separated into an array."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws DukeException If there is no description of the tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static void todoCheck(String[] tasks) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (tasks.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method checks the \u003ccode\u003edeadline\u003c/code\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * tasks to ensure that the user input includes the task"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * to be added into the task list and also the date and time"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * of the task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param tasks The user\u0027s input string in separated into an array."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param userInput The user\u0027s input string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws DukeException If there is no specified date or task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static void deadlineCheck(String[] tasks, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (tasks.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } else if (!userInput.contains(\"/by\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"OOPS!!! Deadline must include /by (date to complete task).\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } else if (userInput.substring(userInput.indexOf(\"/by\") + 3).equals(\"\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                || userInput.substring(userInput.indexOf(\"/by\") + 4).equals(\"\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"OOPS!!! Please include the date to complete task after /by command.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method checks the \u003ccode\u003eevent\u003c/code\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * tasks to ensure that the user input includes the task"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * to be added into the task list and the date and time"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * of the event."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param tasks The user\u0027s input string in separated into an array."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param userInput The user\u0027s input string."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws DukeException If there is no specified date or task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static void eventCheck(String[] tasks, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (tasks.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } else if (!userInput.contains(\"/at\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"OOPS!!! Event must include /at (time of event).\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } else if (userInput.substring(userInput.indexOf(\"/at\") + 3).equals(\"\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                || userInput.substring(userInput.indexOf(\"/at\") + 4).equals(\"\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"OOPS!!! Please include the time of event after /at.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method checks to ensure that the user provides"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * a keyword to search for from the task list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param tasks The user\u0027s input split into an array of strings."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws DukeException If there is no keyword to search for."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static void findCheck(String[] tasks) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (tasks.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"OOPS!!! Please tell me what you want to find!!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method when called reformats the date input by the user to a Date object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param date The date string to be reformatted."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @return The \u003ccode\u003eDate\u003c/code\u003e in a formatted manner."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static Date dateFormatter(String date) throws DukeException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            Date parseDate \u003d formatter.parse(date);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return parseDate;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method when called will result in the returning of a \u003ccode\u003eCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * which can be executed to result in either a deletion of the task, an addition of"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * a task or to mark a task as done from the task list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param command The user\u0027s input string."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @return A class of command depending on the type of user input."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            String[] task \u003d command.split(\" \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            String instruction \u003d task[0];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            if (instruction.equals(\"done\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(task[1]);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                return new DoneCommand(taskNumber - 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            } else if (instruction.equals(\"delete\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    int taskNumber \u003d Integer.parseInt(task[1]);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    return new DeleteCommand(taskNumber - 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Provide a task number to delete!\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                switch (instruction) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                case \"todo\": {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        todoCheck(task);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        Task todo \u003d new Todo(command.substring(5));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        return new AddCommand(todo);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    } catch (DukeException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        System.err.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                case \"deadline\": {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        deadlineCheck(task, command);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        Task deadline \u003d new Deadline(command.substring(9, command.indexOf(\"/by\") - 1),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                dateFormatter(command.substring(command.indexOf(\"/by\") + 4)));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        return new AddCommand(deadline);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    } catch (DukeException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        System.err.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                case \"event\": {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        eventCheck(task, command);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        Task event \u003d new Event(command.substring(6, command.indexOf(\"/at\") - 1),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                dateFormatter(command.substring(command.indexOf(\"/at\") + 4)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        return new AddCommand(event);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    } catch (DukeException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        System.err.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                case \"find\": {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        findCheck(task);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        return new FindTaskCommand(command.substring(5).trim());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    } catch (DukeException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        System.err.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                default: {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 197
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Storage is the class which loads tasks from a hard drive into the \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * application to be processed, and also allows for the saving of tasks into the hard"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * drive when the user terminates the application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @author Clarence Koh"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @since 29th August 2019"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * The file path containing the hard drive from which tasks is read from and"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * into the \u003ccode\u003eDuke\u003c/code\u003e application. The same file from this file path is"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * updated when the user terminates the application."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Class constructor specifying which hard drive to retrieve tasks from and"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * the hard drive to write tasks into after application is terminated."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param filePath The location of the file containing tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method loads the tasks currently in the hard drive into an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * \u003ccode\u003eArrayList\u003c/code\u003e of tasks that is processed in the application."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @return The array of tasks that are currently in the hard drive."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFromFile() throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            File f \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            if (!f.exists()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                f.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                BufferedReader br \u003d new BufferedReader(new FileReader(f));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                String text;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                while ((text \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    String taskType \u003d text.charAt(1) + \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    switch (taskType) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    case \"T\": {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        Task todo \u003d new Todo(text.substring(7));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        if (text.substring(4, 5).equals(\"V\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            todo.markedAsDone();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        tasks.add(todo);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    case \"D\": {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        Task deadline \u003d new Deadline(text.substring(7, text.indexOf(\"by:\") - 2),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                fileTaskDateConverter(text.substring(text.indexOf(\"by:\") + 4, text.length() - 1)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        if (text.substring(4, 5).equals(\"V\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            deadline.markedAsDone();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        tasks.add(deadline);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    case \"E\": {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        Task event \u003d new Event(text.substring(7, text.indexOf(\"at:\") - 2),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                fileTaskDateConverter(text.substring(text.indexOf(\"at:\") + 4, text.length() - 1)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        if (text.substring(4, 5).equals(\"V\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                            event.markedAsDone();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        tasks.add(event);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    default: {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        throw new DukeException(\"Error occurred, invalid Task type found.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method formats the date of deadlines and events in the hard disk"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * and reformats it into a \u003ccode\u003eDate\u003c/code\u003e object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param date The string input of date to be reformatted."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @return The \u003ccode\u003eDate\u003c/code\u003e in a formatted manner."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private Date fileTaskDateConverter(String date) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd \u0027of\u0027 MMMM yyyy, hh:mm a\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            Date parseDate \u003d formatter.parse(date);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return parseDate;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method loads the tasks currently in the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * \u003ccode\u003eTaskList\u003c/code\u003e of tasks into the hard disk."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void saveToFile(ArrayList\u003cTask\u003e listOfInputs) throws DukeException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            File f \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            f.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(f));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            for (Task task : listOfInputs) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                bw.append(task.toString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                bw.append(\"\\n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 142
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents a task with a deadline to be met."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Represents the date by which the tasks is to be completed by."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param by The date by which the task is to be completed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Deadline(String description, Date by) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        SimpleDateFormat properFormat \u003d new SimpleDateFormat(\"dd \u0027of\u0027 MMMM yyyy, hh:mm a\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return \"[D]\" + \"[\" + super.getStatusIcon() + \"] \" + super.toString() + \" (by: \" + properFormat.format(this.by)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 32
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents an event that occurs at the user specified time and date."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Represents the date and time at which the event occurs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    protected Date at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Class constructor which specifies the description of the task and the time at which the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * event takes place."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param description The description of the event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param at The date and the time at which the event occurs"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Event(String description, Date at) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        SimpleDateFormat properFormat \u003d new SimpleDateFormat(\"dd \u0027of\u0027 MMMM yyyy, hh:mm a\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return \"[E]\" + \"[\" + super.getStatusIcon() + \"] \" + super.toString() + \" (at: \" + properFormat.format(this.at)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 34
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * The base class which for all tasks in the \u003ccode\u003eDuke\u003c/code\u003e application"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * which allows for the user to categorise tasks to be added into the task list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @author Clarence Koh"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @since 29th August 2019"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Represents the description of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Represents whether the task has been completed and marked as done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Class constructor specifying the description of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method displays to the user to show whether a task is done or not."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @return The symbol which signifies whether the task is done or not."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return (isDone ? \"V\" : \"X\"); // return tick or X symbols"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method marks tasks as completed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void markedAsDone() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method tells users whether the task has been completed or not."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @return \u003ccode\u003eboolean\u003c/code\u003e telling the user whether the task was done."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 67
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents the list of completed and uncompleted tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Represents the list of tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e loadedTasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.tasks \u003d loadedTasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method adds the \u003ccode\u003etask\u003c/code\u003e into the task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method removes the \u003ccode\u003etask\u003c/code\u003e from the task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param index The zero-based index of the task to be deleted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @return The task that was removed in a string format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public String delete(int index) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return this.tasks.remove(index).toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DukeException(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method marks the specified task in the task list as done."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param taskNumber The task to be marked as done."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void markAsDone(int taskNumber) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.tasks.get(taskNumber).markedAsDone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method retrieves all the task from the task list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @return The task lists."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method when called will go through \u003ccode\u003etasks\u003c/code\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * to find \u003ccode\u003eTask\u003c/code\u003e with the keyword specified \u003ccode\u003eword\u003c/code\u003e."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param word Keyword to search."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @return ArrayList of tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public ArrayList\u003cTask\u003e findTaskWithWord(String word) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ArrayList\u003cTask\u003e tasksWithWord \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        int numberOfTask \u003d this.tasks.size();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfTask; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            Task task \u003d this.tasks.get(i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            if (task.getDescription().contains(word)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                tasksWithWord.add(task);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return tasksWithWord;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 93
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents a to-do task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Class constructor specifying the task to be done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param desc The description of the to-do task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Todo(String desc) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return \"[T]\" + \"[\" + super.getStatusIcon() + \"] \" + super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 20
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * The class that handles interactions with the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @author Clarence Koh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * @since 29th August 2019"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Represents the scanner which reads user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method reads user input and returns it in a String."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @return The string format of user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public String userInput() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return this.sc.nextLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void resetOutput() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.output.delete(0, output.length());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Returns the output string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public String printString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Adds the message on to the output string object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void append(String message) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        output.append(message);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        output.append(\"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Check for data left unread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public boolean isDoneReading() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return sc.hasNextLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method prints welcome message when app is initiated."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        append(\"Hello, I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method prints out the tasks currently in the task list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param tasks The task list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void printTaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        append(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            append(counter + \".\" + task.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method prints the exit message to the user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void printBye() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        append(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        append(\"Press enter to exit the chat!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method prints all the messages for marking task as done."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param task The description of the task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void printDone(String task) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        append(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        append(task);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method prints all the tasks removal messages."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param task The description of the task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param size The size of the task list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void printRemoveMessage(String task, int size) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        append(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        append(task);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        append(\"Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * This method prints all tasks adding messages."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param task The description of the task."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param size The size of the task list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void printAddTaskMessage(String task, int size) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        append(\"Got it. I\u0027ve added this task.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        append(task);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        append(\"Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Append error message to the output string."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void printError(String error) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        append(error);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 129
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 19
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            Task task \u003d new Event(\"read book\", Parser.dateFormatter(\"6/6/2019 1900\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            task.markedAsDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            assertEquals(task.isDone(), true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            System.err.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 19
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Task task \u003d new Todo(\"read book\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(task.toString().equals(\"[T][X] read book\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 13
    }
  }
]
