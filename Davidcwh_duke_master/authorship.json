[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "test {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 32,
      "-": 15
    }
  },
  {
    "path": "data/archives.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Leisure"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "T|1|read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "E|1|Avenegers Endgame|24/04/2019 1800"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "E|1|football with jc friends|10/05/2019 1600"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/end"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Past Meetings"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "E|1|cs2101 OP1 meeting|05/09/2019 1400"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "E|1|cs2103T team meeting|12/09/2019 1330"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/end"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Assignments"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "D|1|literature readings|05/08/2019 2359"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/end"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 12
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "D|1|cs2100 assignment 1|15/09/2019 2359"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "E|0|charity run|14/09/2019 1600"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "T|0|buy birthday presents"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 3
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "1. [Introduction](#1-introduction)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "2. [Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "3. [Features](#3-features)  "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   3.1. [Viewing help](#31-viewing-help) : `help`   "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   3.2. [Adding a new task](#32-adding-a-new-task) : `todo`, `event`, `deadline`  "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   3.3. [Listing all tasks](#33-listing-all-tasks) : `list`  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   3.4. [Marking a task as done](#34-marking-a-task-as-done) : `done`   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   3.5. [Deleting a task](#35-deleting-a-task) : `delete`    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   3.6. [Searching for a task by keyword](#35-deleting-a-task) : `find`  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   3.7. [Archive commands](#36-searching-for-a-task-by-keyword)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "      * 3.7.1 [Creating an archive](#371-creating-an-archive) : `archive create`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "      * 3.7.2 [Adding a task to an archive](#372-adding-a-task-to-an-archive) : `archive add`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "      * 3.7.3 [Listing archive names](#373-listing-archive-names) : `archive list`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "      * 3.7.4 [Listing tasks in a particular archive](#374-listing-tasks-in-a-particular-archive) : `archive view`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "      * 3.7.5 [Listing tasks in all archives](#375-listing-tasks-in-all-archives) : `archive viewall`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "      * 3.7.6 [Deleting a task in an archive](#376-deleting-a-task-in-an-archive) : `archive delete`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "      * 3.7.7 [Deleting an entire archive](#377-deleting-an-entire-archive) : `archive deleteall`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "      * 3.7.8 [Unarchive a task](#378-unarchive-a-task) : `archive revert`   "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "      "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   3.8. [Exiting the program](#38-exiting-the-program) : `bye`  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Duke is a Personal Assistant Chatbot that helps users to keep track of various tasks.  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "1. Ensure you have Java `11` or above installed on your computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "2. Download the latest `duke-0.2.jar` [here.](https://github.com/Davidcwh/duke/releases/tag/A-Release)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for Duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "4. Create a folder named `data` in the home folder as well and create two text files in `data` named `tasks.txt` and `archives.txt`."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " These files will store saved tasks and archives.  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "5. Double-click the file to start the app. The GUI should appear in a few seconds. "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "![Image of Duke GUI](https://github.com/Davidcwh/duke/blob/master/docs/Ui.png.PNG?raw\u003dtrue)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "6. Type the command in the command box and press `Enter` or click the `send` button to execute it.  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "e.g. typing `help` and pressing `Enter` will display the list of commands available."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "7. Some example commands you can try:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   * `list` : lists all tasks "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   * `event david\u0027s birthday party /at 13/02/2019 1800` : adds an `event` task named `david\u0027s birthday party` to list of tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   * `delete 3` : deletes the 3rd task shown in the current list of tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "   * `bye` : exits the app."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "8. Refer to [Section 3, \"Features\"](#3-features) for details of each command.  "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "## 3. Features "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "### 3.1 Viewing help "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Displays a full list of Duke commands and descriptions of what they do.  "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "### 3.2 Adding a new task "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Creates a new task and adds it to the current list of tasks.  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "There are 3 types of tasks: `todo`, `event`, `deadline`.  "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "`event` and `deadline` tasks require a 24 hour format date and time attached while `todo` tasks do not."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Format:  "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "`todo [description]`  "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "`event [description] /at [dd/mm/yyy hh:mm]`  "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "`deadline [description] /by [dd/mm/yyy hh:mm]`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Example(s): "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `todo buy david\u0027s birthday present`  "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Creates a `todo` task"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `event david\u0027s birthday party /at 13/02/2019 1800`  "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Creates an `event` task"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `deadline essay assignment /by 15/09/2019 2359`  "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Creates a `deadline` task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "### 3.3 Listing all tasks "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Displays the current list of tasks.  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "### 3.4 Marking a task as done"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Marks a specified task in the list of tasks as done.  "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Task to be marked done is indicated by its index number in the current list of tasks. "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Format: `done [task\u0027s list index number]`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Example(s):  "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `done 2`  "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Marks the 2nd task in the task list as done."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "### 3.5 Deleting a task"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Deletes a specified task in the list of tasks.  "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Task to be deleted is indicated by its index number in the current list of tasks.   "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Format: `delete [task\u0027s list index number]` "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Example(s):  "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `delete 3`  "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Deletes the 3rd task in the task list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "### 3.6 Searching for a task by keyword"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Finds and displays tasks whose description contains the given keyword.  "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Format: `find [keyword]`  "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Example(s):  "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `find book`  "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Displays any task with the keyword \"book\" in its description."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "### 3.7 Archive commands  "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Tasks are able to be removed from the current list of tasks and stored into an archive.  "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The archive extension has various features that can be used with the following commands."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "All archive commands are preceded with the `archive` command word."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#### 3.7.1 Creating an archive  "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Creates a new empty archive.  "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Format: `archive create [archive name]`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Example(s):  "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `archive create Due assignments`  "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "A new empty archive named `Due assignments` is created."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#### 3.7.2 Adding a task to an archive"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Removes the specified task from the current list of tasks and adds it to the specified archive.  "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The task to be archived is indicated by its index number in the current list of tasks and "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "the archive to add the task to is indicated by the archive\u0027s name."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Format: `archive add [task\u0027s list index number] [archive name]`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `archive add 4 Leisure`  "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Archives the 4th task in the current list of tasks into the `Leisure` archive."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#### 3.7.3 Listing archive names"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Displays a list of existing archives\u0027 names."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Format: `archive list`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#### 3.7.4 Listing tasks in a particular archive"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Displays the list of tasks in a specified archive."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Format: `archive view [archive name]`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `archive view 2018 events`  "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Displays the list of tasks in the `2018 events` archive."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#### 3.7.5 Listing tasks in all archives"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Displays all archived tasks at once, grouped by archive."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Format: `archive viewall`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#### 3.7.6 Deleting a task in an archive"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Deletes the specified task in the specified archive.  "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "the archive to delete the task from is indicated by the archive\u0027s name."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "The task to be deleted is indicated by its index number in the archive\u0027s list of tasks."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Format: `archive delete [task\u0027s archive list index number] [archive name]`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Example(s):  "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `archive delete 5 Past assignments`  "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Deletes the 5th task in the `Past assignment` archive."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#### 3.7.7 Deleting an entire archive"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Deletes the specified archive, including all the tasks in it."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Format: `archive deleteall [archive name]`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Example(s):  "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `archive deleteall March deadlines`  "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Deletes the `March deadlines` archive, including all the tasks in it."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "#### 3.7.8 Unarchive a task"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Removes the specified task from the specified archive and add it to the current list of tasks."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Format: `archive revert [task\u0027s archive list index number] [archive name]`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Example(s):  "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "* `archive revert 7 Leisure`  "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Removes the 7th task in the `Leisure` archive and adds it back ot the current list of tasks."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "### 3.8 Exiting the program"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Displays the exit message and closes the program."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "Format: `bye`"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 172,
      "-": 12
    }
  },
  {
    "path": "src/main/java/AddArchiveTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of adding a Task object from a Duke object\u0027s lists of tasks to an archive."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class AddArchiveTaskCommand extends ArchiveCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private String archiveName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates an AddArchiveTaskCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskNumber Index of task object to be archived."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveName Name of archive to add task into."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public AddArchiveTaskCommand(int taskNumber, String archiveName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archiveName \u003d archiveName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the adding of a Task object from a Duke object\u0027s lists of tasks to an archive."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the add task to archive message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object to add the task to."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display add task message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskStorage Duke object\u0027s TaskStorage object to access tasks file for loading/saving normal tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveStorage Duke object\u0027s ArchiveStorage object to access archives file for loading/saving archives."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String add task to archive message."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidCommandDukeException Thrown when the archive name or task index entered is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, TaskStorage taskStorage, ArchiveStorage archiveStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                          HashMap\u003cString, TaskList\u003e archives) throws InvalidCommandDukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (!archives.containsKey(archiveName)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!! There isn\u0027t an existing archive with the name \" + archiveName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (archiveName.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!! Please enter an archive name!!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c tasks.taskListSize()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            Task archivedTask \u003d tasks.getTask(taskNumber);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            tasks.deleteTask(taskNumber);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            TaskList archive \u003d archives.get(archiveName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            archive.addTask(archivedTask);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return ui.showAddArchiveTaskMessage(archiveName, archive, archivedTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!! There is no task labelled that number!!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 55
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of adding a Task object into a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected Task task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates an AddCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param task Task object to be added."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the adding of the Task object into a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The add task message is returned."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object to add the task to."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display add task message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskStorage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveStorage Duke object\u0027s ArchiveStorage object to access archives file for loading/saving archives."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String add task message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, TaskStorage taskStorage, ArchiveStorage archiveStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                          HashMap\u003cString, TaskList\u003e archives) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        tasks.addTask(this.task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // Precondition for showAddTaskMessage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assert tasks.taskListSize() \u003e 0 : \"List of Tasks should be at least 1 after adding new task\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return ui.showAddTaskMessage(this.task, tasks.taskListSize());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 38
    }
  },
  {
    "path": "src/main/java/ArchiveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Abstract class to represent an archive command to be executed when an archive instruction is entered"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * into a Duke object."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public abstract class ArchiveCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 7
    }
  },
  {
    "path": "src/main/java/ArchiveStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Deals with loading/saving a Duke object\u0027s archives from/to a file in the hard drive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ArchiveStorage extends Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /** The string used to mark the end of an archive in the text file. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private String endOfArchiveMarker \u003d \"/end\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates an ArchiveStorage object with the file\u0027s file path as the argument."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param filePath String of file\u0027s filepath."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ArchiveStorage(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Accesses the file and extracts tasks according to their respective archives,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * saving the tasks of each archive into its own TaskList object and storing all Taskist archives into a HashMap."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Each archive is hashed with its archive name as the key."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives Archives of tasks extracted from the file will be added to this HashMap."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void getArchivedTasksFromFile(HashMap\u003cString, TaskList\u003e archives) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            File taskFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            Scanner scanner \u003d new Scanner(taskFile);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String currentArchiveName \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            TaskList currentArchiveTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                String textLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                if (isEndOfArchiveMarker(textLine)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    archives.put(currentArchiveName, currentArchiveTasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                } else if (isArchiveName(textLine)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    currentArchiveName \u003d textLine;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    currentArchiveTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    currentArchiveTasks.addTask(stringToTask(textLine));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.fileAccessStatus \u003d \"Previously saved archives successfully loaded :)\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.fileAccessStatus \u003d \"Any previously saved archives were not be loaded: File not found :(\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (InvalidTaskArgumentDukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.fileAccessStatus \u003d \"Any previously saved archives were not be loaded: Invalid format in file :(\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * saves the tasks in the TaskList archives into the file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void loadArchivedTasksToFile(HashMap\u003cString, TaskList\u003e archives) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            List\u003cString\u003e archiveNames \u003d new ArrayList\u003c\u003e(archives.keySet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            for (int archiveIndex \u003d 0; archiveIndex \u003c archiveNames.size(); archiveIndex++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                String archiveName \u003d archiveNames.get(archiveIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                fileWriter.write(archiveName + System.lineSeparator());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                TaskList archiveTasks \u003d archives.get(archiveName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                for (int i \u003d 0; i \u003c archiveTasks.taskListSize(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    fileWriter.write(taskToString(archiveTasks.getTask(i)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    fileWriter.write(System.lineSeparator());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                fileWriter.write(endOfArchiveMarker);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                if (archiveIndex !\u003d archiveNames.size() - 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    fileWriter.write(System.lineSeparator());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Checks if the given String is a valid archive name."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param text String to be determined if valid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return true if the given string is a valid archive name, false otherwise."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private boolean isArchiveName(String text) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String[] split \u003d text.split(\"\\\\|\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return split.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean isEndOfArchiveMarker(String text) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return text.equals(endOfArchiveMarker);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 108
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Abstract class to represent a command to be executed when an input is entered into a Duke object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, TaskStorage taskStorage, ArchiveStorage archiveStorage,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                                   HashMap\u003cString, TaskList\u003e archives) throws InvalidCommandDukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Indicates the exit condition of the running Duke object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return false by default, only overridden in ExitCommand to return true."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 20
    }
  },
  {
    "path": "src/main/java/CreateArchiveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of creating a new archive by adding a new TaskList object to a Duke objects\u0027s"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * HashMap of archive TaskLists."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class CreateArchiveCommand extends ArchiveCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private String archiveName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a CreateArchiveCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveName Name of new archive to be created."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public CreateArchiveCommand(String archiveName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archiveName \u003d archiveName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the creation of a new archive."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the create new archive message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object to add the task to."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display add task message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskStorage Duke object\u0027s TaskStorage object to access tasks file for loading/saving normal tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveStorage Duke object\u0027s ArchiveStorage object to access archives file for loading/saving archives."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String create new archive message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidCommandDukeException Thrown when the archive name entered is invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, TaskStorage taskStorage, ArchiveStorage archiveStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                          HashMap\u003cString, TaskList\u003e archives) throws InvalidCommandDukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (archiveStorage.isEndOfArchiveMarker(archiveName) || archiveName.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!! Invalid archive name entered, please choose another name!!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (archives.containsKey(archiveName)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!! There is already an existing archive with the same name!!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archives.put(archiveName, new TaskList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return ui.showCreateArchiveMessage(archiveName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 47
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents a deadline, which is a type of task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * An deadline has a description and is due by a specific date/time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected Date byDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String hour;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String minute;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a deadline object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts the String argument for the deadline date/time into a date object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * If the deadline date/time argument is not in the required format, an exception is thrown."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param description The string description of the deadline created."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param by The String of the deadline time/date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidTaskArgumentDukeException if \"by\" contains invalid information."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Deadline(String description, String by) throws InvalidTaskArgumentDukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String[] dateTime \u003d by.split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String[] date \u003d dateTime[0].split(\"/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy hh:mm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.day \u003d date[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.month \u003d date[1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.year \u003d date[2];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.hour \u003d dateTime[1].substring(0, 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.minute \u003d dateTime[1].substring(2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.byDate \u003d format.parse(day + \"/\" + month + \"/\" + year + \" \" + hour + \":\" + minute);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidTaskArgumentDukeException(\"OOPS!!! The format of deadline timing is invalid.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts the deadline\u0027s date object into the required format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return The String of the deadline\u0027s date/time in the required format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String dateToString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        SimpleDateFormat format;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (this.day.equals(\"1\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027st of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (this.day.equals(\"2\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027nd of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (this.day.equals(\"3\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027rd of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027th of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return format.format(this.byDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dateToString() + \")\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 78
    }
  },
  {
    "path": "src/main/java/DeleteAllArchiveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of deletion an entire archive of tasks from a Duke object\u0027s HashMap of archive Tasklists."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DeleteAllArchiveCommand extends ArchiveCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private String archiveName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a DeleteAllArchiveCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveName Name of archive to be deleted."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public DeleteAllArchiveCommand(String archiveName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archiveName \u003d archiveName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the deletion of an entire archive and its tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the delete entire archive message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object to add the task to."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display add task message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskStorage Duke object\u0027s TaskStorage object to access tasks file for loading/saving normal tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveStorage Duke object\u0027s ArchiveStorage object to access archives file for loading/saving archives."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String delete entire archive message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidCommandDukeException Thrown when the archive name entered is invalid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, TaskStorage taskStorage, ArchiveStorage archiveStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                          HashMap\u003cString, TaskList\u003e archives) throws InvalidCommandDukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (!archives.containsKey(archiveName)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!! There isn\u0027t an existing archive with the name \" + archiveName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (archiveName.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!! Please enter an archive name!!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archives.remove(archiveName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return ui.showDeleteAllArchiveMessage(archiveName, archives);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 44
    }
  },
  {
    "path": "src/main/java/DeleteArchiveTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of deletion a task from an archive in a Duke object\u0027s HashMap of archive Tasklists."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DeleteArchiveTaskCommand extends ArchiveCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private String archiveName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a DeleteArchiveTaskCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskNumber Index of task in archive to be deleted."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveName Name of archive to delete task from."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public DeleteArchiveTaskCommand(int taskNumber, String archiveName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archiveName \u003d archiveName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the deletion of a task from an archive."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the delete archive task message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object to add the task to."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display add task message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskStorage Duke object\u0027s TaskStorage object to access tasks file for loading/saving normal tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveStorage Duke object\u0027s ArchiveStorage object to access archives file for loading/saving archives."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String delete archive task message."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidCommandDukeException Thrown when the archive name or task index entered is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, TaskStorage taskStorage, ArchiveStorage archiveStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                          HashMap\u003cString, TaskList\u003e archives) throws InvalidCommandDukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (!archives.containsKey(archiveName)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!! There isn\u0027t an existing archive with the name \" + archiveName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (archiveName.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!! Please enter an archive name!!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        TaskList archive \u003d archives.get(archiveName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c archive.taskListSize()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            Task removedTask \u003d archive.getTask(taskNumber);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            archive.deleteTask(taskNumber);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (archive.taskListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                archives.remove(archiveName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return ui.showDeleteArchiveTaskMessage(removedTask, archiveName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!! There is no task labelled that number!!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 57
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of deleting a Task object from a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected int taskNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a DeleteCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskNumber Index of the Task object to be deleted."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the deletion of the Task object from a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The given index of task to be deleted is first checked to be valid or not."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * After deletion, the delete task message is returned."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object that contains task to be deleted."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display delete task message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskStorage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveStorage Duke object\u0027s ArchiveStorage object to access archives file for loading/saving archives."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String delete task message."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidCommandDukeException Thrown when an invalid task number index is given so no Task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *     object can be retrieved from the TaskList object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, TaskStorage taskStorage, ArchiveStorage archiveStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                          HashMap\u003cString, TaskList\u003e archives) throws InvalidCommandDukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c tasks.taskListSize()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            Task removedTask \u003d tasks.getTask(taskNumber);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            tasks.deleteTask(taskNumber);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return ui.showDeleteTaskMessage(removedTask, tasks.taskListSize());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!!! There is no task labelled that number!!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 44
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.SnapshotParameters;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Represents the dialog box in the GUI that display the text of user and Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param l Label object containing text to be displayed in dialog box."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param iv Contains picture to be displayed in dialog box."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param color String code for background color of dialog box."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public DialogBox(Label l, ImageView iv, String color) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // set text box radius and color"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        l.setStyle(\"-fx-background-color:\" + color + \"; -fx-background-radius: 20\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        l.setPadding(new Insets(15, 15, 15, 15));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // Set background color of dialogbox"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.setStyle(\"-fx-background-color:PEACHPUFF\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Rectangle clip \u003d new Rectangle("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                displayPicture.getFitWidth(), displayPicture.getFitHeight()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        clip.setArcWidth(100);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        clip.setArcHeight(100);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // snapshot the rounded image."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        SnapshotParameters parameters \u003d new SnapshotParameters();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        parameters.setFill(Color.TRANSPARENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        WritableImage image \u003d displayPicture.snapshot(parameters, null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // remove the rounding clip so that our effect can show through."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        displayPicture.setClip(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // store the rounded image in the imageView."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        displayPicture.setImage(image);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns a dialog box to display text by the user."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param l Label object containing text from the user to be displayed in dialog box."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param iv Contains the user\u0027s picture to be displayed in dialog box."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return dialog box to display text by the user."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return new DialogBox(l, iv, \"CORAL\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns a dialog box to display text by Duke."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param l Label object containing text from Duke to be displayed in dialog box."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param iv Contains the Duke\u0027s picture to be displayed in dialog box."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return dialog box to display text by the Duke."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        var db \u003d new DialogBox(l, iv, \"ORANGE\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 97
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of marking a Task object as done from a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected int taskNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a DoneCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskNumber Index of the Task object to be marked as done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the marking of the Task object from a Duke object\u0027s TaskList object as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The given index of task to be marked as done is first checked to be valid or not."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * After being marked, the marked task as done message is returned."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object that contains task to be marked as done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display task marked as done  message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskStorage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveStorage Duke object\u0027s ArchiveStorage object to access archives file for loading/saving archives."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String marked task as done message."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidCommandDukeException Thrown when an invalid task number index is given so no Task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *     object can be retrieved from the TaskList object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, TaskStorage taskStorage, ArchiveStorage archiveStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                          HashMap\u003cString, TaskList\u003e archives) throws InvalidCommandDukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c tasks.taskListSize()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            tasks.markAsDone(taskNumber);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return ui.showMarkTaskAsDoneMessage(tasks.getTask(taskNumber));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!! There is no task labelled that number!!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 43
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * A program that manages and keeps track of a list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Features include adding and deleting tasks, as well as displaying list of current tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Tasks can be marked as done once the user has completed it."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private TaskStorage taskStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private ArchiveStorage archiveStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private HashMap\u003cString, TaskList\u003e archives;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private AnchorPane mainLayout;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private int stageHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private int stageWidth;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/drakeNO.jpg\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/drakeYES.jpg\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a Duke Object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        stageHeight \u003d 800;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        stageWidth \u003d 600;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        taskStorage \u003d new TaskStorage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveStorage \u003d new ArchiveStorage(\"data/archives.txt\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archives \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        taskStorage.getTasksFromFile(tasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveStorage.getArchivedTasksFromFile(archives);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Processes a String input and returns the required String message."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param input String command from the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return The response from Duke to the given input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String run(String input) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            assert c !\u003d null : \"Command should not be null\"; //Precondition for execute method"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return c.execute(tasks, ui, taskStorage, archiveStorage, archives);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return ui.showExceptionError(e);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        setUpStageComponents(stage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        formatComponents(stage, \"Duke\", stageWidth, stageHeight);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        displayLogo();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            handleUserInput(stage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            handleUserInput(stage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Initialises the different components of the Duke GUI."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param stage Stage of the GUI."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private void setUpStageComponents(Stage stage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Formats the components in the Duke GUI to specified heights and widths."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param stage Stage of the GUI."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param title Title of the window Duke runs on."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param stageWidth Width of the stage."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param stageHeight Height of the stage."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private void formatComponents(Stage stage, String title, int stageWidth, int stageHeight) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        final int SCROLL_PANE_WIDTH \u003d this.stageWidth - 15;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        final int SCROLL_PANE_HEIGHT \u003d this.stageHeight - 65;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        final int USER_INPUT_WIDTH \u003d this.stageWidth - 75;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        final int SEND_BUTTON_WIDTH \u003d 55;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        stage.setTitle(title);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        stage.setMinHeight(stageHeight);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        stage.setMinWidth(stageWidth);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        mainLayout.setPrefSize(stageWidth, stageHeight);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scrollPane.setPrefSize(SCROLL_PANE_WIDTH, SCROLL_PANE_HEIGHT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        userInput.setPrefWidth(USER_INPUT_WIDTH);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        sendButton.setPrefWidth(SEND_BUTTON_WIDTH);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * the dialog container. Clears the user input after processing. If the user input is the exit command  \"bye\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * closes the application after 2 seconds."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param stage Javafx stage to be closed if input is \"bye\"."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private void handleUserInput(Stage stage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (userInput.getText().equals(\"bye\")) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            delay.setOnFinished(event -\u003e stage.close());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private void displayLogo() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String logo2 \u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                \"DDD    U     U   K     K    EEEEEE \\n\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        + \"D    D   U     U    K  K     E    \\n\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        + \"D     D  U     U    K K      EEEE  \\n\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        + \"D    D   U     U    K  K     E    \\n\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        + \"DDD    UUUU  K      K   EEEEEE \\n\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Label greetingText \u003d new Label(\"Hello I\u0027m\\n\" + logo2 + \"\\n\" + ui.showWelcomeMessage() + \"\\n\\n\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + taskStorage.getFileAccessStatus() + \"\\n\" + archiveStorage.getFileAccessStatus());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(greetingText, new ImageView(duke)));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Passes the String input from the GUI to the Duke\u0027s run method to process it."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the response from Duke."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param input String input from the GUI"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String response from Duke to be displayed back to the user."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return run(input);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Main Method of Duke object."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param args argument of main method."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 222,
      "-": 9
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents an exception that is thrown when any error occurs while a Duke object is running."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 8
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents an event, which is a type of task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * An event has a description and starts at a specific date/time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected Date atDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String year;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String hour;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String minute;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates an event object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts the String argument for the event date/time into a date object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * If the event date/time argument is not in the required format, an exception is thrown."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param description The string description of the event created."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param at The String of the event time/date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidTaskArgumentDukeException if \"at\" contains invalid information."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Event(String description, String at) throws InvalidTaskArgumentDukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy hh:mm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String[] dateTime \u003d at.split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String[] date \u003d dateTime[0].split(\"/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.day \u003d date[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.month \u003d date[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.year \u003d date[2];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.hour \u003d dateTime[1].substring(0, 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.minute \u003d dateTime[1].substring(2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.atDate \u003d format.parse(day + \"/\" + month + \"/\" + year + \" \" + hour + \":\" + minute);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidTaskArgumentDukeException(\"OOPS!!! The format of event timing is invalid.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts the event\u0027s date object into the required format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return The String of the event\u0027s date/time in the required format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String dateToString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        SimpleDateFormat format;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (this.day.equals(\"1\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027st of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (this.day.equals(\"2\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027nd of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (this.day.equals(\"3\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027rd of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            format \u003d new SimpleDateFormat(\"d\" + \"\u0027th of \u0027\" + \"MMMM yyyy\" + \"\u0027, \u0027\" + \"hh:mma\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return format.format(this.atDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateToString() + \")\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 76
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of exiting a Duke object run."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Contains the method calls to execute this command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the exit from a Duke object\u0027s run process."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Task objects are saved into the Duke object\u0027s filepath and"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * the exit message is returned."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object of the Duke object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display the tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskStorage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveStorage Duke object\u0027s ArchiveStorage object to access archives file for loading/saving archives."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String exit message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, TaskStorage taskStorage, ArchiveStorage archiveStorage,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                          HashMap\u003cString, TaskList\u003e archives) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        taskStorage.loadTasksToFile(tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        archiveStorage.loadArchivedTasksToFile(archives);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return ui.showByeMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Indicates the exit condition of the running Duke object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return To stop the Duke object from running, returns true."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 38
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of finding tasks with a specified keyword in a Duke object\u0027s tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String keyWord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a FindCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param keyWord Keyword to search for in the list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public FindCommand(String keyWord) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.keyWord \u003d keyWord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the search and retrieval of all the Task objects in a Duke object\u0027s TaskList object that"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * contains the keyword. The tasks as retrieved as a new TaskList object which is then listed to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object to search in."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display any results from the search."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskStorage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveStorage Duke object\u0027s ArchiveStorage object to access archives file for loading/saving archives."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String list of tasks found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, TaskStorage taskStorage, ArchiveStorage archiveStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                          HashMap\u003cString, TaskList\u003e archives) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        TaskList tasksWithKeyword \u003d tasks.findTasks(this.keyWord);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        // Postcondition for findTasks method."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assert tasksWithKeyword !\u003d null : \"List of tasks returned from search should never be null\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return ui.showFindTasksMessage(tasksWithKeyword);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 37
    }
  },
  {
    "path": "src/main/java/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of displaying Duke\u0027s list of help commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the display of Duke\u0027s list of help commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object to add the task to."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display add task message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskStorage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveStorage Duke object\u0027s ArchiveStorage object to access archives file for loading/saving archives."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String list of help commands"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, TaskStorage taskStorage, ArchiveStorage archiveStorage,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                          HashMap\u003cString, TaskList\u003e archives) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return ui.showHelpMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 23
    }
  },
  {
    "path": "src/main/java/InvalidCommandDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents an exception that is thrown when an invalid command is entered"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * into a Duke object."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class InvalidCommandDukeException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public InvalidCommandDukeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 9
    }
  },
  {
    "path": "src/main/java/InvalidTaskArgumentDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents an exception that is thrown when a task object is created with invalid arguments."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class InvalidTaskArgumentDukeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public InvalidTaskArgumentDukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 8
    }
  },
  {
    "path": "src/main/java/InvalidTaskDescriptionDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents an exception that is thrown when a task object is created with an invalid description argument."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class InvalidTaskDescriptionDukeException extends InvalidTaskArgumentDukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public InvalidTaskDescriptionDukeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 9
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 7
    }
  },
  {
    "path": "src/main/java/ListArchiveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of listing the names of all archives in a Duke object\u0027s HashMap of archive Tasklists."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ListArchiveCommand extends ArchiveCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the listing the names of all archives."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the list archive message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object to add the task to."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display add task message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskStorage Duke object\u0027s TaskStorage object to access tasks file for loading/saving normal tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveStorage Duke object\u0027s ArchiveStorage object to access archives file for loading/saving archives."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String list archive message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, TaskStorage taskStorage, ArchiveStorage archiveStorage,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                          HashMap\u003cString, TaskList\u003e archives) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return ui.showListArchiveMessage(archives);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 24
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of listing all Task objects from a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the displaying of all Task objects from a Duke object\u0027s TaskList object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object with tasks to be displayed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display the tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskStorage Duke object\u0027s Storage object to access file for loading/saving tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveStorage Duke object\u0027s ArchiveStorage object to access archives file for loading/saving archives."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String list of all tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, TaskStorage taskStorage, ArchiveStorage archiveStorage,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                          HashMap\u003cString, TaskList\u003e archives) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return ui.showListMessage(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 23
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import javax.swing.text.View;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Makes sense of user input into a Duke Object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Parses the input command and then returns the corresponding command object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * If the input is invalid, a Duke exception is thrown."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param fullCommand String input into a Duke object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return Command object based on the input parsed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws DukeException thrown when input entered is invalid and does not correspond to any command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String trimmedCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (trimmedCommand.equals(\"\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String[] splitCommand \u003d trimmedCommand.split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        switch (splitCommand[0]) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (splitCommand.length !\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidCommandDukeException(\"OOF!!! I\u0027m sorry, no characters after \u0027bye\u0027 allowed!!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (splitCommand.length !\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidCommandDukeException(\"OOF!!! I\u0027m sorry, no characters after \u0027list\u0027 allowed!!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (splitCommand.length !\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidCommandDukeException(\"OOF!!! I\u0027m sorry, no characters after \u0027help\u0027 allowed!!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                if (splitCommand.length \u003e 2) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    throw new InvalidCommandDukeException(\"OOF!!! Please enter only one task number!!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(splitCommand[1]) - 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                // Precondition for DoneCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                assert taskNumber \u003e\u003d 0 : \"Task number entered can only be non-negative\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                return new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidCommandDukeException(\"OOF!!! Please enter a task number!!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                if (splitCommand.length \u003e 2) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    throw new InvalidCommandDukeException(\"OOF!!! Please enter only one task number!!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(splitCommand[1]) - 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                // Precondition for DeleteCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                assert taskNumber \u003e\u003d 0 : \"Task number entered can only be non-negative\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                return new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidCommandDukeException(\"OOF!!! Please enter a task number!!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String keyWord \u003d joinStringArrayFromIndex(splitCommand, 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String trimmedKeyWord \u003d keyWord.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (trimmedKeyWord.equals(\"\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidCommandDukeException(\"OOF!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new FindCommand(trimmedKeyWord);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String todoDescription \u003d joinStringArrayFromIndex(splitCommand, 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String trimmedTodoDescription \u003d todoDescription.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (trimmedTodoDescription.equals(\"\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidTaskDescriptionDukeException(\"OOF!!! \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        + \"The description of a todo cannot be empty!!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return new AddCommand(new ToDo(trimmedTodoDescription));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String[] deadlineDescriptionDate \u003d extractDescriptionDate(splitCommand, \"/by\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String deadlineDescription \u003d deadlineDescriptionDate[0].trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String deadlineDate \u003d deadlineDescriptionDate[1].trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (!deadlineDescription.equals(\"\") \u0026\u0026 !deadlineDate.equals(\"\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                return new AddCommand(new Deadline(deadlineDescription, deadlineDate));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidTaskDescriptionDukeException(\"OOF!!! \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        + \"The description/timing of a deadline cannot be empty!!\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String[] eventDescriptionDate \u003d extractDescriptionDate(splitCommand, \"/at\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String eventDescription \u003d eventDescriptionDate[0].trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String eventDate \u003d eventDescriptionDate[1].trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (!eventDescription.equals(\"\") \u0026\u0026 !eventDate.equals(\"\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                return new AddCommand(new Event(eventDescription, eventDate));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidTaskDescriptionDukeException(\"OOF!!! \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                        + \"The description/timing of an event cannot be empty!!\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        case \"archive\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (splitCommand.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                throw new InvalidCommandDukeException(\"OOF!!! No archive instruction entered!!\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (splitCommand[1].equals(\"create\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                String newArchiveName \u003d joinStringArrayFromIndex(splitCommand, 2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                return new CreateArchiveCommand(newArchiveName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (splitCommand[1].equals(\"add\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    int taskNumber \u003d Integer.parseInt(splitCommand[2]) - 1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    String archiveName \u003d joinStringArrayFromIndex(splitCommand, 3);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    return new AddArchiveTaskCommand(taskNumber, archiveName);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    throw new InvalidCommandDukeException(\"OOF!!! Please enter a task number!!\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (splitCommand[1].equals(\"view\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                String archiveName \u003d joinStringArrayFromIndex(splitCommand, 2);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                return new ViewArchiveCommand(archiveName);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (splitCommand[1].equals(\"viewall\") \u0026\u0026 splitCommand.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                return new ViewAllArchiveCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (splitCommand[1].equals(\"list\") \u0026\u0026 splitCommand.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                return new ListArchiveCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (splitCommand[1].equals(\"delete\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    int taskNumber \u003d Integer.parseInt(splitCommand[2]) - 1;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    String archiveName \u003d joinStringArrayFromIndex(splitCommand, 3);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    return new DeleteArchiveTaskCommand(taskNumber, archiveName);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    throw new InvalidCommandDukeException(\"OOF!!! Please enter a task number!!\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (splitCommand[1].equals(\"deleteall\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                String archiveName \u003d joinStringArrayFromIndex(splitCommand, 2);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                return new DeleteAllArchiveCommand(archiveName);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (splitCommand[1].equals(\"revert\")) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    int taskNumber \u003d Integer.parseInt(splitCommand[2]) - 1;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    String archiveName \u003d joinStringArrayFromIndex(splitCommand, 3);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    return new RevertArchiveTaskCommand(taskNumber, archiveName);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    throw new InvalidCommandDukeException(\"OOF!!! Please enter a task number!!\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!!! Please enter a valid archive instruction :-(\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Concatenates the elements in a string array, starting from the given index."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param arr String array to join elements from."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param startIndex index of the array to start joining elements."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String made of the concatenated elements in the given array."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private static String joinStringArrayFromIndex(String[] arr, int startIndex) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (int i \u003d startIndex; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            output +\u003d arr[i];"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (i !\u003d arr.length - 1) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                output +\u003d \" \";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Separates the elements in a String array that is divided by the given regex."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Concatenates each element into two strings - description and date."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param arr String array with elements to divide and concatenate."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param regex The element in the array that divides the two outputs."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String array of size 2 that contains the description and date in each index."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private static String[] extractDescriptionDate(String[] arr, String regex) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String[] descriptionDate \u003d new String[2]; // description stored in index 0, date stored in index 1."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        boolean isRecordingDescription \u003d true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (int i \u003d 1; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (!arr[i].equals(regex) \u0026\u0026 isRecordingDescription) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                description +\u003d arr[i];"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                if (i + 1 \u003c arr.length \u0026\u0026 !arr[i + 1].equals(regex)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    description +\u003d \" \";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } else if (arr[i].equals(regex) \u0026\u0026 isRecordingDescription) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                isRecordingDescription \u003d false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } else if (!arr[i].equals(regex) \u0026\u0026 !isRecordingDescription) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                date +\u003d arr[i];"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                if (i !\u003d arr.length - 1) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    date +\u003d \" \";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        descriptionDate[0] \u003d description;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        descriptionDate[1] \u003d date;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return descriptionDate;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 226
    }
  },
  {
    "path": "src/main/java/RevertArchiveTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of reverting an archived task back to the Duke object\u0027s list of tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class RevertArchiveTaskCommand extends ArchiveCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private String archiveName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a RevertArchiveTaskCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskNumber Index of task in archive to be reverted."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveName Name of archive to revert task from."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public RevertArchiveTaskCommand(int taskNumber, String archiveName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archiveName \u003d archiveName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the reverting of a task from an archive back to the list of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the revert archive task message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object to add the task to."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display add task message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskStorage Duke object\u0027s TaskStorage object to access tasks file for loading/saving normal tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveStorage Duke object\u0027s ArchiveStorage object to access archives file for loading/saving archives."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String revert archive task message."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidCommandDukeException Thrown when the archive name or task index entered is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, TaskStorage taskStorage, ArchiveStorage archiveStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                          HashMap\u003cString, TaskList\u003e archives) throws InvalidCommandDukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (!archives.containsKey(archiveName)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!! There isn\u0027t an existing archive with the name \" + archiveName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (archiveName.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!! Please enter an archive name!!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        TaskList archive \u003d archives.get(archiveName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c archive.taskListSize()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            Task revertedTask \u003d archive.getTask(taskNumber);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            archive.deleteTask(taskNumber);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            tasks.addTask(revertedTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return ui.showRevertArchiveTaskMessage(archiveName, revertedTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!! There is no task labelled that number!!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 55
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Deals with loading/saving tasks from/to a file in the hard drive."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String fileAccessStatus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a Storage object with the file\u0027s file path as the argument."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param filePath String of file\u0027s filepath."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getFileAccessStatus() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return fileAccessStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts a String in the valid format into a task object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Used in getTasksFromFile method to extract task objects from a file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param text String input in required format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return Task object created from processing the input text."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidTaskArgumentDukeException Thrown when the String text is in an invalid format so"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *     the argument entered when creating a task object is invalid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Task stringToTask(String text) throws InvalidTaskArgumentDukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String[] textSplit \u003d text.split(\"\\\\|\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Task resultTask;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (textSplit[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            resultTask \u003d new ToDo(textSplit[2]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else if (textSplit[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            resultTask \u003d new Deadline(textSplit[2], textSplit[3]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            resultTask \u003d new Event(textSplit[2], textSplit[3]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (textSplit[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            resultTask.markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return resultTask;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Converts a task object into its String representation to be saved into a file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Used in loadTasksToFile method to save tasks objects into a file as Strings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param task Task object to be represented as a String."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String representation of the argument Task object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String taskToString(Task task) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String taskType \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String isDone \u003d \"0\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (task.isDone()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            isDone \u003d \"1\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            taskType \u003d \"T\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return taskType + \"|\" + isDone + \"|\" + description;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } else { // event or deadline"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String time \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                taskType \u003d \"E\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                time \u003d ((Event) task).getAt();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                taskType \u003d \"D\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                time \u003d ((Deadline) task).getBy();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            return taskType + \"|\" + isDone + \"|\" + description + \"|\" + time;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 83
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents a task in a Duke object\u0027s task list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Each task has a description and marker to indicate if it is completed."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a task object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Each task is set as not done by default."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param description The string description of the task created."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the String unicode of the tick symbol if the task is marked done,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * and returns the String unicode of the cross symbol if otherwise."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return the String unicode of either the tick or cross symbol."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Sets the task as completed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the String format of the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The String format of a task consists a tick or cross symbol to indicate if it is done"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * and its description."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String format of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + \" \" + this.description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 56
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the list of Tasks in a Duke object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a TaskList object that stores the list of tasks of a Duke object in an ArrayList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void setTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Task getTask(int taskNumber) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return this.tasks.get(taskNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void deleteTask(int taskNumber) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.tasks.remove(taskNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Marks the task at the given index in the ArrayList as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskNumber index of the task in the ArrayList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void markAsDone(int taskNumber) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.tasks.get(taskNumber).markAsDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public int taskListSize() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Given a String keyword, searches all tasks which has a description containing the keyword."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Tasks that contains the keyword are added to a newly created TaskList object and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * this TaskList object is returned."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param keyWord keyword to search for in list of tasks"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return TaskList object containing all tasks that contain the keyword."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public TaskList findTasks(String keyWord) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        TaskList tasksWithKeyWord \u003d new TaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            Task currentTask \u003d tasks.get(i);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            String[] descriptionSplit \u003d currentTask.getDescription().split(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            List\u003cString\u003e descriptionWords \u003d Arrays.asList(descriptionSplit);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            if (descriptionWords.contains(keyWord)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                tasksWithKeyWord.addTask(currentTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return tasksWithKeyWord;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 74
    }
  },
  {
    "path": "src/main/java/TaskStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Deals with loading/saving a Duke object\u0027s list of tasks from/to a file in the hard drive."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class TaskStorage extends Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a TaskStorage object with the file\u0027s file path as the argument."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param filePath String of file\u0027s filepath."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public TaskStorage(String filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(filePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Accesses the file and extracts tasks from it, saving the tasks into a TaskList object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskList Tasks extracted from file will be added to this TaskList object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void getTasksFromFile(TaskList taskList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            File taskFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            Scanner scanner \u003d new Scanner(taskFile);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                String textLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                taskList.addTask(stringToTask(textLine));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.fileAccessStatus \u003d \"Previously saved list of tasks successfully loaded :)\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.fileAccessStatus \u003d \"Any previously saved list of tasks was not be loaded: File not found :(\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (InvalidTaskArgumentDukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            this.fileAccessStatus \u003d \"Any previously saved list of tasks was not be loaded: Invalid format in file :(\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Saves the tasks in the TaskList object into the file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskList TaskList object with tasks to be saved."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void loadTasksToFile(TaskList taskList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.taskListSize(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                fileWriter.write(taskToString(taskList.getTask(i)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                if (i !\u003d taskList.taskListSize() - 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                    fileWriter.write(System.lineSeparator());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 67
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Represents a to-do, which is a type of task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param description The string description of the to-do created."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 16
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Takes in the user input into a Duke object and displays output to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String longLine \u003d \"----------------------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String shortLine \u003d \"-----------------------------------\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String welcomeMessage \u003d \"What can I do for you?\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            + \"\\n Enter \u0027help\u0027 for list of commands you can use!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    protected String byeMessage \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    Scanner scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates an Ui object to take input user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Reads the next input from the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return the String command input by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return this.scanner.nextLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the welcome message when a Duke object is started."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String welcome message when Duke is started."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showWelcomeMessage() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return welcomeMessage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the list of tasks in the TaskList object argument."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object with tasks to be displayed to the user in a list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String list of tasks in TaskList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showListMessage(TaskList tasks) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String list \u003d \"Here are the tasks in your list:\" + \"\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.taskListSize(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            list \u003d list + \"     \" + (i + 1) + \".\" + tasks.getTask(i) + \"\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the exception message of the argument exception to the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param e Exception whose message needs to be displayed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String exception message of the argument exception."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showExceptionError(Exception e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return e.getMessage() + \"\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns message when a task is added to the TaskList object arugment."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param task Task object to be added to TaskList object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskListSize Number of Task objects in TaskList object after the Task object is added."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String message when a task is added to the TaskList."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showAddTaskMessage(Task task, int taskListSize) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String output \u003d \"Got it. I\u0027ve added this task: \\n\" + \"       \" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"Now you have \" + taskListSize + \" task(s) in the list.\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns message when a Task object is marked as done."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param task Task object that is marked as done."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String message when a Task object is marked as done."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showMarkTaskAsDoneMessage(Task task) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n       \" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns String message when a Task object is deleted."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskListSize Number of Task objects in TaskList object after the Task object is deleted."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String message when a Task object is deleted."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showDeleteTaskMessage(Task task, int taskListSize) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n       \" + task.toString()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"\\n     Now you have \" + taskListSize + \" task(s) in the list.\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns exit message when a Duke object stops running."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String exit message when a Duke object stops running."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showByeMessage() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return byeMessage;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the list of tasks in the TaskList object argument."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * The tasks in the TaskList object argument contains the keyword entered by the user."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object with tasks to be displayed to the user in a list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String list of tasks in the TaskList object argument."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showFindTasksMessage(TaskList tasks) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String list \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.taskListSize(); i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            list \u003d list + \"     \" + (i + 1) + \".\" + tasks.getTask(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns confirmation message that a new archive has been created."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveName Name of new archive being created."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return Confirmation message that a new archive has been created."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showCreateArchiveMessage(String archiveName) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return \"New archive created: \" + archiveName + \"\\n\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the message that a task has been archived and lists the tasks of the archive it was added to."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveName Name of archive that the task was added to."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archivedTasks TaskList of the archive."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archivedTask The Task object that was archived."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return Message that a task has been archived and lists the tasks of the archive it was added to."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showAddArchiveTaskMessage(String archiveName, TaskList archivedTasks, Task archivedTask) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String list \u003d  archivedTask.getDescription() + \" has been archived to \" + archiveName + \":\\n\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (int i \u003d 0; i \u003c archivedTasks.taskListSize(); i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            list \u003d list + \"     \" + (i + 1) + \".\" + archivedTasks.getTask(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the list of tasks in an archive."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveName Name of archive."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archive TaskList of archive."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return The list of tasks in an archive."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showViewArchiveMessage(String archiveName, TaskList archive) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String list \u003d \"Here are the tasks in the \" + archiveName + \" archive:\\n\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (int i \u003d 0; i \u003c archive.taskListSize(); i++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            list \u003d list + \"     \" + (i + 1) + \".\" + archive.getTask(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the lists of tasks in all archives."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @retur The lists of tasks in all archives."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showViewAllArchiveMessage(HashMap\u003cString, TaskList\u003e archives) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String list \u003d \"Here are all your saved archives:\\n\\n\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Set\u003cString\u003e archiveNames \u003d archives.keySet();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (String archive: archiveNames) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            list +\u003d archive + \"\\n\" + shortLine;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            TaskList archivedTasks \u003d archives.get(archive);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            for (int i \u003d 0; i \u003c archivedTasks.taskListSize(); i++) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                list \u003d list + \"     \" + (i + 1) + \".\" + archivedTasks.getTask(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            list +\u003d \"\\n\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the list of archive names."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return The list of archive names."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showListArchiveMessage(HashMap\u003cString, TaskList\u003e archives) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String list \u003d \"Here are all your saved archives:\\n\\n\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Set\u003cString\u003e archiveNames \u003d archives.keySet();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (String archive: archiveNames) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            list \u003d list + \"-- \" + archive + \"\\n\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the confirmation message of when a task is deleted from an archive."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param removedTask Task that was removed from an archive."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveName Name of archive that had a task removed from it."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return Confirmation message of when a task is deleted from an archive."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showDeleteArchiveTaskMessage(Task removedTask, String archiveName) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n       \" + removedTask.toString()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"\\nfrom the \" + archiveName + \"archive.\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the confirmation message of when an entire archive deleted, and"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * also displays the list of remaining archive names."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveName Archive that is being deleted."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return he confirmation message of when an entire archive deleted,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *        and also displays the list of remaining archive names."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showDeleteAllArchiveMessage(String archiveName, HashMap\u003cString, TaskList\u003e archives) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String list \u003d \"Noted. I\u0027ve removed the \" + archiveName + \" archive\\n\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"Here are the rest of your archives:\\n\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        Set\u003cString\u003e archiveNames \u003d archives.keySet();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        for (String archive: archiveNames) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            list \u003d list + \"-- \" + archive + \"\\n\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the confirmation message of when an archive task is unarchived and reverted back to the list of tasks."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveName Name of archive that has task being reverted."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param revertedTask Task being unarchived and reverting back to the list of tasks."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return Confirmation message of when an archive task is unarchived and reverted back to the list of tasks."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showRevertArchiveTaskMessage(String archiveName, Task revertedTask) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n       \" + revertedTask.toString()"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"\\nfrom the \" + archiveName + \" archive and added back to your list of tasks.\";"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the help list of commands to use Duke\u0027s features."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return list of commands to use Duke\u0027s features."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String showHelpMessage() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        String helpList \u003d \"Hello! I see you need some help using Duke.\\n\""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"Don\u0027t worry! Here is the complete list of commands:\\n\" + longLine;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        helpList +\u003d \"To add a new task (Todo, event or deadline):\\n\""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"\u0027todo [todo task description]\u0027\\n\\n\""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"\u0027event [event task description] /at [event date and time in 24 hour format (dd/mm/yyyy hh:mm)]\u0027\\n\\n\""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"\u0027deadline [deadline task description] /by [deadline date and time in 24 hour format \""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"(dd/mm/yyyy hh:mm)]\u0027\\n\" + longLine;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        helpList +\u003d \"To display current list of tasks:\\n\""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"\u0027list\u0027\\n\" + longLine;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        helpList +\u003d \"To delete a task:\\n\" + \"\u0027delete [task list number]\u0027\\n\" + longLine;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        helpList +\u003d \"To mark a task as done:\\n\" + \"\u0027done [task list number]\u0027\\n\" + longLine;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        helpList +\u003d \"To search for a task with a certain keyword in its description:\\n\""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"\u0027find [keyword]\u0027\\n\" + longLine;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        helpList +\u003d \"To exit and close Duke:\\n\" + \"\u0027bye\u0027\\n\" + longLine;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        helpList +\u003d \"Archives Instructions:\\n\\n\""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"Create a new empty archive:\\n\u0027archive create [archive name]\u0027\\n\\n\""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"Add task from task list to an existing archive:\\n\u0027archive add [task list index] [archive name]\u0027\\n\\n\""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"Display list of existing archive names:\\n\u0027archive list\u0027\\n\\n\""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"Display list of tasks in an existing archive:\\n\u0027archive view [archive name]\u0027\\n\\n\""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"Display lists of tasks of all existing archives:\\n\u0027archive viewall\u0027\\n\\n\""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"Delete a task in an archive:\\n\u0027archive delete [task archive list index] [archive name]\u0027\\n\\n\""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"Delete an entire archive:\\n\u0027archive deleteall [archive name]\u0027\\n\\n\""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"To unarchive a task in an existing archive and revert it back to the current list of tasks:\\n\""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + \"\u0027revert [task archive list index] [archive name]\u0027\\n\""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                + longLine;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        helpList +\u003d \"I hope this helps :)\\nEnter \u0027help\u0027 again to display this again!!\";"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return helpList;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 286
    }
  },
  {
    "path": "src/main/java/ViewAllArchiveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of viewing all archive tasks in a Duke object\u0027s HashMap of archive Tasklists."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ViewAllArchiveCommand extends ArchiveCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the display of all lists of tasks in every archive in a Duke object\u0027s HashMap of archive Tasklists."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the view all archive message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object to add the task to."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display add task message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskStorage Duke object\u0027s TaskStorage object to access tasks file for loading/saving normal tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveStorage Duke object\u0027s ArchiveStorage object to access archives file for loading/saving archives."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String view all archive message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, TaskStorage taskStorage, ArchiveStorage archiveStorage,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                          HashMap\u003cString, TaskList\u003e archives) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return ui.showViewAllArchiveMessage(archives);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 24
    }
  },
  {
    "path": "src/main/java/ViewArchiveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " * Represents the command of viewing the list of task from an archive in a Duke object\u0027s HashMap of archive Tasklists."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ViewArchiveCommand extends ArchiveCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    private String archiveName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Creates a ViewArchiveCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveName Name of archive to be displayed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public ViewArchiveCommand(String archiveName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        this.archiveName \u003d archiveName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Executes the display of the list of task from an archive in a Duke object\u0027s HashMap of archive Tasklists."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * Returns the view archive message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param tasks TaskList object to add the task to."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param ui Duke object\u0027s Ui object to display add task message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param taskStorage Duke object\u0027s TaskStorage object to access tasks file for loading/saving normal tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archiveStorage Duke object\u0027s ArchiveStorage object to access archives file for loading/saving archives."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @param archives HashMap of all TaskList archives, with their archive name as keys."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @return String view archive message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     * @throws InvalidCommandDukeException Thrown when the archive name entered is invalid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, TaskStorage taskStorage, ArchiveStorage archiveStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                          HashMap\u003cString, TaskList\u003e archives) throws InvalidCommandDukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (!archives.containsKey(archiveName)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!! There isn\u0027t an existing archive with the name \" + archiveName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        if (archiveName.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            throw new InvalidCommandDukeException(\"OOF!! Please enter an archive name!!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        TaskList archive \u003d archives.get(archiveName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        return ui.showViewArchiveMessage(archiveName, archive);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 44
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void testStringConversion() throws Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"[D][\\u2718] test deadline (by: 1st of January 2019, 06:00PM)\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                (new Deadline(\"test deadline\",\"1/1/2019 1800\")).toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void dateToStringConversion_validDates_success() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"1st of January 2019, 06:00PM\", (new Deadline(\"test event 1\",\"1/1/2019 1800\")).dateToString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"13th of February 2019, 09:00AM\", (new Deadline(\"test event 2\",\"13/2/2019 0900\")).dateToString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"3rd of August 2019, 05:30PM\", (new Deadline(\"test event 3\",\"3/8/2019 1730\")).dateToString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void dateToStringConversion_inValidDates_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            assertEquals(0, (new Deadline(\"test deadline 4\",\"monday\")).dateToString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            assertEquals(\"OOPS!!! The format of deadline timing is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 29
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void testStringConversion() throws Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"[E][\\u2718] test event (at: 1st of January 2019, 06:00PM)\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "                (new Event(\"test event\",\"1/1/2019 1800\")).toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void dateToStringConversion_validDates_success() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"1st of January 2019, 06:00PM\", (new Event(\"test event 1\",\"1/1/2019 1800\")).dateToString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"13th of February 2019, 09:00AM\", (new Event(\"test event 2\",\"13/2/2019 0900\")).dateToString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"3rd of August 2019, 05:30PM\", (new Event(\"test event 3\",\"3/8/2019 1730\")).dateToString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void dateToStringConversion_inValidDates_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            assertEquals(0, (new Event(\"test event 4\",\"monday\")).dateToString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "            assertEquals(\"OOPS!!! The format of event timing is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 30
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "        assertEquals(\"[T][\\u2718] test todo\", (new ToDo(\"test todo\")).toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Davidcwh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Davidcwh": 14
    }
  }
]
