[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected LocalDateTime deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Deadline(String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Deadline(String description, boolean isDone, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this(description, deadline);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Getter for this Task\u0027s deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return Deadline for this task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public LocalDateTime getDeadline() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 24
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.nio.file.NoSuchFileException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Path TASK_STORAGE_PATH \u003d Path.of(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final UserInterface ui \u003d new UserInterface();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            tasks \u003d TaskSerializer.parseFromFile(TASK_STORAGE_PATH);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (FileIOException | TokenParseError exc) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (exc.getCause() instanceof NoSuchFileException) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                ui.printBlock(\" â˜¹ OOPS!!! \" + exc.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                System.exit(-1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        ui.printBlock(\"Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                \"What can I do for you?\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        ui.println();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        boolean isDone \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        while (!isDone) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final String input \u003d ui.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            boolean inputNeedsParsing \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            switch (input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                ui.printBlock(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                int listIdx \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                StringJoiner taskListDisplay \u003d UserInterface.createStringJoiner(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                for (Task task : tasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    final String formattedTask \u003d String.format(\"%d.%s\", listIdx, formatTask(task));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    taskListDisplay.add(formattedTask);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    listIdx++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                ui.printBlock(taskListDisplay.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                inputNeedsParsing \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (inputNeedsParsing) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                if (input.startsWith(\"done \")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    final String[] command \u003d input.split(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    final int taskIndex \u003d Integer.parseInt(command[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    Task t \u003d tasks.get(taskIndex - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    t.markAsDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    TaskSerializer.serializeToFile(TASK_STORAGE_PATH, tasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    StringJoiner successMessage \u003d UserInterface.createStringJoiner(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    successMessage.add(\"  \" + formatTask(t));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    ui.printBlock(successMessage.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                } else if (input.startsWith(\"delete \")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    final String[] command \u003d input.split(\" \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    final int taskIndex \u003d Integer.parseInt(command[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    Task t \u003d tasks.get(taskIndex - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    tasks.remove(taskIndex - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    TaskSerializer.serializeToFile(TASK_STORAGE_PATH, tasks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    StringJoiner successMessage \u003d UserInterface.createStringJoiner(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    successMessage.add(\"  \" + formatTask(t));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    successMessage.add(String.format(\"Now you have %d tasks in the list.\", tasks.size()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    ui.printBlock(successMessage.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    try{"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        Task t \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        final String COMMAND_TOKEN_TODO \u003d \"todo \";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        final String COMMAND_TOKEN_DEADLINE \u003d \"deadline \";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        final String COMMAND_TOKEN_EVENT \u003d \"event \";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        final DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        if (input.startsWith(COMMAND_TOKEN_TODO)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                            String todoDescription \u003d input.substring(COMMAND_TOKEN_TODO.length());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                            if(todoDescription.isEmpty()){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                                throw new EmptyTaskDescriptionException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                            t \u003d new Todo(todoDescription);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        } else if (input.startsWith(COMMAND_TOKEN_DEADLINE)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                            final String[] deadlineArgs \u003d input.substring(COMMAND_TOKEN_DEADLINE.length()).split(\" /by \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                            final String deadlineDescription \u003d deadlineArgs[0];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                            final LocalDateTime deadlineDue \u003d LocalDateTime.parse(deadlineArgs[1], dateTimeFormatter);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                            t \u003d new Deadline(deadlineDescription, deadlineDue);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        } else if (input.startsWith(COMMAND_TOKEN_EVENT)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                            final String[] eventArgs \u003d input.substring(COMMAND_TOKEN_EVENT.length()).split(\" /at \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                            final String eventDescription \u003d eventArgs[0];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                            final LocalDateTime eventDateTime \u003d LocalDateTime.parse(eventArgs[1], dateTimeFormatter);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                            t \u003d new Event(eventDescription, eventDateTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                            throw new UnknownCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        tasks.add(t);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        TaskSerializer.serializeToFile(TASK_STORAGE_PATH, tasks);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        StringJoiner successMessage \u003d UserInterface.createStringJoiner(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        successMessage.add(\"  \" + formatTask(t));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        successMessage.add(String.format(\"Now you have %d tasks in the list.\", tasks.size()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        ui.printBlock(successMessage.toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        ui.println();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    } catch (DukeException exc){"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        ui.printBlock(\" â˜¹ OOPS!!! \" + exc.getMessage());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                        ui.println();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Convenience function to format a Task differently based on its subtype (i.e. Todo/Deadline/Event)."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param t Task instance to represent as a string, can be Todo, Deadline or Event."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A textual representation of the given Task."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static String formatTask(Task t) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String taskType \u003d null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String description \u003d null;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (t instanceof Todo) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            taskType \u003d \"T\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            description \u003d t.getDescription();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Deadline d \u003d (Deadline) t;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            taskType \u003d \"D\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            description \u003d String.format(\"%s (by: %s)\", d.getDescription(), d.getDeadline().format(dateTimeFormatter));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else if (t instanceof Event) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Event e \u003d (Event) t;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            taskType \u003d \"E\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            description \u003d String.format(\"%s (at: %s)\", e.getDescription(), e.getEventDateTime().format(dateTimeFormatter));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return String.format(\"[%s][%s] %s\", taskType, t.getStatusIcon(), description);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 2,
      "-": 4,
      "aidilfbk": 154
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "abstract class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public DukeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class EmptyTaskDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public EmptyTaskDescriptionException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public UnknownCommandException(String message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 21
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected LocalDateTime eventDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Event(String description, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.eventDateTime \u003d dateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Event(String description, boolean isDone, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this(description, dateTime);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Getter for when this Event occurs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return Date and time of this Event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public LocalDateTime getEventDateTime() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return eventDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 24
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A tick symbol when this task is done or a X symbol when this task is not done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Getter for this task\u0027s description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The description of this task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Getter for whether this task is done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return Whether this task is done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Marks this task as done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 41
    }
  },
  {
    "path": "src/main/java/TaskSerializer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.Writer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class TaskSerializer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static final String FIELD_DELIMITER \u003d \"\\u001F\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static final Map\u003cString, Class\u003c? extends Task\u003e\u003e EVENT_TOKEN_TO_TYPE \u003d Map.of("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            \"T\", Todo.class,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            \"D\", Deadline.class,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            \"E\", Event.class"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static final Map\u003cClass\u003c? extends Task\u003e, String\u003e EVENT_TYPE_TO_TOKEN;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        // creates an immutable reverse mapping of EVENT_TOKEN_TO_TYPE and stores it as EVENT_TYPE_TO_TOKEN"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Map\u003cClass\u003c? extends Task\u003e, String\u003e builderMap \u003d new HashMap\u003c\u003e(EVENT_TOKEN_TO_TYPE.size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        for (Map.Entry\u003cString, Class\u003c? extends Task\u003e\u003e kvp : EVENT_TOKEN_TO_TYPE.entrySet()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            builderMap.put(kvp.getValue(), kvp.getKey());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        EVENT_TYPE_TO_TOKEN \u003d Collections.unmodifiableMap(builderMap);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Convenience function that loads the given file path and parses the Tasks within, returning a new List of the Tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param file File path that contains the Tasks to load."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A new List of the Tasks represented by the given file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static List\u003cTask\u003e parseFromFile(Path file) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return parseFromFile(file, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Loads the given file path and parses the Tasks within, adding to the provided List of the Tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param file  File path that contains the Tasks to load."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param tasks Pre-existing List of Tasks to be append to."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The List of Tasks appended with the new Tasks represented by the given file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static List\u003cTask\u003e parseFromFile(Path file, List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try (final Reader reader \u003d Files.newBufferedReader(file)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return parse(reader, tasks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (IOException exc) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new FileIOException(String.format(\"Unable to read tasks from file: %s\", file.toString()), exc);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Convenience function that parses the Tasks from the input, returning a new List of the Tasks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param input Stream of characters to parse Tasks from."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A new List of the Tasks represented by the given input."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static List\u003cTask\u003e parse(Reader input) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return parse(input, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Parse the Tasks from the input, adding to the provided List of the Tasks."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param input Stream of characters to parse Tasks from."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param tasks Pre-existing List of Tasks to be append to."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The List of Tasks appended with the new Tasks represented by the given input."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static List\u003cTask\u003e parse(Reader input, List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try (final Scanner sc \u003d new Scanner(input)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                Task task \u003d parseLine(sc.nextLine());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                assert task !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Parses a single line of text to instantiate a Task subclass instance."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param line Textual representation of a Task instance."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return Task subclass instance (either Todo, Deadline or Event)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static Task parseLine(String line) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String[] tokens \u003d line.split(FIELD_DELIMITER);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final Class\u003c? extends Task\u003e taskType \u003d parseTypeToken(tokens[0]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final boolean isTaskDone \u003d parseDoneToken(tokens[1]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String taskDescription \u003d tokens[2];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (taskType \u003d\u003d Todo.class) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            task \u003d new Todo(taskDescription, isTaskDone);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else if (taskType \u003d\u003d Deadline.class) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (tokens.length !\u003d 4) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                throw new MissingTokenParseError(String.format(\"Deadline task expected 4 values, received %d instead.\", tokens.length));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final LocalDateTime deadline \u003d parseDateTime(tokens[3]);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            task \u003d new Deadline(taskDescription, isTaskDone, deadline);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else if (taskType \u003d\u003d Event.class) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            if (tokens.length !\u003d 4) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "                throw new MissingTokenParseError(String.format(\"Event task expected 4 values, received %d instead.\", tokens.length));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            final LocalDateTime dateTime \u003d parseDateTime(tokens[3]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            task \u003d new Event(taskDescription, isTaskDone, dateTime);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Parses the textual representation of a Task subtype (e.g. \"T\" returns Todo.class)."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param typeToken The textual representation of a subtype extending from Task."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The subtype extending from Task."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static Class\u003c? extends Task\u003e parseTypeToken(String typeToken) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        Class\u003c? extends Task\u003e taskType \u003d EVENT_TOKEN_TO_TYPE.get(typeToken);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (taskType \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new TypeTokenParseError(String.format(\"\\\"%s\\\" is not a valid task type value.\", typeToken));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return taskType;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Parses the textual representation whether a Task is marked as done."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param doneToken Expected either \"0\" for not done or \"1\" for done."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return Boolean for whether a Task is marked as done."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static boolean parseDoneToken(String doneToken) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        switch (doneToken) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        // no need for break here, return implicitly does the same"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        case \"0\":"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        // no need for break here, return implicitly does the same"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new DoneTokenParseError(String.format(\"\\\"%s\\\" is not a valid done value.\", doneToken));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static LocalDateTime parseDateTime(String dateTimeToken) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return LocalDateTime.parse(dateTimeToken, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Serializes a list of Task instances to a textual representation and writes it to the provided file path."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param file  File path to write the Tasks to."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param tasks List of Tasks to store in the file."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static void serializeToFile(Path file, Iterable\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        try (final Writer output \u003d Files.newBufferedWriter(file)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            output.write(serialize(tasks));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } catch (IOException exc) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new FileIOException(String.format(\"Unable to save tasks to file: %s\", file.toString()), exc);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Serializes a list of Task instances to a textual representation."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param tasks List of Tasks to convert to a textual representation."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The textual representation for the given list of Tasks."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static String serialize(Iterable\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final StringJoiner output \u003d new StringJoiner(\"\\n\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            output.add(serializeTask(t));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Serializes a Task instance to its textual representation."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param t Task to serialize to text."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The textual representation for the given Task."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static String serializeTask(Task t) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final StringJoiner output \u003d new StringJoiner(FIELD_DELIMITER);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String taskType \u003d serializeTypeToToken(t);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String isTaskDone \u003d serializeDoneToToken(t);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        final String taskDescription \u003d t.getDescription();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        output.add(taskType).add(isTaskDone).add(taskDescription);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Deadline d \u003d (Deadline) t;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            output.add(serializeDateTimeToToken(d.getDeadline()));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else if (t instanceof Event) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            Event e \u003d (Event) t;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            output.add(serializeDateTimeToToken(e.getEventDateTime()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Serializes the subtype of a Task instance to its textual representation (e.g. an Event instance returns \"E\")."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param t Task to serialize its subtype."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The textual representation of a Task\u0027s subtype."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static String serializeTypeToToken(Task t) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        String taskType \u003d EVENT_TYPE_TO_TOKEN.get(t.getClass());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        if (taskType \u003d\u003d null) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            throw new UnserializableType(String.format(\"\\\"%s\\\" is not a serializable task type.\", t.getClass().getName()));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "            return taskType;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Serializes whether a Task instance is marked as done (i.e. done returns \"1\", not done returns \"0\")."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param t Task to serialize its done state."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return The textual representation of the Task\u0027s done state."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static String serializeDoneToToken(Task t) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return t.isDone() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static String serializeDateTimeToToken(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return dateTime.format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "abstract class SerializerException extends DukeException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public SerializerException(String message) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public SerializerException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class FileIOException extends SerializerException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public FileIOException(String message, IOException exc) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message, exc);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "abstract class TokenParseError extends SerializerException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public TokenParseError(String message) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class DoneTokenParseError extends SerializerException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public DoneTokenParseError(String message) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class TypeTokenParseError extends SerializerException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public TypeTokenParseError(String message) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class MissingTokenParseError extends TokenParseError {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public MissingTokenParseError(String message) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "abstract class SerializationError extends SerializerException {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public SerializationError(String message) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "class UnserializableType extends SerializationError {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public UnserializableType(String message) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 298
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 10
    }
  },
  {
    "path": "src/main/java/UserInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "public class UserInterface {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static final String LINE_INDENT \u003d \"\\t\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d LINE_INDENT + \"_\".repeat(60);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private static final Pattern LINE_START_PATTERN \u003d Pattern.compile(\"^\", Pattern.MULTILINE);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final Scanner scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    private final PrintStream output \u003d System.out;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    UserInterface() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Gets a line of input from the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A line of input from the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public String nextLine() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Prints a horizontal line to the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void printHorizontalLine() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        output.println(HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Prints an empty line to the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void println() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        output.println();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Prints the content argument with indentation."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param content Text to display to the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void println(String content) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        content \u003d LINE_START_PATTERN.matcher(content).replaceAll(LINE_INDENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        output.println(content);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * Prints a horizontal line, the argument and another horizontal line"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * while taking care of indentation to create a block user interface element."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @param content Text to display to the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public void printBlock(String content) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        println(content);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * A convenience method to create a {@code StringJoiner} using the system\u0027s newline separator."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A new instance of {@code StringJoiner}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static StringJoiner createStringJoiner() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * A convenience method to create a {@code StringJoiner} using the system\u0027s"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * newline separator initialized with the contents of the specified string."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     * @return A new instance of {@code StringJoiner} with the contents of the specified string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    public static StringJoiner createStringJoiner(String str) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        StringJoiner instance \u003d createStringJoiner();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        instance.add(str);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aidilfbk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aidilfbk": 83
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 â€“ Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now letâ€™s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, letâ€™s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 â€“ Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, letâ€™s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 â€“ Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 â€“ Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Letâ€™s add a method to flip a dialog box such that the image on the left to differentiate between user input and Dukeâ€™s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 2,
      "-": 241
    }
  }
]
