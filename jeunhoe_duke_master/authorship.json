[
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents an AddCommand in Duke which adds Tasks to the TaskList"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Represents the task to add."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    Task task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructor for add command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param task Sets task to add as input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Executes add command. Adds task to TaskList and prints out action."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param tasks Adds task to tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param ui Performs actions on Ui if required."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param storage Saves to Storage or loads from Storage if required."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        tasks.add(this.task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        System.out.println(\"     Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        System.out.println(\"       \" + this.task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        System.out.println(String.format(\"     Now you have %d tasks in the list.\", tasks.size()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns true as it is not an ExitCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Boolean value of whether Duke should continue running."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public boolean isRunning() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 41
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a command that handles requests in Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructor of Command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Executes specified command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param tasks Performs actions on TaskList if required."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param ui Performs actions on Ui if required."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param storage Saves to Storage or loads from Storage if required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Checks if Duke should carry on running after command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return True if not ExitCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public abstract boolean isRunning();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 25
    }
  },
  {
    "path": "src/main/java/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents Date and Time of an Event or Deadline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Represents day of DateTime."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Represents month of DateTime."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Represents year of DateTime."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Represents hour of DateTime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private int hour;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Represents minute of DateTime."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private int minute;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Creates DateTime object with input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param day Day of DateTime."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param month Month of DateTime."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param year Year of DateTime."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param hour Hour of DateTime."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param minute Minute of DateTime"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public DateTime(int day, int month, int year, int hour, int minute) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.hour \u003d hour;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.minute \u003d minute;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Static method that creates a DateTime object with DateTime string."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param dateTimeString Follows input of DD/MM/YYYY HHMM."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return DateTime object of specified date and time."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static DateTime create(String dateTimeString) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        String[] dateTime \u003d dateTimeString.split(\" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        String[] date \u003d dateTime[0].split(\"/\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        int day \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        int year \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        int time \u003d Integer.parseInt(dateTime[1]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        int hour \u003d time / 100;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        int minute \u003d time % 100;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return new DateTime(day, month, year, hour, minute);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns string representation of DateTime."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return String representation of DateTime in DDth of MMMM, HH.MM am/pm."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        stringBuilder.append(this.day);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (this.day \u003e\u003d 10 \u0026\u0026 this.day \u003c\u003d 20) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"th\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else if ((this.day % 10) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"st\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else if ((this.day % 10) \u003d\u003d 2) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"nd\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else if ((this.day%10) \u003d\u003d 3) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"rd\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"th\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        stringBuilder.append(\" of \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        switch (this.month) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"January\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"February\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"March\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"April\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"May\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"June\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case 7:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"July\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case 8:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"August\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case 9:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"September\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case 10:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"October\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case 11:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"November\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case 12:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"December\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        stringBuilder.append(String.format(\" %d, \", year));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (hour \u003d\u003d 0) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"12\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            int hourMod \u003d hour % 12;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(hourMod);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        stringBuilder.append(String.format(\".%02d\", minute));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if(hour \u003e 12) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"pm\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"am\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 143
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a Deadline task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Represents due date (byWhen) of the Deadline."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private String byWhen;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructor of Deadline object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param name Name of Deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param byWhen byWhen of Deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws EmptyTaskDukeException If name is empty."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws InvalidTaskDukeException If byWhen input does not follow DD/MM/YYYY HHMM."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Deadline(String name, String byWhen) throws EmptyTaskDukeException, InvalidTaskDukeException  {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new EmptyTaskDukeException(\"deadline\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (byWhen \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new InvalidTaskDukeException(\"deadline\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.byWhen \u003d byWhen;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Accessor to get due date (byWhen) of Deadline."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return String representation of due date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public String getByWhen() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return byWhen;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Gives appropriate representation of Deadline."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return String representation of Deadline. Includes type of Task, isDone, name of Task and byWhen."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder(\"[D]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        stringBuilder.append(super.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        stringBuilder.append(\" (\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        stringBuilder.append(DateTime.create(byWhen));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        stringBuilder.append(\")\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 50
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a DeleteCommand which deletes Tasks from the TaskList."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Represents position of Task to delete in TaskList."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructor for DeleteCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param position Sets position to delete as input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public DeleteCommand(int position) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Executes delete command. Remove Task from TaskList at given position and prints out action."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param tasks Removes Task from TaskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param ui Performs actions on Ui if required."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param storage Saves to Storage or loads from Storage if required."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Task deleted \u003d tasks.remove(position);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        System.out.println(\"     Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        System.out.println(\"       \" + deleted);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        System.out.println(String.format(\"     Now you have %d tasks in the list.\", tasks.size()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Accessor for position in TaskList DeleteCommand will delete from."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public int getPosition() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return position;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns true as it is not an ExitCommand."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Boolean value of whether Duke should continue running."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public boolean isRunning() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns true if DeleteCommand has same position as object. Used for testing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param object Object to compare equality with."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Boolean value of whether current DeleteCommand equals input Object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return (object instanceof DeleteCommand) \u0026\u0026 (((DeleteCommand) object).getPosition() \u003d\u003d this.position);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 58
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a DoneCommand which sets Task to done in TaskList."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Represent position of Task in TaskList to set to done."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructor of DoneCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param position Sets position to set as done as input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public DoneCommand(int position) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Executes done command. Sets Task from TaskList at given position to done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param tasks Sets Task in TaskList to done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param ui Performs actions on Ui if required."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param storage Saves to Storage or loads from Storage if required."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        tasks.markAsDone(this.position);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns true as it is not an ExitCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Boolean value of whether Duke should continue running."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public boolean isRunning() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 39
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents the Duke bot. Allows for easy and organised management of tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Represents user interface of Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Represents task list which stores all tasks given to Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Represents storage function of Duke that helps to load and save data to disk."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructor of Duke. Sets up user interface, storage and task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param filePath String of filePath to create Storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            tasks \u003d new TaskList(storage.loadList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } catch (LoadingErrorDukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Initialises resources for Duke on startup and starts running Duke."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param args Sets up resourcs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        new Duke(\"src/data/list.txt\").run();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Starts Duke, prompting user for input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        boolean running \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        while (running) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                running \u003d command.isRunning();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 59,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents an exception in Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public DukeException () {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 13
    }
  },
  {
    "path": "src/main/java/EmptyTaskDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents an exception when Task is created without input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class EmptyTaskDukeException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public EmptyTaskDukeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public EmptyTaskDukeException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 14
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents an Event task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Represents date and time of event."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private String atTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructor of Event object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param name Name of Event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param atTime atTime of Event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws EmptyTaskDukeException If name is empty."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws InvalidTaskDukeException If atTime input does not follow DD/MM/YYYY HHMM."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Event(String name, String atTime) throws EmptyTaskDukeException, InvalidTaskDukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new EmptyTaskDukeException(\"event\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (atTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new InvalidTaskDukeException(\"event\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.atTime \u003d atTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Accessor to get date and time of Event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public String getAtTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return atTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Gives appropriate representation of Event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return String representation of Event. Includes type of Task, isDone, name of Task and atTime."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder(\"[E]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        stringBuilder.append(super.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        stringBuilder.append(\" (\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        stringBuilder.append(DateTime.create(atTime));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        stringBuilder.append(\")\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 50
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents ExitCommand which causes Duke to close."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructor for ExitCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Executes ExitCommand. Saves current tasks to disk and says goodbye."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param tasks Retrieves Tasks from TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param ui Performs actions on Ui if required."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param storage Saves Tasks from TaskList to Storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        storage.saveList(tasks);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        ui.sayGoodbye();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns false as it is an ExitCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Boolean value of whether Duke should continue running."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public boolean isRunning() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 30
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    String toFind;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public FindCommand(String toFind) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.toFind \u003d toFind.trim();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cTask\u003e searchingList \u003d tasks.getList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (Task task: searchingList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            if(task.getName().contains(this.toFind)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if(matchingTasks.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            System.out.println(\"     No matching tasks found.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            System.out.println(\"     Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                System.out.println(String.format(\"     %d.%s\", i + 1, matchingTasks.get(i)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public boolean isRunning() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 35
    }
  },
  {
    "path": "src/main/java/InvalidInputDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents an exception when Task is created with invalid input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class InvalidInputDukeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public InvalidInputDukeException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 8
    }
  },
  {
    "path": "src/main/java/InvalidTaskDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents an exception when Task has incorrect input. Used when Deadline or Event has incorrect DateTime format."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class InvalidTaskDukeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public InvalidTaskDukeException (String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 8
    }
  },
  {
    "path": "src/main/java/LoadingErrorDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents exception when failed to load saved tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class LoadingErrorDukeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public LoadingErrorDukeException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 8
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a Parser used to read user input in Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Parses input and returns a Command based on input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param fullCommand String of user input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Command based on user input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws InvalidInputDukeException If parser does not understand user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws EmptyTaskDukeException If user did not input task name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws InvalidTaskDukeException If user did not input appropriate DateTime for Event and Deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static Command parse(String fullCommand) throws InvalidInputDukeException, EmptyTaskDukeException, InvalidTaskDukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Scanner scanner \u003d new Scanner(fullCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (scanner.hasNext()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            String toProcess \u003d scanner.next();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            switch (toProcess) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                return new PrintListCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                return new DoneCommand(scanner.nextInt());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                return new DeleteCommand(scanner.nextInt());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                return new FindCommand(scanner.next());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                return createAddCommand(fullCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                throw new InvalidInputDukeException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new InvalidInputDukeException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Abstraction used to create AddCommand from given String."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param fullCommand String of user input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return AddCommand based on user input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws EmptyTaskDukeException If user did not input task name."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws InvalidTaskDukeException If user did not input appropriate DateTime for Event and Deadline."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private static Command createAddCommand(String fullCommand) throws EmptyTaskDukeException, InvalidTaskDukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Task taskToAdd \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        String checkType[] \u003d Arrays.copyOf(fullCommand.split(\" \", 2), 2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        String typeOfTask \u003d checkType[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        String theTask \u003d checkType[1];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        // switch statement for todo, deadline, task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        switch(typeOfTask) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            taskToAdd \u003d new ToDo(theTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            String taskByWhen[];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            if (theTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                taskByWhen \u003d new String[] {null, null};"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                taskByWhen \u003d Arrays.copyOf(theTask.split(\" /by \", 2), 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            String deadlineTask \u003d taskByWhen[0];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            String byWhen \u003d taskByWhen[1];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            taskToAdd \u003d new Deadline(deadlineTask, byWhen);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            String taskAtTime[];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            if (theTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                taskAtTime \u003d new String[] {null, null};"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                taskAtTime \u003d Arrays.copyOf(theTask.split(\" /at \", 2), 2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            String eventTask \u003d taskAtTime[0];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            String atTime \u003d taskAtTime[1];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            taskToAdd \u003d new Event(eventTask, atTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return new AddCommand(taskToAdd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 88
    }
  },
  {
    "path": "src/main/java/PrintListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a PrintListCommand which prints all Tasks in the TaskList."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class PrintListCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructor of PrintListCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public PrintListCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Execute print list command. Prints all Tasks in the TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param tasks Print the Tasks in TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param ui Performs actions on Ui if required."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param storage Saves to Storage or loads from Storage if required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        System.out.println(\"     Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        for (int i \u003d 1; i \u003c tasks.size() + 1; i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            System.out.println(String.format(\"     %d. %s\", i, tasks.get(i)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns true as it is not an ExitCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Boolean value of whether Duke should continue running."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public boolean isRunning() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns true if PrintCommand is of same instance as object. Used for testing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param object Object to compare equality with."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Boolean value of whether current PrintCommand equals input Object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return (object instanceof PrintListCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 44
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents Storage used to save/load data from Duke to disk."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Represents file path of storage."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructor of Storage. Save/load file to input path."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param filePath File path to save/load file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Loads TaskList data from disk."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return TaskList loaded from disk."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws LoadingErrorDukeException If no file found."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public List\u003cTask\u003e loadList() throws LoadingErrorDukeException{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        List\u003cTask\u003e loadedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            FileReader fileReader \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            String readerLine \u003d bufferedReader.readLine(); //initialise first line"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            while (readerLine !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                String[] readArray \u003d readerLine.split(\"\\\\s\\\\|\\\\s\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                Task task \u003d createTaskFromInput(readArray);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                loadedList.add(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                readerLine \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new LoadingErrorDukeException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } catch (IOException | EmptyTaskDukeException | InvalidTaskDukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return loadedList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Saves TaskList data from Duke to disk."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param tasks Takes Tasks from TaskList and saves to disk."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void saveList(TaskList tasks) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            while (!tasks.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                Task task \u003d tasks.remove(1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                String line \u003d generateLineFromTask(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                bufferedWriter.write(line);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                bufferedWriter.newLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Abstraction used to create tasks from String in data."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param inputArray String from reader."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Task created from String."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws InvalidTaskDukeException If input is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws EmptyTaskDukeException If task is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private static Task createTaskFromInput(String[] inputArray) throws InvalidTaskDukeException, EmptyTaskDukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Task createdTask \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        switch(inputArray[0]) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            createdTask \u003d new ToDo(inputArray[2]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            createdTask \u003d new Deadline(inputArray[2], inputArray[3]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            createdTask \u003d new Event(inputArray[2], inputArray[3]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (createdTask !\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            if (inputArray[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                createdTask.setDone(true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                createdTask.setDone(false);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return createdTask;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Abstraction used to generate String line from Task to save to disk."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param task Task from TaskList."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return String output of Task for saving to disk."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private static String generateLineFromTask(Task task) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        // Determine type of Task and add to line"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"T\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"D\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"E\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        stringBuilder.append(\" | \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        // Determine if done and add to line"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (task.isDone()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"1\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\"0\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        stringBuilder.append(\" | \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        // Add name to line"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(task.getName());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(task.getName());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\" | \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(event.getAtTime());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(task.getName());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(\" | \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            stringBuilder.append(deadline.getByWhen());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        String lineToAdd \u003d stringBuilder.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return lineToAdd;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 148
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a Task user inputs in Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Represents the name of the Task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Indicates whether Task is done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructor of Task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param name Sets name of Task to input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Task(String name){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Accessor method for the Task\u0027s name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Accessor to check if Task is done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Sets Task isDone to input."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param done Sets isDone variable to input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.isDone \u003d done;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Sets Task isDone to done."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void done() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns Gives appropriate representation of the Task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return String representation of Task. Includes isDone and name of Task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        StringBuilder toPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            toPrint.append(\"[✓] \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            toPrint.append(\"[✗] \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        toPrint.append(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return toPrint.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 72
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a TaskList in Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * List of all tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    private List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Empty constructor of TaskList. Creates an empty list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Creates a TaskList from a List of Tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param list List of Tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Get list from TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return List containing Tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Adds Task to TaskList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param task Task to add."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        this.list.add(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Removes Task from TaskList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param position Position to remove from."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Removed Task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Task remove(int position) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Task deleted \u003d list.remove(position - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return deleted;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Get Task from TaskList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param position Position to retrieve from."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return Task retrieved."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Task get(int position) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return this.list.get(position - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns size of TaskList."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return int value of size of TaskList."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Returns true if TaskList is empty."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return boolean value of whether TaskList is empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return list.isEmpty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Marks Task in TaskList (in given position) as done."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param position Position of Task to mark as done."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void markAsDone(int position) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Task task \u003d this.get(position);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        task.done();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        System.out.println(\"     Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        System.out.println(String.format(\"     %s\", task));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 89
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a ToDo task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class ToDo extends Task{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructor of ToDo object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param name Name of ToDo."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @throws EmptyTaskDukeException If name is empty."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public ToDo(String name) throws EmptyTaskDukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            throw new EmptyTaskDukeException(\"todo\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Gives appropriate representation of ToDo."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return String representation of ToDo. Includes type of Task, isDone and name of Task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 25
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents the user interface of Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Logo of Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public static final String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Constructor of user interface."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Shows welcome message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                \"     Hello! I\u0027m Duke\\n\" + \"     What can I do for you?\\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                \"    ____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Reads user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @return String representation of user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        String command \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        command \u003d sc.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Prints a loading error. Used when storage failed to load data."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        System.out.println(\"     ☹ OOPS!!! No saved list detected. Creating new list!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Prints border."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Says goodbye to the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void sayGoodbye() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        System.out.println(\"     Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * Prints error when exception caught."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     * @param e Exception that was caught."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void showError(Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        if (e instanceof InvalidInputDukeException) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            System.out.println(\"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else if (e instanceof EmptyTaskDukeException) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            System.out.println(String.format(\"     ☹ OOPS!!! The description of a %s cannot be empty.\", e.getMessage()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else if (e instanceof InvalidTaskDukeException) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            System.out.println(String.format("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "                    \"     ☹ OOPS!!! Invalid input! Make sure your %s has a description and /at or /by.\", e.getMessage()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            System.out.println(e.getMessage()); // for undeclared exceptions"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 82
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " import org.junit.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void parseTest() throws EmptyTaskDukeException, InvalidTaskDukeException, InvalidInputDukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(Parser.parse(\"list\"), new PrintListCommand());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(Parser.parse(\"delete 1\"), new DeleteCommand(1));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 12
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void toStringTest() throws EmptyTaskDukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        ToDo todo \u003d new ToDo(\"Meet Rachel\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(todo.toString(), \"[T][✗] Meet Rachel\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void doneTest() throws EmptyTaskDukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        ToDo todo \u003d new ToDo(\"Meet Rachel\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        todo.done();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(todo.toString(), \"[T][✓] Meet Rachel\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 18
    }
  }
]
