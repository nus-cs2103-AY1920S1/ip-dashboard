[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected SimpleDateFormat format \u003d new SimpleDateFormat();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Deadline(String description, Date by) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        format \u003d new SimpleDateFormat(\"EEEE, MMM d, HH:mm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + format.format(by) + \")\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 19
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    static File file \u003d new File(\"/users/junhup/desktop/duke/src/main/java/duke.txt\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke \\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        readStored();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        readCurrent();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void readStored(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(\"/users/junhup/desktop/duke/src/main/java/duke.txt\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            readData(bufferedReader, tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(\"Please write your deadline/event date in this format: dd/MM/yyyy HH:mm, example: 02/08/2019 14:30\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void readData(BufferedReader bufferedReader, ArrayList\u003cTask\u003e tasksList) throws ParseException{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String inputLine \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            while ((inputLine \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                System.out.println(inputLine);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String[] input \u003d inputLine.split(Pattern.quote(\" | \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String typeOfTasks \u003d input[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (typeOfTasks.equals(\"T\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    addStoredTodo(input, tasksList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                } else if (typeOfTasks.equals(\"D\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    addStoredDeadline(input, tasksList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    addStoredEvent(input, tasksList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void addStoredTodo(String[] input, ArrayList\u003cTask\u003e tasksList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Todo todo \u003d new Todo(input[2]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (Integer.parseInt(input[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            todo.complete();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        tasksList.add(todo);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void addStoredDeadline(String[] input, ArrayList\u003cTask\u003e tasksList) throws ParseException{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Deadline deadline \u003d new Deadline(input[2], convertStringToDate(input[3]));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (Integer.parseInt(input[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            deadline.complete();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        tasksList.add(deadline);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void addStoredEvent(String[] input, ArrayList\u003cTask\u003e tasksList) throws ParseException{"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Event event \u003d new Event(input[2], convertStringToDate(input[3]));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (Integer.parseInt(input[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            event.complete();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        tasksList.add(event);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void readCurrent() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Scanner scanner  \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    scanner.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    printList(tasks);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                } else if (input.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    completeTask(input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                } else if (input.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    deleteTask(input);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    addTaskToList(input);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                handleException(e);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void addTaskToList(String input) throws EmptyDescriptionException, InvalidDescriptionException, InvalidInputException, IOException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"/users/junhup/desktop/duke/src/main/java/duke.txt\", true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        BufferedWriter bufferedWriter \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (input.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            addTodo(input, bufferedWriter);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (input.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            addDeadline(input, bufferedWriter);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (input.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            addEvent(input, bufferedWriter);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            throw new InvalidInputException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        bufferedWriter.close();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void addTodo(String input, BufferedWriter bw) throws EmptyDescriptionException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if (!input.substring(4).isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String description \u003d input.substring(4);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                tasks.add(todo);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.write(\"T | 0 | \" + description);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.flush();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                printOut(todo);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                throw new EmptyDescriptionException(\"todo\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void addDeadline(String input, BufferedWriter bw) throws EmptyDescriptionException, InvalidDescriptionException, ParseException{"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if (input.contains(\"/by\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                int index \u003d input.lastIndexOf(\"/by\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String description \u003d input.substring(8, index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String by \u003d input.substring(index + 3);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                Date byDeadline \u003d convertStringToDate(by);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (description.isBlank()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    throw new EmptyDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (by.isBlank()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    throw new InvalidDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                Deadline deadline \u003d new Deadline(description, byDeadline);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                tasks.add(deadline);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.write(\"D | 0 | \" + description + \" | \" + by);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.flush();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                printOut(deadline);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                throw new InvalidDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void addEvent(String input, BufferedWriter bw) throws EmptyDescriptionException, InvalidDescriptionException, ParseException{"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            if (input.contains(\"/at\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                int index \u003d input.lastIndexOf(\"/at\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String description \u003d input.substring(5, index);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                String at \u003d input.substring(index + 3);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                Date atEvent \u003d convertStringToDate(at);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (description.isBlank()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    throw new EmptyDescriptionException(\"event\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (at.isBlank()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    throw new InvalidDescriptionException(\"event\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                Event event \u003d new Event(description, atEvent);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                tasks.add(event);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.write(\"E | 0 | \" + description + \" | \" + at);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                bw.flush();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                printOut(event);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                throw new InvalidDescriptionException(\"event\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void completeTask(String input) throws IOException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        String[] inputs \u003d input.split(\" \");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        int index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        tasks.get(index).complete();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        updateComplete(index);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        System.out.println(tasks.get(index));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void updateComplete(int index) throws IOException{"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            FileReader fr \u003d new FileReader(file);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            int count \u003d 0;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            ArrayList\u003cString\u003e input \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (count \u003d\u003d index) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    line \u003d line.replaceFirst(\"0\", \"1\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    input.add(line);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    input.add(line);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            fr.close();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            BufferedWriter out \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            for(String s : input) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                out.write(s);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                out.newLine();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            out.flush();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void deleteTask(String input) throws IOException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            String[] inputs \u003d input.split(\" \");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            int index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            Task removedTask \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            updateDelete(index);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(removedTask);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void updateDelete(int index) throws IOException{"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            FileReader fr \u003d new FileReader(file);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            int count \u003d 0;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            ArrayList\u003cString\u003e input \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                if (count \u003d\u003d index) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                    input.add(line);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            fr.close();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            BufferedWriter out \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            for(String s : input) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                out.write(s);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "                out.newLine();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            out.flush();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void printOut(Task task) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void printList(ArrayList\u003cTask\u003e tasksList) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        for(int i \u003d 0; i \u003c tasksList.size(); i++) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(i + 1 + \".\" + tasksList.get(i));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public static void handleException(Exception e) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        if (e instanceof InvalidInputException) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (e instanceof EmptyDescriptionException) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(String.format(\"OOPS!!! The description of a %s cannot be empty.\", e.getMessage()));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (e instanceof InvalidDescriptionException) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(String.format(\"OOPS!!! Invalid input! Make sure your %s has a description and required data after /at for Event or /by for Deadline.\\n\", e.getMessage()));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else if (e instanceof  ParseException) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(String.format(\"Please write your deadline/event date in this format: dd/MM/yyyy HH:mm, example: 02/08/2019 14:30\\n\", e.getMessage()));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    private static Date convertStringToDate(String input) throws ParseException {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        Date result \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\").parse(input);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "junhuplim": 305,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "T | 0 |  read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "E | 1 |  project  |  02/09/2019 20:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "D | 1 |  work  |  30/02/2019 10:00"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 9
    }
  },
  {
    "path": "src/main/java/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class EmptyDescriptionException extends DukeException{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public EmptyDescriptionException() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public EmptyDescriptionException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 9
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected Date at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected SimpleDateFormat format \u003d new SimpleDateFormat();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Event(String description, Date at) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        format \u003d new SimpleDateFormat(\"EEEE, MMM d, HH:mm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + format.format(at) + \")\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "junhuplim": 20
    }
  },
  {
    "path": "src/main/java/InvalidDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class InvalidDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public InvalidDescriptionException() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public InvalidDescriptionException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 9
    }
  },
  {
    "path": "src/main/java/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class InvalidInputException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public InvalidInputException() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public InvalidInputException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 9
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected boolean isDone \u003d false;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return (isDone ? \"[1]\" : \"[0]\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public void complete() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return this.getStatusIcon() + this.description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 20
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhuplim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhuplim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhuplim": 11
    }
  }
]
