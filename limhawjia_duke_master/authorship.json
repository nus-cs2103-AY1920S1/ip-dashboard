[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    archiveVersion \u003d \"0.1.1\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "task runconsole(type: JavaExec) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    classpath \u003d sourceSets.main.runtimeClasspath"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    main \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    args(\"console\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 40,
      "-": 14
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 duke.command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@rem Get duke.command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@rem Slurp the duke.command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@rem Setup the duke.command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 4,
      "-": 80
    }
  },
  {
    "path": "src/main/java/DukeLauncher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.fx.FxMain;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DukeLauncher {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Application.launch(FxMain.class, args);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 8
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.factory.CommandFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.UiActivity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.UiController;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.input.InputHandler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.output.OutputHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Main driver class for duke.Duke program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Duke implements UiActivity {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private UiController ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private CommandFactory factory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean guiEnabled;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        boolean guiEnabled \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (args.length \u003e 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (args[0].equals(\"console\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                guiEnabled \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                System.out.println(\"Invalid arguments.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Options options \u003d OptionsFactory.select(guiEnabled, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            duke.configure(options);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.out.println(\"FATAL: Unable to configure application.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        System.out.println(\"Program starting...\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ui.initializeUi();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void configure(Options options) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Initialize UI component"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        InputHandler input \u003d options.getInput();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OutputHandler output \u003d options.getOutput();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ui \u003d new UiController(input, output, this);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Initialize tasks and storage"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Storage storage \u003d options.getStorage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assert storage !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TasksController tasks \u003d TasksController.fromStorage(storage, ui);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Initialize command factory"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        factory \u003d new CommandFactory(tasks, ui);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void onInputReceived(String input) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Optional\u003c? extends Command\u003e command \u003d factory.parse(input);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (command.isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                command.get().execute();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (UiException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.out.println(\"FATAL: Ui stopped working.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            stopActivity();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void stopActivity() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 90,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Options.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.input.InputHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.output.OutputHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface Options {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public InputHandler getInput();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OutputHandler getOutput();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Storage getStorage();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 12
    }
  },
  {
    "path": "src/main/java/duke/OptionsFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.storage.StorageException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import storage.FileSystemStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.cli.ClInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.cli.ClOutput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.fx.FxMain;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.input.InputHandler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.output.OutputHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class OptionsFactory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static String getDefaultStorageFilePath() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return System.getProperty(\"user.home\") + \"/bin/duke.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static Options select(boolean guiEnabled, boolean persistentDataEnabled) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        InputHandler input \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OutputHandler output \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (guiEnabled) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            FxMain gui \u003d FxMain.getInstance();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            input \u003d gui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            output \u003d gui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            input \u003d ClInput.getInstance();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            output \u003d ClOutput.getInstance();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Setup file storage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (persistentDataEnabled) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                storage \u003d FileSystemStorage.getInstance(getDefaultStorageFilePath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                System.out.println(\"Storage file found.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            } catch (StorageException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                System.out.println(\"Unable to access storage file.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return getOptions(input, output, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static Options getOptions(InputHandler input, OutputHandler output, Storage storage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new Options() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            public InputHandler getInput() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return input;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            public OutputHandler getOutput() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            public Storage getStorage() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return storage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 65
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Command interface to create classes in charge of executing specific actions in the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Runs execution code for a specific action."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return following duke.command if available."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void execute() throws UiException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 18
    }
  },
  {
    "path": "src/main/java/duke/command/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Command to add tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * AddCommand constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasksController controller for duke.task list to be added to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public AddCommand(Task task, TasksController tasksController) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds duke.task to memory."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return listen duke.command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void execute() throws UiException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        tasksController.addTask(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 38
    }
  },
  {
    "path": "src/main/java/duke/command/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.UiController;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Command to exit the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private UiController ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * ByeCommand constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasksController controller for duke.task list to which new tasks will be saved to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ByeCommand(TasksController tasksController, UiController ui) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Attempts to write new tasks to storage. If unsuccessful, verifies with user if program should close."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void execute() throws UiException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ui.exit();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 37
    }
  },
  {
    "path": "src/main/java/duke/command/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Command to delete tasks from memory."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private int deletedTaskIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Delete duke.command constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasksController controller for duke.task list from which duke.task is deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param argument index of duke.task to be deleted."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DeleteCommand(TasksController tasksController, String argument) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        deletedTaskIndex \u003d Integer.valueOf(argument) - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Deletes duke.task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return new ListenCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void execute() throws UiException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        tasksController.deleteTask(deletedTaskIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 39
    }
  },
  {
    "path": "src/main/java/duke/command/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Command to mark tasks as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private int completedTaskIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * DoneCommand constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasksController controller for duke.task list that contains duke.task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param argument index of duke.task to be marked as done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DoneCommand(TasksController tasksController, String argument) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        completedTaskIndex \u003d Integer.valueOf(argument) - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Sets duke.task to done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return new ListenCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void execute() throws UiException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        tasksController.setTaskToDone(completedTaskIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 38
    }
  },
  {
    "path": "src/main/java/duke/command/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Command to find tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private String searchParameter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Finds tasks that contains a particular substring."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasksController controller for duke.task list to be searched."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param arguments substring to search for."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public FindCommand(TasksController tasksController, String arguments) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        searchParameter \u003d arguments;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Search for duke.task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return new ListenCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void execute() throws UiException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        tasksController.findTasks(searchParameter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 38
    }
  },
  {
    "path": "src/main/java/duke/command/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Command to list all tasks in memory."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * ListCommandConstructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasksController controller for duke.task list from which tasks are listed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ListCommand(TasksController tasksController) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Display tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return new ListenCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void execute() throws UiException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        tasksController.displayAllTasks();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 35
    }
  },
  {
    "path": "src/main/java/duke/command/factory/AddCommandFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.factory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.TaskKeyword;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.UnknownTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskCreationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.UiController;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class AddCommandFactory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private UiController ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String UNKNOWN_TASK_MESSAGE \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public AddCommandFactory(TasksController tasksController, UiController ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cAddCommand\u003e parse(String input) throws UiException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Task task \u003d getTask(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            AddCommand command \u003d new AddCommand(task, tasksController);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.of(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (UnknownTaskException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ui.displayOutput(UNKNOWN_TASK_MESSAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskCreationException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ui.displayOutput(e.getDetails());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Task getTask(String input) throws UnknownTaskException, TaskCreationException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String command \u003d CommandUtils.getCommand(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String arguments \u003d CommandUtils.getArguments(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TaskKeyword keyword \u003d TaskKeyword.parseKeyword(command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return keyword.taskProducer.getTask(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 51
    }
  },
  {
    "path": "src/main/java/duke/command/factory/CommandFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.factory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.command.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.UiController;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Command to listen and parse user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class CommandFactory {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private AddCommandFactory addCommandFactory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private UiController ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * ListenCommand constructor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasksController controller for duke.task list on which commands are executed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CommandFactory(TasksController tasksController, UiController ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.addCommandFactory \u003d new AddCommandFactory(tasksController, ui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Reads and parse user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return corresponding commands."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003c? extends Command\u003e parse(String userInput) throws UiException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String command \u003d CommandUtils.getCommand(userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String arguments \u003d CommandUtils.getArguments(userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.of(new ByeCommand(tasksController, ui));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.of(new ListCommand(tasksController));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.of(new DoneCommand(tasksController, arguments));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.of(new DeleteCommand(tasksController, arguments));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.of(new FindCommand(tasksController, arguments));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return addCommandFactory.parse(userInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 62
    }
  },
  {
    "path": "src/main/java/duke/command/factory/CommandUtils.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.factory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class CommandUtils {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static String getCommand(String userInput) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return userInput.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static String getArguments(String userInput) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String[] splitInput \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (splitInput.length \u003e 1) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return splitInput[1];"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 16
    }
  },
  {
    "path": "src/main/java/duke/task/TasksController.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.storage.StorageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.UiController;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Controller class that operates on user\u0027s duke.task data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TasksController {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksView view;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private UiController ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * TaskListController constructor."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController(Storage storage, UiController ui) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.view \u003d new TasksView();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static TasksController fromStorage(Storage storage, UiController ui) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new TasksController(storage, ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Gets tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return list of tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public List\u003cTask\u003e getTasks() throws UiException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return storage.getTasks();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ui.displayOutput(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds tasks and prints corresponding feedback."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param task duke.task to be added."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addTask(Task task) throws UiException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cTask\u003e tasks \u003d storage.getTasks();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            assert tasks.contains(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            storage.writeTasks(tasks);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            view.displayNewTask(task, tasks.size(), ui);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ui.displayOutput(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Sets a duke.task to done and prints corresponding feedback."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param index index of duke.task to be set to done."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setTaskToDone(int index) throws UiException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cTask\u003e tasks \u003d storage.getTasks();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            tasks.get(index).setDone(true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            view.displayTaskDone(tasks.get(index), ui);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            assert tasks.get(index).isDone();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // write changes to storage file"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            storage.writeTasks(tasks);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ui.displayOutput(e.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Prints all tasks."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void displayAllTasks() throws UiException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cTask\u003e tasks \u003d storage.getTasks();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            view.displayAllTasks(tasks, ui);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ui.displayOutput(e.getMessage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Deletes a duke.task and prints corresponding feedback."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param index index of duke.task to be deleted."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void deleteTask(int index) throws UiException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cTask\u003e tasks \u003d storage.getTasks();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Task deleted \u003d tasks.get(index);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            tasks.remove(index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            view.displayTaskDeleted(deleted, tasks.size(), ui);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            assert !tasks.contains(deleted);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            storage.writeTasks(tasks);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ui.displayOutput(e.getMessage());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String message \u003d \" ☹ OOPS!!! You have entered an invalid index :-(\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ui.displayOutput(message);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Finds tasks containing a substring and prints corresponding feedback."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param parameter substring to be searched."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void findTasks(String parameter) throws UiException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cTask\u003e tasks \u003d storage.getTasks();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cTask\u003e matchingTasks \u003d tasks.stream()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .filter(task -\u003e task.getDescription().contains(parameter))"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            view.displaySearchResults(matchingTasks, ui);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ui.displayOutput(e.getMessage());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 155
    }
  },
  {
    "path": "src/main/java/duke/task/TasksView.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.storage.StorageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.UiController;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.OutputBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * View in charge of printing all duke.task related information and output."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TasksView {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Prints tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasks list of tasks to be printed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void displayAllTasks(List\u003cTask\u003e tasks, UiController ui) throws UiException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OutputBuilder builder \u003d new OutputBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        builder.append(\"Here are the tasks in your list:\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .appendTasks(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String output \u003d builder.build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ui.displayOutput(output);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Prints matching tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasks list of matching tasks to be printed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void displaySearchResults(List\u003cTask\u003e tasks, UiController ui) throws UiException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OutputBuilder builder \u003d new OutputBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        builder.append(\"Here are the matching tasks in your list:\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .appendTasks(tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String output \u003d builder.build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ui.displayOutput(output);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Prints feedback and duke.task\u0027s descriptor message when duke.task is added."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param task duke.task to be added."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasksLength current duke.task list length."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void displayNewTask(Task task, int tasksLength, UiController ui) throws UiException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OutputBuilder builder \u003d new OutputBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        builder.append(\"Got it. I\u0027ve added this duke.task:\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .indent()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(task.getDisplayMessage())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(String.format(\"Now you have %d tasks in the list\", tasksLength));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String output \u003d builder.build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ui.displayOutput(output);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Prints feedback and duke.task\u0027s descriptor message when duke.task is marked as done."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param task duke.task to be marked as done"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void displayTaskDone(Task task, UiController ui) throws UiException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OutputBuilder builder \u003d new OutputBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        builder.append(\"Nice! I\u0027ve marked this duke.task as done:\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .indent()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(task.getDisplayMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String output \u003d builder.build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ui.displayOutput(output);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Prints feedback and duke.task\u0027s descriptor message when duke.task is deleted."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param task duke.task to be deleted."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasksLength length of duke.task list after deletion."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void displayTaskDeleted(Task task, int tasksLength, UiController ui) throws UiException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OutputBuilder builder \u003d new OutputBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        builder.append(\"Noted. I\u0027ve removed this duke.task:\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .indent()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(task.getDisplayMessage())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(String.format(\"Now you have %d tasks in the list\", tasksLength));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String output \u003d builder.build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ui.displayOutput(output);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 105
    }
  },
  {
    "path": "src/main/java/duke/task/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.InvalidArgumentsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.UnknownDateTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Task that needs to be completed by a specified date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private LocalDateTime by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Deadline constructor."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param arguments description and time separated by a \"/by\" separator."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UnknownDateTimeException if date and time is given in the incorrect format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws InvalidArgumentsException if arguments do not match required format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Deadline(String arguments) throws UnknownDateTimeException, InvalidArgumentsException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(getDescription(arguments), TaskKeyword.DEADLINE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.by \u003d getTiming(arguments);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected String getTaskStringCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected Optional\u003cString\u003e getTaskExtraDetails() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String byString \u003d DateTime.getString(by);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.of(String.format(\"by: %s\", byString));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static String getDescription(String arguments) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return arguments.split(\" /by \")[0];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private LocalDateTime getTiming(String arguments) throws UnknownDateTimeException, InvalidArgumentsException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String dateTime \u003d arguments.split(\" /by \")[1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return DateTime.parseDateTime(dateTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new InvalidArgumentsException(\"\\\"/by\\\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 54
    }
  },
  {
    "path": "src/main/java/duke/task/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.InvalidArgumentsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.UnknownDateTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Task that needs to be done at a specified time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private LocalDateTime at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Event constructor."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param arguments description and time separated by a \"/at\" separator."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UnknownDateTimeException if date and time is given in the incorrect format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws InvalidArgumentsException if arguments do not match required format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Event(String arguments) throws UnknownDateTimeException, InvalidArgumentsException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(getDescription(arguments), TaskKeyword.EVENT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.at \u003d getTiming(arguments);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected String getTaskStringCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected Optional\u003cString\u003e getTaskExtraDetails() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String atString \u003d DateTime.getString(at);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.of(String.format(\"at: %s\", atString));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static String getDescription(String arguments) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return arguments.split(\" /at \")[0];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private LocalDateTime getTiming(String arguments) throws UnknownDateTimeException, InvalidArgumentsException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String dateTime \u003d arguments.split(\" /at \")[1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return DateTime.parseDateTime(dateTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new InvalidArgumentsException(\"\\\"/at\\\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 54
    }
  },
  {
    "path": "src/main/java/duke/task/tasks/SerializableTaskProducer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskCreationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Functional interface that returns a duke.task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Serializable to be written to storage."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface SerializableTaskProducer extends Serializable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    static final long serialVersionUID \u003d 6529685098267157192L;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Task getTask(String arguments) throws TaskCreationException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 17
    }
  },
  {
    "path": "src/main/java/duke/task/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Task interface to create new duke.task types."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Serializable to be written to storage."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final long serialVersionUID \u003d 6529685098267757690L;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean done;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Task default constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param description each tasks has a description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param keyword each duke.task has a keyword to be input by the user in order to perform related operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Task(String description, TaskKeyword keyword) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        done \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns string code to represent a duke.task type e.g. Event -\u003e E"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return duke.task string code."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected abstract String getTaskStringCode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns any extra details to be appended to the duke.task message."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return duke.task description message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected abstract Optional\u003cString\u003e getTaskExtraDetails();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return done ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Sets duke.task to done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param done duke.task done state."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.done;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns duke.task message."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return duke.task message that describes the tasks state and details."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public final String getDisplayMessage() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String message \u003d String.format(\"[%s][%s] %s\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                getTaskStringCode(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                getStatusIcon(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                description);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return getTaskExtraDetails()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .map(details -\u003e String.format(\"%s (%s)\", message, details))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .orElse(message);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 83
    }
  },
  {
    "path": "src/main/java/duke/task/tasks/TaskKeyword.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.UnknownTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Enum used to encapsulate a duke.task\u0027s keyword to be input by the user to perform related commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Each Task should have its own corresponding TaskKeyword which has to be passed into Task superclass\u0027s constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * TaskKeyword should contain a SerializableTaskProducer that is used to procure its corresponding class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Serializable to be written to storage."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public enum TaskKeyword implements Serializable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    TODO(\"todo\", ToDo::new),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    EVENT(\"event\", Event::new),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    DEADLINE(\"deadline\", Deadline::new);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public final String keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public final SerializableTaskProducer taskProducer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    TaskKeyword(String keyword, SerializableTaskProducer taskProducer) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.taskProducer \u003d taskProducer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static TaskKeyword parseKeyword(String keyword) throws UnknownTaskException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Stream.of(TaskKeyword.values())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .filter(taskKeyWord -\u003e taskKeyWord.keyword.equals(keyword))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .orElseThrow(UnknownTaskException::new);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 35
    }
  },
  {
    "path": "src/main/java/duke/task/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.EmptyTodoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Basic duke.task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * ToDo constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param description description of duke.task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws EmptyTodoException if empty description is given."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ToDo(String description) throws EmptyTodoException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(description, TaskKeyword.TODO);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new EmptyTodoException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected String getTaskStringCode() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected Optional\u003cString\u003e getTaskExtraDetails() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 36
    }
  },
  {
    "path": "src/main/java/error/config/ConfigurationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.config;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ConfigurationException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ConfigurationException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "src/main/java/error/storage/StorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class StorageException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public StorageException(String error) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "src/main/java/error/task/EmptyTodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class EmptyTodoException extends TaskCreationException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"☹ OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 9
    }
  },
  {
    "path": "src/main/java/error/task/InvalidArgumentsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class InvalidArgumentsException extends TaskCreationException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private String invalidArguments;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public InvalidArgumentsException(String invalidArguments) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.invalidArguments \u003d invalidArguments;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"☹ OOPS!!! I\u0027m sorry! Did you mean \" + invalidArguments + \" :-(\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 14
    }
  },
  {
    "path": "src/main/java/error/task/TaskCreationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public abstract class TaskCreationException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public abstract String getDetails();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 5
    }
  },
  {
    "path": "src/main/java/error/task/UnknownDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class UnknownDateTimeException extends TaskCreationException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"☹ OOPS!!! Did you enter a valid date and time?\" + \"\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"Please use the format: dd/mm/yyyy HHmm\" + \"\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \"e.g. 20/02/2020 2240\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 10
    }
  },
  {
    "path": "src/main/java/error/task/UnknownTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class UnknownTaskException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 4
    }
  },
  {
    "path": "src/main/java/error/ui/UiException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class UiException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public UiException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "src/main/java/storage/FileSystemStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.storage.StorageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class FileSystemStorage implements Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private String storageFilePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private FileSystemStorage(String storageFilePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.storageFilePath \u003d storageFilePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static FileSystemStorage getInstance(String storageFilePath) throws StorageException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        FileSystemStorage storage \u003d new FileSystemStorage(storageFilePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        storage.setup();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void setup() throws StorageException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Create new file if it doesn\u0027t exist"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (!fileExists(storageFilePath)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                FileOutputStream outputStream \u003d new FileOutputStream(storageFilePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                ObjectOutputStream taskWriter \u003d new ObjectOutputStream(outputStream);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                System.out.println(\"Creating new storage file.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                taskWriter.writeObject(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                taskWriter.close();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new StorageException(\"Unable to set up storage\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean fileExists(String filePath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new File(filePath).exists();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public List\u003cTask\u003e getTasks() throws StorageException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            FileInputStream inputStream \u003d new FileInputStream(storageFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ObjectInputStream taskReader \u003d new ObjectInputStream(inputStream);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cTask\u003e tasks \u003d (List\u003cTask\u003e) taskReader.readObject();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            taskReader.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new StorageException(\"Unable to read tasks\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void writeTasks(List\u003cTask\u003e tasks) throws StorageException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            FileOutputStream outputStream \u003d new FileOutputStream(storageFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ObjectOutputStream taskWriter \u003d new ObjectOutputStream(outputStream);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            taskWriter.writeObject(tasks);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            taskWriter.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new StorageException(\"Unable to save tasks\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 79
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.storage.StorageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public List\u003cTask\u003e getTasks() throws StorageException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void writeTasks(List\u003cTask\u003e tasks) throws StorageException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 11
    }
  },
  {
    "path": "src/main/java/ui/UiActivity.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface UiActivity {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void onInputReceived(String input);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void stopActivity();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 6
    }
  },
  {
    "path": "src/main/java/ui/UiController.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.input.InputHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.input.InputListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.output.OutputHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class UiController implements InputListener {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private InputHandler input;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private OutputHandler output;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean isStarted;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private UiActivity activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public UiController(InputHandler input,OutputHandler output, UiActivity activity) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.output \u003d output;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isStarted \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void initializeUi() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // start listening to inputs"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        isStarted \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        input.addListener(this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        input.startHandler(output);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void displayOutput(String message) throws UiException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        assert isStarted;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        output.display(message); // output only allowed to print after it is initialized with the input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void update(String input) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // sends input back to activity utilizing the ui"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        activity.onInputReceived(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        output.display(\"Bye! Hope to see you again soon.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        input.stopHandler();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        activity.stopActivity();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 47
    }
  },
  {
    "path": "src/main/java/ui/cli/ClInput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.input.InputHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.input.InputListener;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.output.OutputHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ClInput implements InputHandler {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean isActive;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private List\u003cInputListener\u003e listeners;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static ClInput singleton;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String DUKE_LOGO \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \" ____        _        \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String GREETING \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            DUKE_LOGO + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"Hello! I\u0027m duke.Duke\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"What can I do for you?\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ClInput() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        isActive \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        listeners \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static ClInput getInstance() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (singleton \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            singleton \u003d new ClInput();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return singleton;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void updateAllListeners(String input) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        listeners.forEach(listener -\u003e listener.update(input));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addListener(InputListener listener) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        listeners.add(listener);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void startHandler(OutputHandler output) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (output !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            output.display(GREETING);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        while (isActive) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            updateAllListeners(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void stopHandler() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        isActive \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 73
    }
  },
  {
    "path": "src/main/java/ui/cli/ClOutput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.output.OutputHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ClOutput implements OutputHandler {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static String HORIZONTAL_DIVIDER \u003d \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static ClOutput singleton;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ClOutput() {}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static ClOutput getInstance() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (singleton \u003d\u003d null) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            singleton \u003d new ClOutput();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return singleton;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void display(String message) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String messageWithIndent \u003d message.replaceAll(\"(?m)^\", \"     \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String output \u003d builder.append(HORIZONTAL_DIVIDER)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(messageWithIndent)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(HORIZONTAL_DIVIDER)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 34
    }
  },
  {
    "path": "src/main/java/ui/fx/DukeMainWindowController.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui.fx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import com.sun.javafx.fxml.builder.JavaFXImageBuilder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.input.InputHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javax.swing.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DukeMainWindowController {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Image userImage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Image dukeImage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private InputHandler inputHandler;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DukeMainWindowController() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        userImage \u003d new Image(getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        dukeImage \u003d new Image(getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void configureController(InputHandler input) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.inputHandler \u003d input;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!input.equals(\"\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            printUserMessage(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            inputHandler.updateAllListeners(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void onKeyPressed(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (keyEvent.getCode() \u003d\u003d KeyCode.ENTER) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void printDukeMessage(String message) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        dialogContainer.getChildren().addAll(FxDialogBox.getDukeDialog(message, dukeImage));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void printUserMessage(String message) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                FxDialogBox.getUserDialog(message, userImage)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        );"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "limhawjia": 84
    }
  },
  {
    "path": "src/main/java/ui/fx/FxDialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui.fx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class FxDialogBox extends HBox {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private FxDialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(DukeMainWindowController.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static FxDialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new FxDialogBox(text, img);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static FxDialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        FxDialogBox db \u003d new FxDialogBox(text, img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 56
    }
  },
  {
    "path": "src/main/java/ui/fx/FxMain.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui.fx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.input.InputHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.input.InputListener;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.output.OutputHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class FxMain extends Application implements InputHandler, OutputHandler {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static boolean isStarted \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static FxMain singleton \u003d new FxMain();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static List\u003cInputListener\u003e listeners \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static DukeMainWindowController controller;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String GREETING \u003d \"Hello! I\u0027m duke.Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static FxMain getInstance() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return singleton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            isStarted \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(FxMain.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            VBox vb \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Scene scene \u003d new Scene(vb);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            controller \u003d fxmlLoader.getController();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            controller.configureController(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            controller.printDukeMessage(GREETING);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void updateAllListeners(String input) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        listeners.forEach(listener -\u003e listener.update(input));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addListener(InputListener listener) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        listeners.add(listener);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void startHandler(OutputHandler output) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Application.launch(this.getClass());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void stopHandler() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void display(String message) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        controller.printDukeMessage(message);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 77
    }
  },
  {
    "path": "src/main/java/ui/input/InputHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui.input;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.output.OutputHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface InputHandler {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void updateAllListeners(String input);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addListener(InputListener listener);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void startHandler(OutputHandler output);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void stopHandler();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 10
    }
  },
  {
    "path": "src/main/java/ui/input/InputListener.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui.input;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface InputListener {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void update(String input);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 5
    }
  },
  {
    "path": "src/main/java/ui/output/OutputHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui.output;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface OutputHandler {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void display(String message);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 5
    }
  },
  {
    "path": "src/main/java/util/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.UnknownDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Utility class to handle date and time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Parses a string into a LocalDateTime object. E.g. 24/02/2022 0315."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param dateTimeString string to be parsed, must be in the form dd/mm/yyyy HHmm."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return LocalDateTime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UnknownDateTimeException if date and time is not in the correct format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTimeString) throws UnknownDateTimeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String[] dateTimeStrings \u003d dateTimeString.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (dateTimeStrings.length !\u003d 2) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                throw new UnknownDateTimeException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String date \u003d dateTimeStrings[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String time \u003d dateTimeStrings[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String[] dayMonthYear \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (dayMonthYear.length !\u003d 3) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                throw new UnknownDateTimeException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            int day \u003d Integer.parseInt(dayMonthYear[0]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            int month \u003d Integer.parseInt(dayMonthYear[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            int year \u003d Integer.parseInt(dayMonthYear[2]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (time.length() !\u003d 4) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                throw new UnknownDateTimeException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            int minute \u003d Integer.parseInt(time.substring(2, 4));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return LocalDateTime.of(year, month, day, hour, minute);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (NumberFormatException | DateTimeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new UnknownDateTimeException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Formats LocalDateTime object into string."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param dateTime LocalDateTime to be formatted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return formatted string."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static String getString(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, E, HH:mma\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return formatter.format(dateTime);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 67
    }
  },
  {
    "path": "src/main/java/util/OutputBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/***"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Utility class that encapsulates message strings to be printed by the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * DukeOutput uses DukeMessage to auto-format output messages."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class OutputBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private StringBuilder message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * DukeMessage default constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OutputBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * DukeMessage constructor."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param message string to be encapsulated."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OutputBuilder(String message) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.message \u003d new StringBuilder(message);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds string to end of current message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param text string to be added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return modified DukeMessage."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OutputBuilder append(String text) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        message.append(text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds int to end of current message."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param i int to be added."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return modified DukeMessage."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OutputBuilder append(int i) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        message.append(String.valueOf(i));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds DukeMessage to end of current message."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param outputBuilder DukeMessage to be added."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return modified DukeMessage."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OutputBuilder append(OutputBuilder outputBuilder) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        message.append(outputBuilder.build());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds new line to current message."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return modified DukeMessage."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OutputBuilder newLine() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        message.append(\"\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds indent to current message."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return modified DukeMessage."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OutputBuilder indent() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        message.append(\" \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns encapsulated message."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return message."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String build() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OutputBuilder appendTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!tasks.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            message.append(\"1.\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(tasks.get(0).getDisplayMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (int i \u003d 1; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            message.append(\"\\n\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(i + 1)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(\".\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(tasks.get(i).getDisplayMessage());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 119
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "         prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cStackPane style\u003d\"-fx-background-color: cornflowerblue; -fx-background-radius: 10 10 10 10;\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" textFill\u003d\"white\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" bottom\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cDropShadow blurType\u003d\"THREE_PASS_BOX\" color\u003d\"lightgray\" offsetX\u003d\"5.0\" offsetY\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cStackPane alignment\u003d\"BOTTOM_RIGHT\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"60.0\" fitWidth\u003d\"60.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cInsets top\u003d\"10.0\" bottom\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003cVBox fx:id\u003d\"mainContainer\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "      prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "      fx:controller\u003d\"ui.fx.DukeMainWindowController\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "      style\u003d\"-fx-background-color: whitesmoke\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                vvalue\u003d\"1.0\" fitToWidth\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cInsets top\u003d\"15.0\" bottom\u003d\"15.0\" left\u003d\"10.0\" right\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cHBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" minHeight\u003d\"41.0\" prefHeight\u003d\"41.0\" HBox.hgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                   onKeyPressed\u003d\"#onKeyPressed\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" minHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                prefHeight\u003d\"41.0\" minWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 38
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.InvalidArgumentsException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.UnknownDateTimeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void taskMessageTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Deadline tester \u003d new Deadline(\"test12345 /by 12/12/2020 0010\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String taskMessage \u003d tester.getDisplayMessage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.assertEquals(\"[D][\\u2718] test12345 (by: Dec 12 2020, Sat, 00:10AM)\", taskMessage,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \"Incorrect event duke.task message!\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (UnknownDateTimeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.fail(\"UnknownDateTimeException caught!\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (InvalidArgumentsException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.fail(\"InvalidArgumentsException caught!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void taskSetDoneTest() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Deadline tester \u003d new Deadline(\"test12345 /by 12/12/2020 0010\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            tester.setDone(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String taskMessage \u003d tester.getDisplayMessage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.assertEquals(\"[D][\\u2713] test12345 (by: Dec 12 2020, Sat, 00:10AM)\", taskMessage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \"Event not set to done!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (UnknownDateTimeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.fail(\"UnknownDateTimeException caught!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (InvalidArgumentsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.fail(\"InvalidArgumentsException caught!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void deadlineShouldAcceptValidDate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertThrows(UnknownDateTimeException.class,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                () -\u003e new Deadline(\"test1235 /by 12391204asd\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 45
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.InvalidArgumentsException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.UnknownDateTimeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void taskMessageTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Event tester \u003d new Event(\"test12345 /at 12/12/2020 0010\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String taskMessage \u003d tester.getDisplayMessage();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.assertEquals(\"[E][\\u2718] test12345 (at: Dec 12 2020, Sat, 00:10AM)\", taskMessage,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \"Incorrect event duke.task message!\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (UnknownDateTimeException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.fail(\"UnknownDateTimeException caught!\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (InvalidArgumentsException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.fail(\"InvalidArgumentsException caught!\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void taskSetDoneTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Event tester \u003d new Event(\"test12345 /at 12/12/2020 0010\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            tester.setDone(true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String taskMessage \u003d tester.getDisplayMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.assertEquals(\"[E][\\u2713] test12345 (at: Dec 12 2020, Sat, 00:10AM)\", taskMessage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \"Event not set to done!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (UnknownDateTimeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.fail(\"UnknownDateTimeException caught!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (InvalidArgumentsException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.fail(\"InvalidArgumentsException caught!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void eventShouldAcceptValidDate() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertThrows(UnknownDateTimeException.class,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                () -\u003e new Event(\"test1235 /at 12391204asd\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 44
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.EmptyTodoException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void taskMessageTest() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ToDo tester \u003d new ToDo(\"test12345\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String taskMessage \u003d tester.getDisplayMessage();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.assertEquals(\"[T][\\u2718] test12345\", taskMessage, \"Incorrect todo duke.task message!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (EmptyTodoException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.fail(\"EmptyTodoException caught!\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void taskSetDoneTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ToDo tester \u003d new ToDo(\"test12345\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            tester.setDone(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String taskMessage \u003d tester.getDisplayMessage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.assertEquals(\"[T][\\u2713] test12345\", taskMessage, \"ToDo not set to done!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (EmptyTodoException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.fail(\"EmptyTodoException caught!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void todoShouldNotAcceptEmptyArgument() throws EmptyTodoException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertThrows(EmptyTodoException.class, () -\u003e new ToDo(\"\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 36
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "event project meeting /at 24th aug 7pm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 21
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   # delete output from previous run if exists"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke.Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   # compare the output to the expected output and deletes output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   else"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   "
      }
    ],
    "authorContributionMap": {
      "limhawjia": 38
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the duke.task `clean` simply deletes the project build directory. Tasks can be composed of other duke.task.tasks or be dependent on another duke.task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* **Properties** change the behavior of duke.task.tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.duke.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       mainClassName \u003d \"seedu.duke.duke.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the duke.command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ":bulb: Simply run the duke.command `gradlew {taskName}` in the terminal and Gradle will run the duke.task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `gradlew duke.task.tasks` (or `gradlew duke.task.tasks --all`): shows a list of duke.task.tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ":bulb: Some plugins may add more helpful duke.task.tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle duke.task.tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle duke.task.tasks without needing to type a `gradlew` duke.command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build duke.task.tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the duke.command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Now you can run the duke.command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the duke.command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "│     └─seedu/duke/duke.Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Now that you have a general idea of how to accomplish basic duke.task.tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 15,
      "-": 155
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective error.handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these duke.task.tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 2,
      "-": 241
    }
  }
]
