[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for duke.ui.Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "dawo5010": 1,
      "-": 38
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "//    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "//    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "//    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "//    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "//    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "//    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    // Change this to your duke.main class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 43,
      "-": 14
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "## Who is Larry the Cucumber?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Taken from the VeggieTales series of TV shows, Larry the Cucumber is a cucumber. He\u0027s one of the main protagonists of"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "the show and is Bob the Tomato\u0027s best friend. Together, they mostly serve as co-hosts, although they double up as actors"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "too."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Larry is best known for his witty series \u0027Silly songs with Larry\u0027 which has frequently been memed and circulated around"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "the internet."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "![Image of Larry the Cucumber bot](Ui.png)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#### Help"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Type help to receive in-application help tips at any time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#### Todo"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Allows you to record a to-do event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#### Deadline"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Allows you to set an task with a deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#### Event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Allows you to create an event with a date and time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#### Note"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Allows you to store a note."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#### List"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Lists all the tasks and notes currently stored."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#### Done"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Marks a task as done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#### Delete"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Deletes a task or note."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#### `help` - Lists all possible commands"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Lists all possible commands with their syntax."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Example use: "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "```"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Here are the lists of commands available:  "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "list - displays a list of all available tasks.  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "todo \u003cdescription\u003e - Adds a new todo.  "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "deadline \u003cdescription\u003e /by \u003cdd/MM/yyyy HHmm\u003e - Adds a new deadline.  "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "event \u003cdescription\u003e /at \u003cdd/MM/yyyy HHmm\u003e - Adds a new event.  "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "note \u003ccontent\u003e - Adds a new note.  "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "find \u003ckeyword\u003e - finds an item by the keyword specified.  "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "done \u003cnumber\u003e - marks the entry with the corresponding number done.  "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "delete \u003cnumber\u003e - deletes the entry with the corresponding number.  "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "help - displays this help menu."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#### `list` - Lists all tasks"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Lists all tasks currently stored."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Example use: "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "```"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "1. [T][✗] read book"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#### `todo \u003cdescription\u003e` - Adds a new todo"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Adds a new todo task with `description` as its description."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Example use: "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "`todo read book`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "[T][✗] read book"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Now you have 1 task in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "```"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#### `deadline \u003cdescription\u003e /by \u003cdd/MM/yyyy HHmm\u003e ` - Adds a new deadline."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Adds a new deadline task with `description` as its description, and the date/time as its deadline."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Example use: "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "`deadline return book /by 30/09/2018 1800`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "[D][✗] return book (by: 30/09/2019 1800)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#### `event \u003cdescription\u003e /at \u003cdd/MM/yyyy HHmm\u003e ` - Adds a new event."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Adds a new event task with `description` as its description, and the date/time as its time."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Example use: "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "`event party /at 30/09/2018 1800`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "`Got it. I\u0027ve added this task:`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "`[E][✗] party (at: 30/09/2019 1800)`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "`Now you have 3 tasks in the list.`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#### `note \u003ccontent\u003e` - Adds a new note."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Adds a new short note with `description` as its content."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Example use: "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "`note see a doctor`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "[N] see a doctor"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#### `done \u003cnumber\u003e` - Marks item as done"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Marks with the item with the corresponding number as done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Example use: "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Nice! I\u0027ve marked this task asdone:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "[T][✓] read book"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#### `delete \u003cnumber\u003e` - Deletes an item"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Deletes the item with the corresponding number."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Example use: "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "[T][✓] read book"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#### `find \u003ckeyword\u003e` - Finds an item"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Finds all items matching the given keyword."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Example use: "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "`find book`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "```"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "1. [D][✗] return book (by: 30/09/2019 1800)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "```"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dawo5010": 158,
      "-": 19
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.ui.Main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 11
    }
  },
  {
    "path": "src/main/java/duke/command/CreateDeadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class CreateDeadline {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Task added successfully message. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String task_added_message \u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the DateTimeFormatter object used to specify the format of date/time objects when printed. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    static String createDeadline(ArrayList\u003cTask\u003e taskList, String[] params, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (Parser.joinStrings(params).isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"The description and due date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String[] details \u003d Parser.splitByIdentifier(params, \"/by\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (details[0].isEmpty() \u0026\u0026 details[1].isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"You need to specify a due date, denoted by /by\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (details[0].isEmpty() \u0026\u0026 !details[1].isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"The description or date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Task current;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            current \u003d new Deadline(details[0], LocalDateTime.parse(details[1], formatter));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"You need to specify a due date in the format dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        taskList.add(current);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String s \u003d task_added_message + current + TotalNoOfTasks.totalNoOfTasks(taskList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        boolean isSaved \u003d Save.save(storage, taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        assert isSaved \u003d\u003d true : \"Error: Not saved to disk.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 41
    }
  },
  {
    "path": "src/main/java/duke/command/CreateEvent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class CreateEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Task added successfully message. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String task_added_message \u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the DateTimeFormatter object used to specify the format of date/time objects when printed. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    static String createEvent(ArrayList\u003cTask\u003e taskList, String[] params, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (Parser.joinStrings(params).isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"The description and due date of an event cannot be empty.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String[] details \u003d Parser.splitByIdentifier(params, \"/at\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (details[0].isEmpty() \u0026\u0026 details[1].isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"You need to specify a due date, denoted by /at\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (details[0].isEmpty() \u0026\u0026 !details[1].isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"The description or date of an event cannot be empty.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Task current;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            current \u003d new Event(details[0], LocalDateTime.parse(details[1], formatter));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"You need to specify a due date in the format dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        taskList.add(current);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String s \u003d task_added_message + current + TotalNoOfTasks.totalNoOfTasks(taskList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        boolean isSaved \u003d Save.save(storage, taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        assert isSaved \u003d\u003d true : \"Error: Not saved to disk.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 41
    }
  },
  {
    "path": "src/main/java/duke/command/CreateNote.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class CreateNote {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Task added successfully message. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String note_added_message \u003d \"Got it. I\u0027ve added this note:\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    static String createNote(ArrayList\u003cTask\u003e taskList, String[] params, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (Parser.joinStrings(params).isEmpty()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"You need to specify a body for the note.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Task current \u003d new Note(Parser.joinStrings(params));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        taskList.add(current);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String s \u003d note_added_message + current + TotalNoOfTasks.totalNoOfTasks(taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        boolean isSaved \u003d Save.save(storage, taskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        assert isSaved \u003d\u003d true : \"Error: Not saved to disk.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 25
    }
  },
  {
    "path": "src/main/java/duke/command/CreateToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class CreateToDo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Task added successfully message. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String task_added_message \u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    static String createToDo(ArrayList\u003cTask\u003e taskList, String[] params, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String task \u003d Parser.joinStrings(params);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (task.isEmpty()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Task current \u003d new ToDo(task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        taskList.add(current);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String s \u003d task_added_message + current + TotalNoOfTasks.totalNoOfTasks(taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        boolean isSaved \u003d Save.save(storage, taskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        assert isSaved \u003d\u003d true : \"Error: Not saved to disk.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 25
    }
  },
  {
    "path": "src/main/java/duke/command/Delete.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Delete {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Task deleted successfully message. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String delete_message \u003d \"Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    static String delete(ArrayList\u003cTask\u003e taskList, int index, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Task current;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            current \u003d taskList.remove(index - 1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"No such task with that ID.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String s \u003d delete_message + current;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        boolean isSaved \u003d Save.save(storage, taskList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        assert isSaved \u003d\u003d true : \"Error: Not saved to disk.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 23
    }
  },
  {
    "path": "src/main/java/duke/command/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Provides a custom DukeException objects describing exceptions arising from duke.main.Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the description of the error. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    String error;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new DukeException."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param error The string describing the error."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public DukeException(String error) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string describing the error."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string describing the error."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"☹ OOPS!!! \" + error + \"\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 27
    }
  },
  {
    "path": "src/main/java/duke/command/FindEvent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class FindEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Found successfully message. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String matching_message \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    static String findEvent(ArrayList\u003cTask\u003e taskList, String[] params) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String searchKey \u003d Parser.joinStrings(params);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (searchKey.isEmpty()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"You must specify a keyword to search by.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        StringBuilder s \u003d new StringBuilder(matching_message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            if (taskList.get(i).toString().contains(searchKey)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                s.append(i + 1).append(\".\").append(taskList.get(i));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return s.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 25
    }
  },
  {
    "path": "src/main/java/duke/command/Help.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Help {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String help_message \u003d \"Here are the lists of commands available:\\n\\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"list - displays a list of all available tasks\\n\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"todo \u003cdescription\u003e - Adds a new todo.\\n\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"deadline \u003cdescription\u003e /by \u003cdd/MM/yyyy HHmm\u003e - Adds a new deadline.\\n\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"event \u003cdescription\u003e /at \u003cdd/MM/yyyy HHmm\u003e - Adds a new event.\\n\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"note \u003ccontent\u003e - Adds a new note.\\n\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"find \u003ckeyword\u003e - finds an item by the keyword specified.\\n\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"done \u003cnumber\u003e - marks the entry with the corresponding number done.\\n\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"delete \u003cnumber\u003e - deletes the entry with the corresponding number.\\n\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"help - displays this help menu.\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    static String help() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return help_message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 19
    }
  },
  {
    "path": "src/main/java/duke/command/List.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class List {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Header line for list operation. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String tasklist_header \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    static String list(ArrayList\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"There are no tasks to display.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        StringBuilder s \u003d new StringBuilder(tasklist_header);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            s.append(i + 1).append(\".\").append(taskList.get(i));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return s.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 23
    }
  },
  {
    "path": "src/main/java/duke/command/MarkAsDone.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class MarkAsDone {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Done message. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String done_message \u003d \"Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    static String markAsDone(ArrayList\u003cTask\u003e taskList, int index, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Task current;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            current \u003d taskList.get(index - 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"No such task with that ID.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (current instanceof Note) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"You can\u0027t mark a note as done!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        boolean status \u003d current.markAsComplete();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (!status) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"Action already marked as done!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String s \u003d done_message + current;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        boolean isSaved \u003d Save.save(storage, taskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        assert isSaved \u003d\u003d true : \"Error: Not saved to disk.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 32
    }
  },
  {
    "path": "src/main/java/duke/command/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Parses the user inputs."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Splits the user input into a string array by spaces, one word per index."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param input The string representing the user input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return The string array of words split by spaces."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static String[] parseUserInput(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return input.split(\" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Joins a string array back into a single string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param strings The string array to be joined."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string of the combined words in the string array."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    static String joinStrings(String[] strings) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        for (int i \u003d 0; i \u003c strings.length; i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            if (i \u003d\u003d strings.length - 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                s.append(strings[i]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                s.append(strings[i]).append(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return s.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Combines strings from a string array, and splits the combined string into two arrays with a provided"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * identifier as the delimiter."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param params The string array to be split."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param identifier The identifier to serve as the delimited."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string array, with the first string being the words before the delimiter, and the second string being"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     *      the words after the delimiter."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    static String[] splitByIdentifier(String[] params, String identifier) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        int split \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        for (int i \u003d 0; i \u003c params.length; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            if (params[i].equals(identifier)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                split \u003d i;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        assert split \u003e 0 : \"Input does not have an identifier.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String taskDesc \u003d joinStrings(Arrays.copyOfRange(params, 0, split));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String taskDue \u003d joinStrings(Arrays.copyOfRange(params, split + 1, params.length));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new String[]{taskDesc, taskDue};"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Checks if a valid index has been specified."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Used for mark as done or delete operations."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param params The parameters input by the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return The index, if the user has specified it correctly."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws DukeException If no index was specified."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static int checkForValidIndex(String[] params) throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return Integer.valueOf(params[0]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"You need to specify a task ID to delete.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 72
    }
  },
  {
    "path": "src/main/java/duke/command/Save.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Save {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    static boolean save(Storage storage, ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            storage.saveToFile(taskList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            System.err.println(\"Error writing task to disk. Your changes were not saved. Check your file permissions?\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 19
    }
  },
  {
    "path": "src/main/java/duke/command/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Status;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * duke.command.Storage class. Handles the reading/writing of data to disk."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the location of the file to be read/written to. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the format by which the Date/Time should be read/written as. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new duke.command.Storage object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param fileName The location of the file to be read/written to."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public Storage(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Loads previously-saved tasks from the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return An ArrayList containing the tasks previously stored."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    ArrayList\u003cTask\u003e loadFromFile() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            File file \u003d new File(fileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            String current;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            String[] params;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                current \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                params \u003d current.split(\"\\\\|\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                Status status \u003d (params[1].equals(\"0\") ? Status.INCOMPLETE : Status.COMPLETE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                switch (params[0]) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.add(new ToDo(status, params[2]));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.add(new Deadline(status, params[2], LocalDateTime.parse(params[3], formatter)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.add(new Event(status, params[2], LocalDateTime.parse(params[3], formatter)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                case \"N\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.add(new Note(params[1]));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return new ArrayList\u003cTask\u003e(100);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Saves the tasks to file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskList The ArrayList of tasks to be written to file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws IOException If it fails to write the file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void saveToFile(ArrayList\u003cTask\u003e taskList) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        File f \u003d new File(fileName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            f.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        FileWriter fw \u003d new FileWriter(f);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Task current;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            current \u003d taskList.get(i);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            if (i \u003d\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                s.append(current.toSaveString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                s.append(current.toSaveString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                s.append(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        fw.write(s.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 118
    }
  },
  {
    "path": "src/main/java/duke/command/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * duke.command.TaskList class. Manages all input, output and display related commands affecting the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the ArrayList of tasks. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the storage object used to read/write to file. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new duke.command.TaskList object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param storage The storage object previously created to read/write from file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public TaskList(Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        taskList \u003d storage.loadFromFile();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Lists all tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string containing the list of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws DukeException If no tasks are available."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String list() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return List.list(taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param index The index number of the task to be marked done (starting from 1)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string confirming message that the task was successfully deleted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws DukeException If the task at index does not currently exist."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String markAsDone(int index) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return MarkAsDone.markAsDone(taskList, index, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Deletes a task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param index The index number of the task to be marked done (starting from 1)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string confirming message that the task was successfully deleted."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws DukeException If the task at index does not currently exist."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String delete(int index) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return Delete.delete(taskList, index, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new ToDo task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param params The parameters (description) for the ToDo task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string confirming that the task was successfully added."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws DukeException If the description is empty."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String createToDo(String[] params) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return CreateToDo.createToDo(taskList, params, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new Deadline task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param params The parameters (description, due by date) for the Deadline task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string confirming that the task was successfully added."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws DukeException If the description or due by date is empty or in the wrong format."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String createDeadline(String[] params) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return CreateDeadline.createDeadline(taskList, params, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new Event task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param params The parameters (description, due by date) for the Event task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string confirming that the task was successfully added."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws DukeException If the description or due by date is empty or in the wrong format."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String createEvent(String[] params) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return CreateEvent.createEvent(taskList, params, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new note."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param params The parameters (content) for the note."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string confirming that the task was successfully added."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws DukeException if the note\u0027s contents are empty."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String createNote(String[] params) throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return CreateNote.createNote(taskList, params, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Finds all the tasks matching a certain keyword."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param params A string array of the keyword(s) to search for"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string representing all the tasks matching the keyword"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws DukeException If no search keyword is provided."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String findEvent(String[] params) throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return FindEvent.findEvent(taskList, params);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Allows to user to check what commands are available."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string representing the manual for duke.main.Duke."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return Help.help();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 114
    }
  },
  {
    "path": "src/main/java/duke/command/TotalNoOfTasks.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class TotalNoOfTasks {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Prints a string with the total number of tasks currently stored."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string describing the total number tasks currently stored."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static String totalNoOfTasks(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        int noOfTasks \u003d taskList.size();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"Now you have \" + (noOfTasks) + (noOfTasks \u003d\u003d 1 ? \" task\" : \" tasks\") + \" in the list.\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 17
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Deadline class. Provides a framework for new Deadline objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the date and time of the deadline. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    protected LocalDateTime deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the formatter by which the date and time is printed. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new Deadline object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskName The name of the deadline task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param deadline The due date and time of the deadline task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public Deadline(String taskName, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new Deadline object with its done status pre-determined."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param status The status of the deadline object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskName The name of the deadline task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param deadline The due date and time of the deadline task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public Deadline(Status status, String taskName, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(status, taskName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string describing the deadline task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string describing the deadline task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + deadline.format(formatter) + \")\" + \"\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string in the format to be saved to disk."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string in the format to be saved to disk."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"D|\" + (super.completed \u003d\u003d Status.INCOMPLETE ? \"0\" : \"1\") + \"|\" + taskName + \"|\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                + deadline.format(formatter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 54
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Event class. Provides a framework for new Event objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the date and time of the deadline. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    protected LocalDateTime time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the formatter by which the date and time is printed. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new Event object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskName The name of the Event task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param time The due date and time of the Event task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public Event(String taskName, LocalDateTime time) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new Event object with its done status pre-determined."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param status The status of the Event object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskName The name of the Event task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param time The due date and time of the Event task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public Event(Status status, String taskName, LocalDateTime time) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(status, taskName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string describing the Event task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string describing the Event task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + time.format(formatter) + \")\" + \"\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string in the format to be saved to disk."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string in the format to be saved to disk."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"E|\" + (super.completed \u003d\u003d Status.INCOMPLETE ? \"0\" : \"1\") + \"|\" + taskName + \"|\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                + time.format(formatter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 55
    }
  },
  {
    "path": "src/main/java/duke/task/Note.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Note extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new note object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskName A string representing the content of the note."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public Note(String taskName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string describing the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string describing the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"[N] \" + taskName + \"\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string in the format to be saved to disk."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string in the format to be saved to disk."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"N|\" + taskName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 29
    }
  },
  {
    "path": "src/main/java/duke/task/Status.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * An enumeration to describe the status of a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    INCOMPLETE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    COMPLETE"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 9
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Task class. Provides a framework for new Task objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the status of the task. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    Status completed;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the name of the task. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    String taskName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new task object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskName The name of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    Task(String taskName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.completed \u003d Status.INCOMPLETE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new task object with the status predefined."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param status The status of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskName The name of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    Task(Status status, String taskName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.completed \u003d status;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Marks the task as completed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return Returns a boolean describing if the task has successfully been marked done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public boolean markAsComplete() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (this.completed \u003d\u003d Status.INCOMPLETE) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            completed \u003d Status.COMPLETE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string describing the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string describing the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"[\" + (this.completed \u003d\u003d Status.COMPLETE ? \"✓\" : \"✗\") + \"] \" + taskName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string in the format to be saved to disk."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string in the format to be saved to disk."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public abstract String toSaveString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 61
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * ToDO class. Provides a ToDo for new Deadline objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new ToDo object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskName The name of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public ToDo(String taskName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new ToDo object with predefined status."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param status The status of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskName The name of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public ToDo(Status status, String taskName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(status, taskName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string describing the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string describing the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"[T]\" + super.toString() + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string in the format to be saved to disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string in the format to be saved to disk."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"T|\" + (super.completed \u003d\u003d Status.INCOMPLETE ? \"0\" : \"1\") + \"|\" + taskName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 42
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new duke.main.DialogBox object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param text The text to display in the duke.main.DialogBox."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param img The image to display as the profile picture within the duke.main.DialogBox."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        displayPicture.setClip(new Circle(49, 49, 49));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Flips the view of the duke.main.DialogBox."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a duke.main.DialogBox from the point of view of the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param text The text to display in the duke.main.DialogBox."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param img The image to display as the profile picture within the duke.main.DialogBox."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a duke.main.DialogBox from the point of view of duke.main.Duke."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param text The text to display in the duke.main.DialogBox."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param img The image to display as the profile picture within the duke.main.DialogBox."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 82
    }
  },
  {
    "path": "src/main/java/duke/ui/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.command.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.command.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * duke.main.Duke class. Creates a new duke.main.Ui, duke.command.TaskList and duke.command.Storage object,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * then runs the duke.main method of the program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the duke.main.Ui object used to display messages to the user. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the duke.command.Storage qobject used to read/write from file. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the duke.command.TaskList object used to add/delete tasks. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Easter egg counter. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private int larry \u003d 5;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    // Solution below adapted from https://github.com/nexolute/duke/blob/master/src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Initializes the duke.main.Duke object by setting the duke.main.Ui,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * duke.command.Storage and duke.command.TaskList objects."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param mainWindow the duke.main.MainWindow of the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void initialize(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        storage \u003d new Storage(\"data/larry.txt\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        taskList \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        ui.printIntro();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Requests a response from duke.main.Duke."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param input The input string from the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void getResponse(String input) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            String[] userInput \u003d Parser.parseUserInput(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            String command \u003d userInput[0];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            String[] params \u003d Arrays.copyOfRange(userInput, 1, userInput.length);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ui.printGoodbye();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                //@@author pohlinwei-reused"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                // Taken from https://github.com/pohlinwei/duke/blob/master/src/main/java/duke/util/ui/MainWindow.java."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                // Line 64 - 67."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                // Allows the exit message to be printed before the program closes."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                PauseTransition delay \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                delay.play();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                //@@author"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ui.printToUser(taskList.list());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                index \u003d Parser.checkForValidIndex(params);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ui.printToUser(taskList.markAsDone(index));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                index \u003d Parser.checkForValidIndex(params);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ui.printToUser(taskList.delete(index));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ui.printToUser(taskList.createToDo(params));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ui.printToUser(taskList.createDeadline(params));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ui.printToUser(taskList.createEvent(params));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"note\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ui.printToUser(taskList.createNote(params));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ui.printToUser(taskList.findEvent(params));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ui.printToUser(taskList.help());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"larry\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                if (larry \u003d\u003d 1) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                    //@@author TorstenH.-reused"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    // Taken from https://www.codeproject.com/Questions/398241/how-to-open-url-in-java"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    // Opens a URL in the user\u0027s default browser."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        Desktop desktop \u003d java.awt.Desktop.getDesktop();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        URI url \u003d new URI(\"https://www.youtube.com/watch?v\u003d_uv8Ej4CEoQ\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        desktop.browse(url);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        throw new DukeException(\"Oops, failed to launch Easter Egg.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                    //@@author"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    larry--;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (DukeException | InterruptedException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            ui.printErrToUser(e);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 131,
      "-": 5
    }
  },
  {
    "path": "src/main/java/duke/ui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * A GUI for duke.main.Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Starts the duke.main.MainWindow view."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param stage The stage for the MainWndow."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            stage.setTitle(\"Larry the Cucumber\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 35
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Controller for duke.main.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class MainWindow extends Stage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Bob.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Larry.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        duke.initialize(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates the two dialog boxes, one echoing user input and the other containing duke.main.Duke\u0027s reply and"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * then appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                DialogBox.getUserDialog(input, userImage)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        duke.getResponse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    // Solution below adapted from https://github.com/nexolute/duke/blob/master/src/main/java/duke/MainWindow.java"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void printAsLarry(String s) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(s, dukeImage));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 58
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Ui class. Stores the strings used for greetings."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Pre-intro message. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String pre_intro \u003d \"♬♫♪♩ Cebuuuuu ♩♪♫♬\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Intro message. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String intro \u003d \"Oh hello! I\u0027m Larry.\\nWhat can I do for you?\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Help prompt for user.*/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String help_prompt \u003d \"Unsure what to do? Type \u0027help\u0027.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Goodbye message. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String goodbye \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the MainWindow object. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Initialises duke.main.Ui."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param mainWindow The application\u0027s MainWindow object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public Ui(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns the intro string."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void printIntro() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        mainWindow.printAsLarry(intro + help_prompt);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Prints the goodbye message."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void printGoodbye() throws InterruptedException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        mainWindow.printAsLarry(goodbye);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Prints a message to the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param s The string to be printed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void printToUser(String s) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        mainWindow.printAsLarry(s);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Prints an error message to the user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param e The exception to be printed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void printErrToUser(Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        mainWindow.printAsLarry(e.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 58
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "         \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003c/Insets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 21
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003c/TextField\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 22
    }
  },
  {
    "path": "src/test/java/duke/command/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void joinStrings_normalInput_joinedString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        assertEquals(\"read book\", Parser.joinStrings(new String[]{\"read\", \"book\"}));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void splitByIdentifier_normalInput_splitString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        assertArrayEquals(new String[]{\"return book\", \"02/12/2019 1800\"},"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                Parser.splitByIdentifier(new String[]{\"return book\", \"/by\", \"02/12/2019 1800\"}, \"/by\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 21
    }
  },
  {
    "path": "src/test/java/duke/command/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    TaskList taskList \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void createTodo_normalInput_createdSuccessfully() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            assertEquals(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"[T][✗] read book\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"Now you have 2 tasks in the list.\\n\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.createToDo(new String[] {\"read book\"}));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void createTodo_wrongInput_exceptionThrown() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            assertEquals(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"[T][✗] read book\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"Now you have 2 tasks in the list.\\n\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.createToDo(new String[]{}));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a todo cannot be empty.\\n\", e.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void createDeadline_normalInput_createdSuccessfully() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            assertEquals(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"[D][✗] return book (by: 02/12/2019 1800)\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"Now you have 3 tasks in the list.\\n\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.createDeadline(new String[] {\"return book\", \"/by\", \"02/12/2019 1800\"}));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void createDeadline_wrongInput_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            assertEquals(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"[D][✗] return book (by: 02/12/2019 1800)\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"Now you have 3 tasks in the list.\\n\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.createDeadline(new String[]{}));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description and due date of a deadline cannot be empty.\\n\", e.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void createEvent_normalInput_createdSuccessfully() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            assertEquals(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"[E][✗] project meeting (at: 06/08/2019 1400)\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"Now you have 1 task in the list.\\n\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.createEvent(new String[] {\"project meeting\", \"/at\", \"06/08/2019 1400\"}));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void createEvent_wrongInput_exceptionThrown() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            assertEquals(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"[E][✗] project meeting (at: 06/08/2019 1400)\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"Now you have 1 task in the list.\\n\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.createEvent(new String[]{}));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description and due date \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"of an event cannot be empty.\\n\", e.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 90
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "deadline return book /by 02/12/2019 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "event project meeting /at 06/08/2019 1400"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "deadline return book /by 09/09/2019 1200"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "event project meeting /at 07/09/2019 1400"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 14
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "if ! javac -cp ../src/duke.ui/java -Xlint:none -d ../bin ../src/duke.ui/java/duke.ui.Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "java -classpath ../bin duke.ui.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 34
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the duke.ui class (i.e., the one containing the `duke.ui` method) of your application. The code below assumes your duke.ui class is `seedu.duke.duke.ui.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "       mainClassName \u003d \"seedu.duke.duke.ui.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the duke.ui method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "* `gradlew run`: runs the duke.ui class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your duke.ui code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "├─duke.ui"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "│     └─seedu/duke/duke.ui.Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 7,
      "-": 163
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `duke.ui` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `duke.ui.Duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class duke.ui.Duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Next, we create another Java class, `Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The `Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static void duke.ui(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Application.launch(duke.ui.Duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 5,
      "-": 105
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart2.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "# JavaFX Tutorial Part 2 - Creating a GUI for duke.ui.Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "In this tutorial, we will be creating a GUI for duke.ui.Duke from scratch based on the following mockup."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "![Mockup for duke.ui.Duke](assets/DukeMockup.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX controls"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Controls are reusable UI elements. Refer to the [JavaFX\u0027s official documentation](https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html) for a list of controls available."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "From the mockup above, can you identify the controls that we will need to use? "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Mockup | Control "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "------ | :---: |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "![ImageView](assets/MockupImageView.png) | ImageView"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "![Label](assets/MockupLabel.png) | Label"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "![Button](assets/MockupButton.png) | Button"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "![TextField](assets/MockupTextField.png) | TextField"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "![ScrollPane](assets/MockupScrollPane.png) | ScrollPane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Designing the Layout"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we know what controls we need to implement our UI, let’s start programming! We quickly run into a problem: how do we show all of them on the screen at once? "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Each scene is initialized with a root `Node`. In the previous tutorial, our root `Node` was a `Label`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What happens when we need to display more than one `Node` on the `Scene`? For that, we need to understand the JavaFX hierarchy. Recall from the previous tutorial:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "From the diagram, you see that the root `Node` can contain many other `Nodes` and similarly, each of those `Nodes` can contain many other `Nodes`. This means that if we can find a _container_ to set as our root `Node`, we can place all our other `Nodes` in it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "But how do we get the exact layout we want in the UI? JavaFX provides that functionality in the form of **layout panes** in `javafx.scene.layouts`. Each layout pane follows a _layout policy_ to decide how to arrange its children. For example, the `VBox` lays out its children in a single vertical column and its counterpart, the `HBox` lays out its children in a single horizontal row. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: A comprehensive list of layouts and how they behave is available here from the [official documentation](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/layout/package-summary.html)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "One way to obtain the layout in the mockup is as follows. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "![duke.ui.Duke\u0027s layout](assets/DukeSceneGraph.png) "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "To get that layout, we create a new `AnchorPane` and add our controls to it. Similarly, we create a new `VBox` to hold the contents of the `ScrollPane`. The code should look something like this:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class duke.ui.Duke extends Application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static void duke.ui(String[] args) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         //Step 1. Setting up required components"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         userInput \u003d new TextField();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.setScene(scene);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.show();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and you should see something like this:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "![duke.ui.Duke\u0027s raw layout](assets/RawLayout.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "That is not what we were expecting, what did we forget to do?"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "## Styling the Controls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Almost every JavaFX object offer properties that you can set to customize its look and feel. For example, the `Stage` allows you to set its preferred size and title. Again, refer to the official JavaFX documentation for a comprehensive list of properties that you can modify. Here’s how you can get the application to look like the mockup:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following code to the bottom of the `start` method. You\u0027ll have to add `import javafx.scene.layout.Region;` to the imports too."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1. Formatting the window to look as expected."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        stage.setTitle(\"duke.ui.Duke\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application again. It should now look like this:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "![duke.ui.Duke\u0027s Final layout](assets/FinalLayout.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "1. In the tutorial, we used an `AnchorPane` to achieve the desired layout.  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you find other ways to obtain a similar layout? "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are the advantages and disadvantages of your layout?"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "1. Try interacting with the application"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What happens when you press the `Enter` key or left-click the send button?"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Why?"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 9,
      "-": 149
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "For duke.ui.Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `duke.ui.Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Let’s create our custom control `duke.ui.DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class duke.ui.DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public duke.ui.DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "We use the code in our duke.ui class just like any other control. Here are the steps to update the code to use the custom control in `duke.ui.Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Next, add two images to the `duke.ui/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and duke.ui.Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class duke.ui.Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing duke.ui.Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            new duke.ui.DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            new duke.ui.DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    return \"duke.ui.Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "## Iteration 3 – Adding custom behavior to duke.ui.DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `duke.ui.DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and duke.ui.Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public static duke.ui.DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    return new duke.ui.DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public static duke.ui.DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    var db \u003d new duke.ui.DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Now, we can go back to the `duke.ui.Main` class and change the event handler to use our new `duke.ui.DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            duke.ui.DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            duke.ui.DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "You have successfully implemented a fully functional GUI for duke.ui.Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   * Add padding between each duke.ui.DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 24,
      "-": 219
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   Why does `duke.ui.Main` need to know that `duke.ui.DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   The `duke.ui.Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Let\u0027s return to duke.ui.Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Create the following files in `src/duke.ui/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "**duke.ui.MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "**duke.ui.DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    Running the tool brings up the duke.ui screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    Select `Open Project` \u003e `src/duke.ui/resources/view/duke.ui.MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   ![SceneBuilder opening duke.ui.MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `duke.ui.MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   ![Controller for duke.ui.MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "1. Let’s repeat the process for `duke.ui.DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   The duke.ui difference here is that duke.ui.DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   ![Settings for duke.ui.DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "As part of the effort to separate the code handling duke.ui.Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Let\u0027s implement the `duke.ui.MainWindow` controller class that we specified in `duke.ui.MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "**duke.ui.MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Controller for duke.ui.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class duke.ui.MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private duke.ui.Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void setDuke(duke.ui.Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke.ui.Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                duke.ui.DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                duke.ui.DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Notice how in `duke.ui.MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Let\u0027s create a new `duke.ui.Main` class as the bridge between the existing logic in `duke.ui.Duke` and the UI in `duke.ui.MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "**duke.ui.Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * A GUI for duke.ui.Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class duke.ui.Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private duke.ui.Duke duke \u003d new duke.ui.Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(duke.ui.Main.class.getResource(\"/view/duke.ui.MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fxmlLoader.\u003cduke.ui.MainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "For our custom `duke.ui.DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "**duke.ui.DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class duke.ui.DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private duke.ui.DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(duke.ui.MainWindow.class.getResource(\"/view/duke.ui.DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static duke.ui.DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new duke.ui.DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static duke.ui.DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        var db \u003d new duke.ui.DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "When we create a new instance of `duke.ui.DialogBox`, we set both the controller and root Node to `duke.ui.DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "From this point onwards we can interact with `duke.ui.DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Application.launch(duke.ui.Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "1. Convert `duke.ui.MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "1. Extend `duke.ui.MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 47,
      "-": 247
    }
  },
  {
    "path": "tutorials/textUiTestingTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Text UI Testing Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "1. Create a folder `[project root]\\text-ui-test`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add a `runtest.bat` (if you are on Windows) or `runtest.sh` (if you are on a *nix OS) into the folder, containing the script below.\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  `runtest.bat`:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\duke.ui\\java\\duke.ui.Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   java -classpath ..\\bin duke.ui.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   if ! javac -cp ../src -Xlint:none -d ../bin ../src/duke.ui/java/duke.ui.Duke.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   java -classpath ../bin duke.ui.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "1. Update the `javac` and `java` commands in the script to match the name/location of your duke.ui class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `EXPECTED.txt` to the same folder, containing the expected output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `input.txt` containing the input commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the `.bat`/`.sh` file to execute the test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: based on se-edu/addressbook-level2, adapted by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 5,
      "-": 69
    }
  }
]
