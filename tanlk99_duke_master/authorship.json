[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "task runTests(type:Exec) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    workingDir \u003d \"text-ui-test\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    commandLine \u003d \"./runtest.sh\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 11,
      "-": 15
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to add a task to the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class AddCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Task toAdd;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new AddCommand with a task to add."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   toAdd   the Task object to add to task list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public AddCommand(Task toAdd) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public boolean terminate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Ui ui, TaskList taskList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList.addNewTask(toAdd);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.formatLine(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.formatLine(\"  \" + toAdd);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.formatLine(\"Now you have \" + taskList.getSize() + \" task\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            (taskList.getSize() \u003d\u003d 1 ? \"\" : \"s\") + \" in the list.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            storage.writeCache(taskList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ui.formatLine(\"Sorry! I was unable to save this update in storage. I\u0027ll try again next time.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 39
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command given by the user. Can have a variety of functions,"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * including exiting, adding tasks and deleting tasks."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "abstract class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Indicates whether Duke needs to exit after this command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @returns true if Duke needs to terminate"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    abstract public boolean terminate();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   storage     a Storage object to cache task list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   ui          a Ui object to display Duke\u0027s output"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    a TaskList object which stores the task list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    abstract public void execute(Storage storage, Ui ui, TaskList taskList) throws DukeException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 21
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a deadeline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Deadline have a date associated with them, and can be marked as done."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected String timeString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected Calendar time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected boolean hasCalendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Deadline object using a string to represent time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description description of the Deadline"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   timsString  a String describing the due date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Deadline(String description, String timeString) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.timeString \u003d timeString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.hasCalendar \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Deadline object using a Calendar to represent time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description description of the Deadline"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   time        a Calendar describing the due data"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Deadline(String description, Calendar time) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.hasCalendar \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns a String of the due date."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * If a Calendar was provided, the time will be formatted as \"dd-MM-yyyy HH:mm\"."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @returns a String of the due date"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (hasCalendar) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return dateFormat.format(time.getTime());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return timeString;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + getTime() + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 57
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to delete a task in the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new DeleteCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   index   the index of the task to delete"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public boolean terminate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Ui ui, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e taskList.getSize()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"That is not a valid task number.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Task toRemove \u003d taskList.getTask(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList.deleteTask(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.formatLine(\"Noted. I\u0027ve removed this task.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.formatLine(\"  \" + toRemove);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.formatLine(\"Now you have \" + taskList.getSize() + \" task\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            (taskList.getSize() \u003d\u003d 1 ? \"\" : \"s\") + \" in the list.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            storage.writeCache(taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ui.formatLine(\"Sorry! I was unable to save this update in storage. I\u0027ll try again next time.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 44
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to mark a task in the task list as done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class DoneCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new DoneCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   index   index of task to mark as done"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public boolean terminate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Ui ui, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e taskList.getSize()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"That is not a valid task number.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList.getTask(index).markAsDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.formatLine(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.formatLine(\"  \" + taskList.getTask(index));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            storage.writeCache(taskList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ui.formatLine(\"Sorry! I was unable to save this update in storage. I\u0027ll try again next time.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 41
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            taskList \u003d new TaskList(storage.readCache());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.showGreetings();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                String rawInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                Command parsedCommand \u003d parser.parseInput(rawInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                parsedCommand.execute(storage, ui, taskList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                if (parsedCommand.terminate()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                ui.printHorizontalLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                ui.formatLine(\"Sorry! \" + e);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                ui.printHorizontalLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        new Duke(\"data/duke-cache.txt\").init();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 42,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Exception class for Duke. Meant to be thrown as an internal exception and"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * must be caught to be declared."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new DukeException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   message the error message to display"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 22
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a future event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Events have a date associated with them, and can be marked as complete."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected String timeString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected Calendar time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected boolean hasCalendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Event object using a string to represent time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description description of the Event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   timsString  a String describing the time of the Event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Event(String description, String timeString) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.timeString \u003d timeString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.hasCalendar \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Event object using a Calendar to represent time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description description of the Event"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   time        a Calendar describing the time of the Event"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Event(String description, Calendar time) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.hasCalendar \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns a String of the event time."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * If a Calendar was provided, the time will be formatted as \"dd-MM-yyyy HH:mm\"."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @returns a String of the event time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (hasCalendar) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return dateFormat.format(time.getTime());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return timeString;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + getTime() + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 57
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to quit the system."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public boolean terminate() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Ui ui, TaskList taskList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.formatLine(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 16
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to list all tasks in the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public boolean terminate() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Ui ui, TaskList taskList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (taskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ui.formatLine(\"You have no tasks right now.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ui.formatLine(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                ui.formatLine(i + \".\" + taskList.getTask(i));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 23
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.lang.NumberFormatException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.lang.RuntimeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.lang.ArrayIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Interprets and converts raw input to various classes used by Duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Interprets a command input string to create a Command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   rawInput    raw input passed into command line"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Command parseInput(String rawInput) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String commandPhrase \u003d rawInput.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        switch (commandPhrase) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                index \u003d Integer.parseInt(rawInput.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return new DoneCommand(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                throw new DukeException(\"Please use \u0027done i\u0027 to mark completion of the i-th task in the list.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                index \u003d Integer.parseInt(rawInput.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                throw new DukeException(\"Please use \u0027delete i\u0027 to delete the i-th task in the list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new AddCommand(parseTask(rawInput));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"I don\u0027t understand that command.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Task parseTask(String rawInput) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String taskType \u003d rawInput.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String taskRawDesc;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String taskDesc;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String taskRawTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (!rawInput.contains(\" \")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"The description of a \" + taskType + \" cannot be empty.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskRawDesc \u003d rawInput.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new ToDo(taskRawDesc);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (!taskRawDesc.contains(\" /by \")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                throw new DukeException(\"Please specify the deadline using /by (with spaces preceding and following).\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            taskDesc \u003d taskRawDesc.split(\" /by \", 2)[0];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            taskRawTime \u003d taskRawDesc.split(\" /by \", 2)[1];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (taskDesc.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            } if (taskRawTime.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                throw new DukeException(\"Please specify the deadline using /by (with spaces preceding and following).\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return new Deadline(taskDesc, parseTime(taskRawTime));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                assert e.getMessage().equals(\"Internal exception: no date format found\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return new Deadline(taskDesc, taskRawTime);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (!taskRawDesc.contains(\" /at \")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                throw new DukeException(\"Please specify the event time using /at (with spaces preceding and following).\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            taskDesc \u003d taskRawDesc.split(\" /at \", 2)[0];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            taskRawTime \u003d taskRawDesc.split(\" /at \", 2)[1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (taskDesc.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                throw new DukeException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            } if (taskRawTime.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                throw new DukeException(\"Please specify the event time using /at (with spaces preceding and following).\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return new Event(taskDesc, parseTime(taskRawTime));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                assert e.getMessage().equals(\"Internal exception: no date format found\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return new Event(taskDesc, taskRawTime);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new RuntimeException(\"Our parser encountered a fatal error.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final List\u003cString\u003e dateFormatStrings \u003d Arrays.asList("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        \"dd/MM/yyyy HH:mm\", \"dd-MM-yyyy HH:mm\", \"yyyy/MM/dd HH:mm\", \"yyyy-MM-dd HH:mm\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        \"dd/MM/yyyy\", \"dd-MM-yyyy\", \"yyyy/MM/dd\", \"yyyy-MM-dd\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        \"dd/MM HH:mm\", \"dd-MM HH:mm\", \"dd/MM\", \"dd-MM\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Calendar parseTime(String rawTime) throws DukeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DateFormat dateFormat;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (String dateFormatString : dateFormatStrings) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            dateFormat \u003d new SimpleDateFormat(dateFormatString);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                Date dateTime \u003d dateFormat.parse(rawTime);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                Calendar calendarTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                calendarTime.setTime(dateTime);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                if (!dateFormatString.contains(\"yyyy\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    Calendar currentTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    int currentYear \u003d currentTime.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    calendarTime.set(Calendar.YEAR, currentYear);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    if (calendarTime.before(currentTime)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                        calendarTime.set(Calendar.YEAR, currentYear + 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return calendarTime;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            } catch (ParseException ignored) {}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        //no date format worked"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        throw new DukeException(\"Internal exception: no date format found\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 145
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.lang.ClassNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Handles I/O between Duke and an external cache file. This object can load the task list from"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * the cache file, or write the task list to the cache file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String cacheAddr;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a Storage object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   cacheAddr   relative path to cache file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Storage(String cacheAddr) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.cacheAddr \u003d cacheAddr;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        initializeCache();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private void initializeCache() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            File file \u003d new File(cacheAddr);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            System.out.println(file.getAbsolutePath());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                System.out.println(\"File created!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                ArrayList\u003cTask\u003e emptyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                FileOutputStream fileOut \u003d new FileOutputStream(cacheAddr, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                ObjectOutputStream objOut \u003d new ObjectOutputStream(fileOut);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                objOut.writeObject(emptyList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                objOut.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                fileOut.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"Could not load cache file.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Retrieves the saved task list from the cache file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @returns an ArrayList containing the retrieved task list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public ArrayList\u003cTask\u003e readCache() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            FileInputStream fileIn \u003d new FileInputStream(cacheAddr);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ObjectInputStream objIn \u003d new ObjectInputStream(fileIn);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ArrayList\u003cTask\u003e taskArrayList \u003d (ArrayList\u003cTask\u003e)objIn.readObject();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            objIn.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            fileIn.close();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return taskArrayList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"Could not load cache file.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Writes the contents of a task list to the cache file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param taskList      the TaskList to write"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void writeCache(TaskList taskList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            FileOutputStream fileOut \u003d new FileOutputStream(cacheAddr, false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ObjectOutputStream objOut \u003d new ObjectOutputStream(fileOut);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            objOut.writeObject(taskList.getFullTaskList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            objOut.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            fileOut.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"Could not write to cache file.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 89
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a task in the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Can be marked as done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "abstract public class Task implements Serializable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * New tasks are created as un-done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description a description of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return (isDone ? \"[O]\" : \"[X]\"); //can\u0027t display unicode"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 37
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Handles all operations on the task list and tasks in the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Initializes an empty TaskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Initializes a new TaskList with some pre-existing tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param from      an ArrayList containing some Task objects"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e from) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList \u003d from;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns the size of the task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  size of current task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns a Task object from the task list by index. If the index is invalid, this"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * method will throw an assertion error."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param index     1-indexed value indicating position in the task list to return"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return          Task object at position index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Task getTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert index \u003e 0 \u0026\u0026 index \u003c\u003d taskList.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return taskList.get(index - 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Adds a new Task to the back of the task list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param toAdd     the Task object to add"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void addNewTask(Task toAdd) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Deletes the task given by index. If the index is invalid, this method will throw"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * an assertion error."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param index     1-indexed value indicating position of the task to delete"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void deleteTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert index \u003e 0 \u0026\u0026 index \u003c\u003d taskList.size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList.remove(index - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns the entire task list. This method is intended for storage purposes only."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return      an ArrayList containing the current task list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public ArrayList\u003cTask\u003e getFullTaskList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 74
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a Todo task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Todos can be marked as done."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new ToDo object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description     description of the ToDo task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 19
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Handles the output done by Duke through wrapper functions."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Prints an indented long horizontal line. The length of this line is fixed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void printHorizontalLine() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        formatLine(\"________________________________________\" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            \"________________________________________\\n\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Formats and prints a string as the output of Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Currently, this function indents the output by 4 spaces and prints it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   output  output string to print"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void formatLine(String output) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        System.out.println(\"    \" + output);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Shows Duke\u0027s standard welcome on startup."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void showGreetings() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String[] greeting \u003d {\" ____        _        \","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                \"|  _ \\\\ _   _| | _____ \","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                \"| | | | | | | |/ / _ \\\\\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                \"| |_| | |_| |   \u003c  __/\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                \"Hello! I\u0027m Duke.\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                \"What can I do for you?\"};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (String line : greeting) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            formatLine(line);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Shows an error message if loading from cache failed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String[] apology \u003d {\"Sorry! Duke could not load up your previous task list from storage.\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                \"If this is your first time using Duke, you can ignore this message.\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                \"Starting Duke with a blank task list...\"};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (String line : apology) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            formatLine(line);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 56
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "fi"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "# count the number of testcases"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "testNo\u003d$( ls testcases/input* 2\u003e/dev/null -Ubad1 -- log* | wc -l )"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "for (( i \u003d 1; i \u003c\u003d testNo; i++ ))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "do"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    java -classpath ../bin Duke \u003c testcases/input-$i \u003e temp-$i"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    diff temp-$i testcases/output-$i"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    then"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    else"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    rm temp-$i"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "done"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 32
    }
  }
]
