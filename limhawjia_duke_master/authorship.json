[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "test {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "run{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 14,
      "limhawjia": 27
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 84
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 1
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import command.ListenCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import command.GreetCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.handler.MainErrorHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import task.TaskListController;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Queue\u003cCommand\u003e commands;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TaskListController taskListController \u003d new TaskListController();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private MainErrorHandler errorHandler \u003d new MainErrorHandler();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Duke() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        commands \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        commands.offer(new GreetCommand());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        commands.offer(new ListenCommand(taskListController));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        while (!commands.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Command next \u003d commands.poll();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                next.execute().ifPresent(command -\u003e commands.offer(command));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            } catch(Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                errorHandler.handle(e);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                commands.offer(new ListenCommand(taskListController));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 34,
      "-": 4
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.UnknownCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import task.TaskListController;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import task.tasks.TaskKeyword;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TaskListController taskListController;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public AddCommand(String keyword, String arguments, TaskListController taskListController) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.taskListController \u003d taskListController;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.task \u003d parseTaskType(keyword).taskProducer.apply(arguments);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cCommand\u003e execute() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        taskListController.addTask(task);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.of(new ListenCommand(taskListController));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TaskKeyword parseTaskType(String keyword) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Stream.of(TaskKeyword.values())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .filter(taskKeyWord -\u003e taskKeyWord.keyword.equals(keyword))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .orElseThrow(UnknownCommandException::new);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 33
    }
  },
  {
    "path": "src/main/java/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.DukeInput;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.DukeMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.DukeOutput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cCommand\u003e execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DukeMessage goodbyeMessage \u003d new DukeMessage(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DukeOutput.printMessage(goodbyeMessage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DukeInput.close();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 19
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cCommand\u003e execute();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import task.TaskListController;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TaskListController taskListController;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private int deletedTaskIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DeleteCommand(TaskListController taskListController, String argument) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.taskListController \u003d taskListController;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        deletedTaskIndex \u003d Integer.valueOf(argument) - 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cCommand\u003e execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        taskListController.deleteTask(deletedTaskIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.of(new ListenCommand(taskListController));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 23
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import task.TaskListController;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TaskListController taskListController;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private int completedTaskIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DoneCommand(TaskListController taskListController, String argument) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.taskListController \u003d taskListController;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        completedTaskIndex \u003d Integer.valueOf(argument) - 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cCommand\u003e execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        taskListController.setTaskToDone(completedTaskIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.of(new ListenCommand(taskListController));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 22
    }
  },
  {
    "path": "src/main/java/command/GreetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.DukeMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.DukeOutput;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class GreetCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String DUKE_LOGO \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \" ____        _        \\n\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \"|  _ \\\\ _   _| | _____ \\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \"| | | | | | | |/ / _ \\\\\\n\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \"| |_| | |_| |   \u003c  __/\\n\" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String GREETING \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            DUKE_LOGO + \"\\n\" + \"\\n\" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \"Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \"What can I do for you?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cCommand\u003e execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DukeMessage greetingMessage \u003d new DukeMessage(GREETING);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DukeOutput.printMessage(greetingMessage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 27
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import task.TaskListController;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.DukeOutput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TaskListController taskListController;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ListCommand(TaskListController taskListController) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.taskListController \u003d taskListController;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cCommand\u003e execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        taskListController.displayAllTasks();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.of(new ListenCommand(taskListController));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 21
    }
  },
  {
    "path": "src/main/java/command/ListenCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import task.TaskListController;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.DukeInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ListenCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TaskListController taskListController;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ListenCommand(TaskListController taskListController) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.taskListController \u003d taskListController;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cCommand\u003e execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String userInput \u003d DukeInput.readUserInput();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String command \u003d getCommand(userInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String arguments \u003d getArguments(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return Optional.of(new ByeCommand());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return Optional.of(new ListCommand(taskListController));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return Optional.of(new DoneCommand(taskListController, arguments));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return Optional.of(new DeleteCommand(taskListController, arguments));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return Optional.of(new AddCommand(command, arguments, taskListController));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private String getCommand(String userInput) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return userInput.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private String getArguments(String userInput) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String[] splitInput \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (splitInput.length \u003e 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return splitInput[1];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 47
    }
  },
  {
    "path": "src/main/java/error/EmptyTodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class EmptyTodoException extends TaskException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getTaskErrorMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"☹ OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 9
    }
  },
  {
    "path": "src/main/java/error/TaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public abstract class TaskException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public abstract String getTaskErrorMessage();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 5
    }
  },
  {
    "path": "src/main/java/error/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class UnknownCommandException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 5
    }
  },
  {
    "path": "src/main/java/error/handler/MainErrorHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.TaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.UnknownCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.DukeMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.DukeOutput;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class MainErrorHandler {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final DukeMessage UNKNOWN_COMMAND_ERROR_MESSAGE \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            new DukeMessage(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final DukeMessage GENERIC_ERROR_MESSAGE \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            new DukeMessage(\"☹ OOPS!!! Something unexpected happened!!!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TaskExceptionHandler taskExceptionHandler \u003d new TaskExceptionHandler();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void handle(Exception e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (e instanceof TaskException) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            taskExceptionHandler.handle((TaskException) e);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else if (e instanceof UnknownCommandException){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            DukeOutput.printMessage(UNKNOWN_COMMAND_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            DukeOutput.printMessage(GENERIC_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 26
    }
  },
  {
    "path": "src/main/java/error/handler/TaskExceptionHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.TaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.DukeMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.DukeOutput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TaskExceptionHandler {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void handle(TaskException e) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DukeMessage errorMessage \u003d new DukeMessage(e.getTaskErrorMessage());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DukeOutput.printMessage(errorMessage);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 12
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import task.tasks.TaskKeyword;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean done;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TaskKeyword keyword;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Task(String description, TaskKeyword keyword) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        done \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected abstract String getTaskStringCode();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected abstract Optional\u003cString\u003e getTaskExtraDetails();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    String getTaskDescription() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    String getStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return done ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public final String getTaskMessage() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String message \u003d String.format(\"[%s][%s] %s\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                getTaskStringCode(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                getStatusIcon(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                getTaskDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return getTaskExtraDetails()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .map(details -\u003e String.format(\"%s (%s)\", message, details))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .orElse(message);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 44
    }
  },
  {
    "path": "src/main/java/task/TaskListController.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TaskListController {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TaskListView view;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TaskListController() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        view \u003d new TaskListView();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        view.displayNewTask(task, tasks.size());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setTaskToDone(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        tasks.get(index).setDone(true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        view.displayTaskDone(tasks.get(index));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void displayAllTasks() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        view.displayAllTasks(tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task deletedTask \u003d tasks.get(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        view.displayTaskDeleted(deletedTask, tasks.size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 35
    }
  },
  {
    "path": "src/main/java/task/TaskListView.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.DukeMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.DukeOutput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TaskListView {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void displayAllTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DukeMessage taskList \u003d new DukeMessage(\"Here are the tasks in your list:\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!tasks.isEmpty()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            taskList.append(\"1.\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(formatTaskMessage(tasks.get(0)));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (int i \u003d 1; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            taskList.newLine()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(i + 1)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(\".\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(formatTaskMessage(tasks.get(i)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DukeOutput.printMessage(taskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private DukeMessage formatTaskMessage(Task task) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new DukeMessage(task.getTaskMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void displayNewTask(Task task, int tasksLength) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DukeMessage newTaskMessage \u003d new DukeMessage(\"Got it. I\u0027ve added this task:\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .indent()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(task.getTaskMessage())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(String.format(\"Now you have %d tasks in the list\", tasksLength));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DukeOutput.printMessage(newTaskMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void displayTaskDone(Task task) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DukeMessage taskDoneMessage \u003d new DukeMessage(\"Nice! I\u0027ve marked this task as done:\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .indent()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(task.getTaskMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DukeOutput.printMessage(taskDoneMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void displayTaskDeleted(Task task, int tasksLength) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DukeMessage taskDeletedMessage \u003d new DukeMessage(\"Noted. I\u0027ve removed this task:\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .indent()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(task.getTaskMessage())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(String.format(\"Now you have %d tasks in the list\", tasksLength));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DukeOutput.printMessage(taskDeletedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 59
    }
  },
  {
    "path": "src/main/java/task/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package task.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Deadline(String arguments) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(getDescription(arguments), TaskKeyword.DEADLINE);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.by \u003d getTiming(arguments);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected String getTaskStringCode() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected Optional\u003cString\u003e getTaskExtraDetails() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.of(String.format(\"by: %s\", by));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static String getDescription(String arguments) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return arguments.split(\" /by \")[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static String getTiming(String arguments) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return arguments.split(\" /by \")[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 32
    }
  },
  {
    "path": "src/main/java/task/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package task.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Event(String arguments) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(getDescription(arguments), TaskKeyword.EVENT);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.at \u003d getTiming(arguments);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected String getTaskStringCode() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected Optional\u003cString\u003e getTaskExtraDetails() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.of(String.format(\"at: %s\", at));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static String getDescription(String arguments) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return arguments.split(\" /at \")[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static String getTiming(String arguments) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return arguments.split(\" /at \")[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 32
    }
  },
  {
    "path": "src/main/java/task/tasks/TaskKeyword.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package task.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public enum TaskKeyword {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    TODO(\"todo\", (String arguments) -\u003e new ToDo(arguments)),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    EVENT(\"event\", (String arguments) -\u003e new Event(arguments)),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    DEADLINE(\"deadline\", (String arguments) -\u003e new Deadline(arguments));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public final String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public final Function\u003cString, Task\u003e taskProducer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    TaskKeyword(String keyword, Function\u003cString, Task\u003e taskProducer) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.taskProducer \u003d taskProducer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 19
    }
  },
  {
    "path": "src/main/java/task/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package task.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.EmptyTodoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(description, TaskKeyword.TODO);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new EmptyTodoException();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected String getTaskStringCode() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected Optional\u003cString\u003e getTaskExtraDetails() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 25
    }
  },
  {
    "path": "src/main/java/util/DukeInput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DukeInput {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static Scanner SCANNER \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static String readUserInput() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return SCANNER.nextLine();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static void close() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        SCANNER.close();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 16
    }
  },
  {
    "path": "src/main/java/util/DukeMessage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DukeMessage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private StringBuilder message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DukeMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DukeMessage(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.message \u003d new StringBuilder(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DukeMessage append(String text) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        message.append(text);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DukeMessage append(int i) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        message.append(String.valueOf(i));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DukeMessage append(DukeMessage dukeMessage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        message.append(dukeMessage.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DukeMessage newLine() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        message.append(\"\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DukeMessage indent() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        message.append(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    String getMessage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 42
    }
  },
  {
    "path": "src/main/java/util/DukeOutput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DukeOutput {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static String HORIZONTAL_DIVIDER \u003d \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static void printMessage(DukeMessage message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String output \u003d HORIZONTAL_DIVIDER +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                message.getMessage().replaceAll(\"(?m)^\", \"     \") + \"\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + HORIZONTAL_DIVIDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 13
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void dummyTest() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        System.out.println(\"dummyTest: testing\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 8
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "event project meeting /at 24th aug 7pm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 21
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   # delete output from previous run if exists"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   # compare the output to the expected output and deletes output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   else"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   "
      }
    ],
    "authorContributionMap": {
      "limhawjia": 38
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other task.tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* **Properties** change the behavior of task.tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "       mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `gradlew task.tasks` (or `gradlew task.tasks --all`): shows a list of task.tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ":bulb: Some plugins may add more helpful task.tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle task.tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle task.tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build task.tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "│     └─seedu/duke/Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Now that you have a general idea of how to accomplish basic task.tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 8,
      "-": 162
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective error.handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these task.tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 2,
      "-": 241
    }
  }
]
