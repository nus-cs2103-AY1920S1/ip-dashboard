[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    archiveVersion \u003d \"v0.1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "run {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 32,
      "-": 15
    }
  },
  {
    "path": "duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "ToDo|0|make coffee"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 1
    }
  },
  {
    "path": "src/main/java/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "ToDo|1|make coffee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "ToDo|0|delete comments from youtube"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Event|0|orbital splashdown|28/08/2019 1900"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 3
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Create a row of content comprise of a photo and text from User."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param text A String of text to be displayed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param img An Image object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return A DialogBox;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Create a row of content comprise of a photo and text from Duke."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param text A String of text to be displayed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param img An Image object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return A DialogBox;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 74
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.util.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Driver class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Initializes the duke chatbot with a file path for storage purpose."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            this.storage \u003d new Storage(\"duke.txt\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            tasks \u003d new TaskList(storage.readFile());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Receive input from JavaFX interface and process it and return output for user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param input Input from JavaFX interface"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return The response of Duke given the command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            Command c \u003d Parser.parseUserInput(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            String result \u003d c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            System.out.println(result);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 52,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 31
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/dragonball.jpeg\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/dragonball.jpeg\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (response.equals(\"Good bye!\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            NewThread object \u003d new NewThread();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            object.start();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 56
    }
  },
  {
    "path": "src/main/java/duke/NewThread.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * This class helps to pause 0.5 seconds before exiting Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class NewThread extends Thread {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * This run method pause the thread for 0.5 seconds and exit the program with exit code 0."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            Thread.sleep(500);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 18
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Represents an add command when the user typed todo, deadline or event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * It has an execution method to add which ever task needed for it."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private String[] parsedString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns the string array parsedString."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return Parsed string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String[] getParsedString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return parsedString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns the date of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * If task does not have date return null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return Date of the task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Initializes an AddCommand instance with date and command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Since it must have a date it will be either a deadline or event task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param command Include type of task and content of the task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param date A Date object which specifies the date for the task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public AddCommand(String[] command, Date date) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assert command.length \u003e 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.parsedString \u003d command;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Initializes an AddCommand instance with and command only."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Since it does not have a date it will be a todo task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param command Include type of task and content of the task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public AddCommand(String[] command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assert command.length \u003e 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.parsedString \u003d command;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Creates a Task object from the command and date information."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Add the newly created object to task list and update the storage file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param tasks The list of task currently recorded."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param ui An UI object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param storage Storage of the current list of tasks."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String execute(TaskList tasks, UI ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        switch (parsedString[0]) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            task \u003d new ToDo(parsedString[1]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            task \u003d new Deadline(parsedString[1], date);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            task \u003d new Event(parsedString[1], date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            // if the user type anything besides the three types of item"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        storage.updateFile(tasks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this task\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        sb.append(\"  \" + task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (tasks.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(\"Now you have 1 task in the list\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(String.format(\"Now you have %d tasks in the list\\n\", tasks.size()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String result \u003d sb.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        System.out.println(result);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Checks if this is the exit command."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return false as it is an AddCommand."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Get the command string"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Compare another object with this object to see if they have the same"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * information."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param o The other object that is going to be compared to this."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return true or false based on the execution of the method."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // If the object is compared with itself then return true"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        /* Check if o is an instance of Complex or not"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \"null instanceof [type]\" also returns false */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(o instanceof AddCommand)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // typecast o to Complex so that we can compare data members"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        AddCommand c \u003d (AddCommand) o;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // Compare the data members and return accordingly"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return Arrays.equals(this.parsedString, c.parsedString)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    \u0026\u0026 date.equals(c.date);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return Arrays.equals(this.parsedString, c.parsedString);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 161
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Represents a command that is able to execute and perform the command given by user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    String command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public abstract String execute(TaskList tasks, UI ui, Storage storage) throws Exception;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public abstract boolean equals(Object o);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public abstract String getCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 21
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Represents a DeleteCommand. Upon execution will delete the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * task accordingly from a given TaskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Initializes an DeleteCommand instance with command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The command should include the index of task to be deleted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param command The full message received from user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public DeleteCommand(String command) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assert !command.isEmpty();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Deletes the task base on the index in command. Update"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * the storage file after that."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param tasks The list of task currently recorded."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param ui An UI object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param storage Storage of the current list of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws DukeException If index is negative or exceeds the size of TaskList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String execute(TaskList tasks, UI ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        int index \u003d Integer.parseInt(command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (index \u003e tasks.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! That number you put in does not exit\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Task task \u003d tasks.get(index - 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        tasks.remove(index - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        sb.append(\"Noted. I\u0027ve removed this task: \\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        sb.append(\"  \" + task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (tasks.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(\"Now you have 1 task in the list\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(String.format(\"Now you have %d tasks in the list\\n\", tasks.size()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        storage.updateFile(tasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String result \u003d sb.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        System.out.println(result);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Checks if this is the exit command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return false as it is an DeleteCommand."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Get the command string"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Compare another object with this object to see if they have the same"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * information."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param o The other object that is going to be compared to this."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return true or false based on the execution of the method."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // If the object is compared with itself then return true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        /* Check if o is an instance of Complex or not"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \"null instanceof [type]\" also returns false */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(o instanceof DeleteCommand)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // typecast o to Complex so that we can compare data members"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        DeleteCommand c \u003d (DeleteCommand) o;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.command.equals(c.command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 102
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Represents a DoneCommand. Upon execution will mark the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * task as done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Initializes an DoneCommand instance with command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The command should include the index of task to be marked done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param command The index given by user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public DoneCommand(String command) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assert !command.isEmpty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Mark the task as done based on the index in command. Update"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * the storage file after that."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param tasks The list of task currently recorded."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param ui An UI object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param storage Storage of the current list of tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws DukeException If index is negative or exceeds the size of TaskList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws FileNotFoundException If file cannot be found."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String execute(TaskList tasks, UI ui, Storage storage) throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        int index \u003d Integer.valueOf(command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (index \u003e tasks.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! That number you put in does not exit\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        tasks.get(index - 1).toggleState();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        sb.append(\"Nice! I\u0027ve marked this task as done: \\n  \" + tasks.get(index - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        storage.updateFile(tasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String result \u003d sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        System.out.println(result);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Checks if this is the exit command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return false as it is an DoneCommand."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Get the command string"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Compare another object with this object to see if they have the same"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * information."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param o The other object that is going to be compared to this."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return true or false based on the execution of the method."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // If the object is compared with itself then return true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        /* Check if o is an instance of Complex or not"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \"null instanceof [type]\" also returns false */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(o instanceof DoneCommand)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // typecast o to Complex so that we can compare data members"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        DoneCommand c \u003d (DoneCommand) o;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.command.equals(c.command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 97
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Represents a ExitCommand. Upon execution will exit the chatbot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Does nothing because the logic will terminate."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        System.out.println(\"Good bye!\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return \"Good bye!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Checks if this is the exit command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return true as it is an ExitCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Get the command string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Compare another object with this object to see if the other object is ExitCommand."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param o The other object that is going to be compared to this."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return true or false based on the execution of the method."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // If the object is compared with itself then return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        /* Check if o is an instance of Complex or not"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \"null instanceof [type]\" also returns false */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(o instanceof ExitCommand)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 63
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Represents a find command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public FindCommand(String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assert !command.isEmpty();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Loop through the task list and search for similar tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Print out tasks that matches search term."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param tasks TaskList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param ui UI"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param storage Storage containing file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Task task : tasks.getList()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (task.getContent().contains(command)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                result.add(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        sb.append(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Task task : result) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(index + \" \" + task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String response \u003d sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        System.out.println(response);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Get the command string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // If the object is compared with itself then return true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        /* Check if o is an instance of Complex or not"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \"null instanceof [type]\" also returns false */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(o instanceof DoneCommand)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // typecast o to Complex so that we can compare data members"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        FindCommand c \u003d (FindCommand) o;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.command.equals(c.command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 78
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Represents a ListCommand. Upon execution will show user all the tasks in the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Iterates through each item in the list and show it to user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param tasks Task list that holds the current tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param ui The ui that will handle output"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param storage Connects to the storage file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        sb.append(\"Here are the tasks in your list: \\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Task task : tasks.getList()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(index + \". \" + task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String result \u003d sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        System.out.println(result);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Checks if this is the exit command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return false as it is a ListCommand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Get the command string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Compare another object with this object to see if the other object is ListCommand."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param o The other object that is going to be compared to this."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return true or false based on the execution of the method."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // If the object is compared with itself then return true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        /* Check if o is an instance of Complex or not"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \"null instanceof [type]\" also returns false */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(o instanceof ListCommand)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 75
    }
  },
  {
    "path": "src/main/java/duke/command/RescheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class RescheduleCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Date date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Initializes an RescheduleCommand instance with command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The command should include the index of task to be marked done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param command The index given by user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public RescheduleCommand(String command, Date date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Mark the task as done based on the index in command. Update"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * the storage file after that."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param tasks The list of task currently recorded."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param ui An UI object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param storage Storage of the current list of tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws DukeException If index is negative or exceeds the size of TaskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws FileNotFoundException If the file cannot be found."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String execute(TaskList tasks, UI ui, Storage storage) throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        int index \u003d Integer.valueOf(command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (index \u003e tasks.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! That number you put in does not exit\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Task task \u003d tasks.get(index - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        task.reschedule(this.date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        sb.append(\"Nice! I\u0027ve rescheduled this task: \\n  \" + tasks.get(index - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        storage.updateFile(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Checks if this is the exit command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return false as it is an RescheduleCommand."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Get the command string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Compare another object with this object to see if they have the same"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * information."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param o The other object that is going to be compared to this."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return true or false based on the execution of the method."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // If the object is compared with itself then return true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        /* Check if o is an instance of Complex or not"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \"null instanceof [type]\" also returns false */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(o instanceof AddCommand)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // typecast o to Complex so that we can compare data members"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        RescheduleCommand c \u003d (RescheduleCommand) o;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // Compare the data members and return accordingly"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.command.equals(c.command)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 date.equals(c.date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 93
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Represents customised exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 10
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.util.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.util.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * A class that handles data file of the program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Initialize a Storage object with a file path. A file object will be created"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * base on the file path given. If the file does not exist, create a file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param filePath The file path to the storage file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws IOException If there is an error for io."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Storage(String filePath) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * After a command is executed, the tasks in the list might be changed. The method"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * uses PrintWriter to iterate through the updated tasks list to write the most updated"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * information to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param list The TaskList that contains the current tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws FileNotFoundException When the file cannot be located."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void updateFile(TaskList list) throws FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        PrintWriter pw \u003d new PrintWriter(file);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Task task : list.getList()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            pw.println(Formatter.formatTaskForWriting(task));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        pw.close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Read from the data file and parse the information to create corresponding"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * task objects."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return An ArrayList that contains all the task objects created from data file information."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws IOException If file cannot be located."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException If the information cannot be parsed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ArrayList\u003cTask\u003e readFile() throws ParseException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assert br !\u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String st;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        while ((st \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            result.add(Parser.parseTaskString(st));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 69
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Represents a deadline task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Date deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Initialize a deadline task with content and the deadline of task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param content The String description of the Deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param deadline A Date object that represents the deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Deadline(String content, Date deadline) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(content);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns the deadline in a dd/mm/yyyy HHmm format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return The String format of the deadline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return inputFormatter.format(deadline);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Reschedule the date of the event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param date Date object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void reschedule(Date date) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.deadline \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Format the task into a format presentable to users."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return The format that the user wish to see."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return done ? String.format(\"[D][%c] %s (by: %s)\", tick, content, outputFormatter.format(deadline))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                : String.format(\"[D][%c] %s (by: %s)\", cross, content, outputFormatter.format(deadline));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 48
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Represents an event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Date time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Initialize an event with content and the time of the event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param content The String description of the Event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param time A Date object that represents the time of the event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Event(String content, Date time) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(content);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns the deadline in a dd/mm/yyyy HHmm format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return The String format of the deadline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return inputFormatter.format(time);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Reschedule the date of the event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param date Date object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void reschedule(Date date) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.time \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Format the task into a format presentable to users."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return The format that the user wish to see."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return done ? String.format(\"[E][%c] %s (at: %s)\", tick, content, outputFormatter.format(time))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                : String.format(\"[E][%c] %s (at: %s)\", cross, content, outputFormatter.format(time));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 48
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * A task class that represents a task. It usually contains the description and boolean"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * which indicates whether it is done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    String content;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    boolean done;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    static final char tick \u003d \u0027✓\u0027;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    static final char cross \u003d \u0027✗\u0027;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    static final SimpleDateFormat inputFormatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    static final SimpleDateFormat outputFormatter \u003d new SimpleDateFormat(\"E, dd MMM yyyy ha\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Initialize the task with a string content and the done state false."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param content The description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Task(String content) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.content \u003d content.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Since not all tasks have a time attribute, this method returns empty"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * string for task that does not have a time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return String, an empty string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Get the content of the task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return String content of the task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Different task have different format to output thus this is a simpler version"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * which just return the content."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return String content of the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.content;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Toggle the done state of the task. Will change done attribute from true to false and"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * false to true."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void toggleState() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.done \u003d !done;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Checks if the task is done."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return Boolean done."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void reschedule(Date date) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 71
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Represents the collection of the tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Initializes the object with an ArrayList of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param list ArrayList of tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Initializes the object with an empty ArrayList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void remove(Task task) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        list.remove(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 49
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Represents a todo task item."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Initialize a todo item with the content."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param content String desctiption."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ToDo(String content) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(content);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return done ? String.format(\"[T][%c] %s\", tick, content) : String.format(\"[T][%c] %s\", cross, content);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 20
    }
  },
  {
    "path": "src/main/java/duke/ui/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Represents an UI interface which handles user\u0027s input and output."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Initialize the object with a scanner to handle user input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Print welcome message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        System.out.println(\"Hello I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Prints the msg passed in."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param message A string message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Prints a divider line."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        System.out.println(\"-------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 38
    }
  },
  {
    "path": "src/main/java/duke/util/Formatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Initialize a formatter object which helps to format task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Formatter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Takes in a task object and format it in the format:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * type of task|description|datetime if available."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param task A task object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return The formatted string that represents the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static String formatTaskForWriting(Task task) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String className \u003d task.getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        sb.append(className);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        sb.append(\"|\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (task.isDone()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(\"1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(\"0\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        sb.append(\"|\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        sb.append(task.getContent());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!className.equals(\"ToDo\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(\"|\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(task.getTime());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 35
    }
  },
  {
    "path": "src/main/java/duke/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Represents a parser object that helps to parse input from data file and user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static final SimpleDateFormat FORMATTER \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * This method parse sa string and creates task objects base on the information."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param str String in the format task type|done state|description|datetime if applicable."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return Task object created."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException When the input string format is wrong."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Task parseTaskString(String str) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assert !str.isEmpty() : \"something wrong with the data file\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String[] strs \u003d str.split(\"\\\\|\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        switch (strs[0]) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case (\"ToDo\"):"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            Task todo \u003d new ToDo(strs[2]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            assert todo !\u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (strs[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                todo.toggleState();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return todo;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case (\"Deadline\"):"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            Date date \u003d FORMATTER.parse(strs[3]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            Task deadline \u003d new Deadline(strs[2], date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            assert deadline !\u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (strs[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                deadline.toggleState();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return deadline;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case (\"Event\"):"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            Date time \u003d FORMATTER.parse(strs[3]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            Task event \u003d new Event(strs[2], time);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            assert event !\u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (strs[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                event.toggleState();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return event;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new ToDo(\"shouldn\u0027t come to here\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Takes in string from user and decide what does the user wish to do. According to the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * user\u0027s input, return the appropriate command object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param str User input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return Command object inferred from input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws DukeException If the user input is not in the correct format"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException If the date format cannot be parsed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Command parseUserInput(String str) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assert !str.isEmpty() : \"did not receive input\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (isList(str)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return createListCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else if (isDone(str)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return createDoneCommand(str);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else if (isDelete(str)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return createDeleteCommand(str);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else if (isFind(str)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return createFindCommand(str);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else if (isExit(str)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return createExitCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else if (isAdd(str)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return createAddCommand(str);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else if (isReschedule(str)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return createRescheduleCommand(str);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! I do not understand what did you just typed.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Creates a DoneCommand."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param str User\u0027s input"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return DoneCommand"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws DukeException If done is not followed by a number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Command createDoneCommand(String str) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String[] afterSplit \u003d str.trim().split(\" \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (afterSplit.length \u003c\u003d 1 || afterSplit[1].split(\" \").length \u003e 2) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please input a number after done and nothing else.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new DoneCommand(afterSplit[1]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Creats a DeleteCommand."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param str User\u0027s input"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return DeleteCommand"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws DukeException If delete is not followed by a number"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Command createDeleteCommand(String str) throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String[] afterSplit \u003d str.trim().split(\" \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (afterSplit.length \u003c\u003d 1 || afterSplit[1].split(\" \").length \u003e 2) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please input a number after delete and nothing else.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new DeleteCommand(afterSplit[1]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Creates a ListCommand."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return ListCommand"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Command createListCommand() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Creates a FindCommand."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param str User\u0027s input"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return FindCommand"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws DukeException If a search term is not present"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Command createFindCommand(String str) throws DukeException{"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String[] afterSplit \u003d str.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (afterSplit.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please input a search term after find.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new FindCommand(afterSplit[1]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Creates an ExitCommand."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return ExitCommand"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Command createExitCommand() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Creates a RescheduleCommand"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param str User\u0027s input"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return RescheduleCommand"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Command createRescheduleCommand(String str) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String[] info \u003d str.split(\" \", 3);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        date \u003d FORMATTER.parse(info[2].trim());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new RescheduleCommand(info[1], date);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Create AddCommand for respective task."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param str The user\u0027s input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return An AddCommand containing information of which task to add and content of task"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws DukeException If the user did not follow the format of writing a command"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException If the datetime input is not according to the format"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Command createAddCommand(String str) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // info splits the string into description and datetime if available"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String[] info \u003d str.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // if info has length 1 it means that only the type of item is there but no description"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (info.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (info[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return createToDoCommand(info);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else if (info[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return createDeadlineCommand(info);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else if (info[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return createEventCommand(info);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DukeException(\"There is an unknown error parsing your message\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Create an AddCommand that add todo task to the current list of tasks"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param info String array that is in the form of [type of task, content of task]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return An AddCommand for ToDo task."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Command createToDoCommand(String[] info) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String[] result \u003d new String[2];"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        result[0] \u003d \"todo\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        result[1] \u003d info[1];"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new AddCommand(result);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Create an AddCommand that add deadline task to the current list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param info String array that is in the form of [type of task, content of task]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return An AddCommand for deadline."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws DukeException If the datetime is not specified"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException If the datetime is not in correct format"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Command createDeadlineCommand(String[] info) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String[] result \u003d new String[2];"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String[] dateTimeArr \u003d info[1].split(\"/by\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // if it is a deadline event but no slash the info will be just 1 string after split"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (dateTimeArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! You need a \""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    + \"/by to separate out the date time for this task.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        result[0] \u003d \"deadline\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        result[1] \u003d dateTimeArr[0].trim();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        date \u003d FORMATTER.parse(dateTimeArr[1].trim());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new AddCommand(result, date);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Create an AddCommand that add event task to the current list."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param info String array that is in the form of [type of task, content of task]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return An AddCommand for event."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws DukeException If the datetime is not specified"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException If the datetime is not in correct format"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Command createEventCommand(String[] info) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String[] result \u003d new String[2];"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String[] dateTimeArr \u003d info[1].split(\"/at\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // if it is a deadline event but no slash the info will be just 1 string after split"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (dateTimeArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! You need a \""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    + \"/at to separate out the date time for this task.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        result[0] \u003d \"event\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        result[1] \u003d dateTimeArr[0].trim();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        date \u003d FORMATTER.parse(dateTimeArr[1].trim());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new AddCommand(result, date);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Checks if the command is to mark a task as done."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param str The user\u0027s input"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return Whether the first word in the string is delete"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static boolean isDone(String str) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return str.trim().split(\" \", 2)[0].equals(\"done\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Checks if the command is to delete certain task."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param str The user\u0027s input"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return Whether the first word in the string is delete"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static boolean isDelete(String str) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return str.split(\" \", 2)[0].equals(\"delete\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Checks if the command is to list all tasks."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param str The user input"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return Whether the input equals list"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static boolean isList(String str) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return str.trim().equals(\"list\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Checks if the command is to find a task."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param str The user input"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return Wether find is the first word of the string input."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static boolean isFind(String str) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return str.split(\" \", 2)[0].equals(\"find\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Checks if the command is to exit the program."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param str The user input"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return Whether the input equals bye"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static boolean isExit(String str) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return str.trim().equals(\"bye\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Checks if the command is to add a task."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param str The user input"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return Whether the input contains todo, deadline or event"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static boolean isAdd(String str) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String commandWord \u003d str.trim().split(\" \", 2)[0];"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return commandWord.equals(\"todo\") || commandWord.equals(\"deadline\") || commandWord.equals(\"event\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Checks if the command is to reschedule a task"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param str The user\u0027s input"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return Whether the input\u0027s first word is reschedule"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static boolean isReschedule(String str) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String commandWord \u003d str.trim().split(\" \", 2)[0];"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return commandWord.equals(\"reschedule\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 304
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.paint.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" textFill\u003d\"#9a5454\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 23
    }
  },
  {
    "path": "src/test/java/duke/util/FormatterTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class FormatterTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    static final SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void formatTaskForWriting() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Task taskA \u003d new ToDo(\"   make coffee     \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Task taskB \u003d new Deadline(\"   submit due   \", formatter.parse(\"02/12/2019 1800\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Task taskC \u003d new Event(\"   orbital splashdown   \", formatter.parse(\"02/12/2019 1800\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        taskC.toggleState();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String expectedStringA \u003d \"ToDo|0|make coffee\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String expectedStringB \u003d \"Deadline|0|submit due|02/12/2019 1800\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String expectedStringC \u003d \"Event|1|orbital splashdown|02/12/2019 1800\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String actualStringA \u003d Formatter.formatTaskForWriting(taskA);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String actualStringB \u003d Formatter.formatTaskForWriting(taskB);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String actualStringC \u003d Formatter.formatTaskForWriting(taskC);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertAll(\"Ouput\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            () -\u003e assertEquals(expectedStringA, actualStringA),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            () -\u003e assertEquals(expectedStringB, actualStringB),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            () -\u003e assertEquals(expectedStringC, actualStringC)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 37
    }
  },
  {
    "path": "src/test/java/duke/util/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static final SimpleDateFormat FORMATTER \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void parseTaskString() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String case1 \u003d \"Deadline|0|    submit due |02/12/2019 1800\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Task deadlineExpected \u003d new Deadline(\"submit due\", FORMATTER.parse(\"02/12/2019 1800\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Task deadlineActual \u003d parser.parseTaskString(case1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertEquals(deadlineExpected.getContent(), deadlineActual.getContent());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertEquals(deadlineExpected.getTime(), deadlineActual.getTime());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertEquals(deadlineExpected.isDone(), deadlineActual.isDone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String case2 \u003d \"ToDo|0|  hey yo   \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Task toDoExpected \u003d new ToDo(\"hey yo\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Task toDoActual \u003d parser.parseTaskString(case2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertEquals(toDoExpected.getContent(), toDoActual.getContent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertEquals(toDoExpected.isDone(), toDoActual.isDone());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String case3 \u003d \"Event|1| orbital splashdown|02/12/2019 1800\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Task eventExpected \u003d new Event(\"orbital splashdown\", FORMATTER.parse(\"02/12/2019 1800\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        eventExpected.toggleState();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Task eventActual \u003d parser.parseTaskString(case3);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertEquals(eventExpected.getContent(), eventActual.getContent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertEquals(eventExpected.getTime(), eventActual.getTime());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertEquals(eventExpected.isDone(), eventActual.isDone());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void parseUserInput() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String inputA \u003d \"done 2\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Command commandExpectedA \u003d new DoneCommand(\"2\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Command commandActualA \u003d parser.parseUserInput(inputA);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        System.out.println(commandActualA.getCommand());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        System.out.println(commandExpectedA.getCommand());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertTrue(commandExpectedA.equals(commandActualA));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String inputB \u003d \"delete 1\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Command commandExpectedB \u003d new DeleteCommand(\"1\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Command commandActualB \u003d parser.parseUserInput(inputB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertTrue(commandExpectedB.equals(commandActualB));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String inputC \u003d \"list\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Command commandExpectedC \u003d new ListCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Command commandActualC \u003d parser.parseUserInput(inputC);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertTrue(commandExpectedC.equals(commandActualC));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String inputD \u003d \"todo make coffee\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Command commandExpectedD \u003d new AddCommand(new String[]{\"todo\", \"make coffee\"});"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Command commandActualD \u003d parser.parseUserInput(inputD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertTrue(commandExpectedD.equals(commandActualD));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String inputE \u003d \"deadline submit due /by 02/12/2019 1800\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Command commandExpectedE \u003d new AddCommand(new String[]{\"deadline\", \"submit due\"},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                FORMATTER.parse(\"02/12/2019 1800\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Command commandActualE \u003d parser.parseUserInput(inputE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertTrue(commandExpectedE.equals(commandActualE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String inputF \u003d \"event orbital splashdown /at 02/12/2019 1800\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Command commandExpectedF \u003d new AddCommand(new String[]{\"event\", \"orbital splashdown\"},"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                FORMATTER.parse(\"02/12/2019 1800\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Command commandActualF \u003d parser.parseUserInput(inputF);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertTrue(commandExpectedF.equals(commandActualF));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String inputG \u003d \"   bye    \";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Command commandExpectedG \u003d new ExitCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Command commandActualG \u003d parser.parseUserInput(inputG);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertTrue(commandExpectedG.equals(commandActualG));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String inputH \u003d \"ls\"; //exception"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Exception exceptionH \u003d assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                parser.parseUserInput(inputH));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertEquals(\"☹ OOPS!!! I do not understand what did you just typed.\", exceptionH.getMessage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String inputI \u003d \"delete \"; //exception"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Exception exceptionI \u003d assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                parser.parseUserInput(inputI));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertEquals(\"☹ OOPS!!! Please input a number after delete and nothing else.\", exceptionI.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String inputJ \u003d \"todo \"; //exception"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Exception exceptionJ \u003d assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                parser.parseUserInput(inputJ));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertEquals(\"☹ OOPS!!! The description of a task cannot be empty.\", exceptionJ.getMessage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String inputK \u003d \"deadline submit due /by 02122019 1800\"; //exception"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Exception exceptionK \u003d assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                parser.parseUserInput(inputK));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertEquals(\"Unparseable date: \\\"02122019 1800\\\"\", exceptionK.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String inputL \u003d \"event orbital splashdown at/ 02/12/2019 1800\"; //exception"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Exception exceptionL \u003d assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                parser.parseUserInput(inputL));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertEquals(\"☹ OOPS!!! You need a /at to separate out the date time for this task.\", exceptionL.getMessage());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 118
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Hello I\u0027m Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Got it. I\u0027ve added this task"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [T][✗] read book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Now you have 1 task in the list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Got it. I\u0027ve added this task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [D][✗] return book (by: June 6th)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Now you have 2 tasks in the list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Got it. I\u0027ve added this task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [E][✗] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Now you have 3 tasks in the list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Got it. I\u0027ve added this task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [T][✗] join sports club"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Now you have 4 tasks in the list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Got it. I\u0027ve added this task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [T][✗] borrow book"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Now you have 5 tasks in the list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Nice! I\u0027ve marked this task as done: "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [T][✓] read book"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Nice! I\u0027ve marked this task as done: "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [E][✓] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Nice! I\u0027ve marked this task as done: "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [D][✓] return book (by: June 6th)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Noted. I\u0027ve removed this task: "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [T][✓] read book"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Now you have 4 tasks in the list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Noted. I\u0027ve removed this task: "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [E][✓] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Now you have 3 tasks in the list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Noted. I\u0027ve removed this task: "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "  [T][✗] borrow book"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Now you have 2 tasks in the list"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 32
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 12
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "java -classpath ../src/main/java Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 34
    }
  }
]
